{"version":3,"sources":["assets/MauBinh/MauBinhScript/MauBinh.CardUtil.ts","assets/MauBinh/MauBinhScript/MauBinh.Card.ts","assets/MauBinh/MauBinhScript/MauBinh.Cmd.ts","assets/MauBinh/MauBinhScript/MauBinh.Controller.ts","assets/MauBinh/MauBinhScript/MauBinh.DetectGroupCards.ts","assets/MauBinh/MauBinhScript/MauBinh.DetectPlayerCards.ts","assets/MauBinh/MauBinhScript/MauBinh.DragCard.ts","assets/MauBinh/MauBinhScript/MauBinh.ItemRoom.ts","assets/MauBinh/MauBinhScript/MauBinh.MeCard.ts","assets/MauBinh/MauBinhScript/MauBinh.NetworkClient.ts","assets/MauBinh/MauBinhScript/MauBinh.Player.ts"],"names":["common","_a","cc","_decorator","ccclass","property","CardUtils","getCardInfo","a","this","id","so","getSoById","chat","getChatById","diem","getDiemById","Math","floor","getNormalId","getNumber","exports","default","maubinh","MauBinh_Cmd_1","require","MauBinhCard","b","display","prototype","setCard","getSuit","getId","getColor","Code","SPADE","CLUB","BLACK","DIAMOND","HEART","RED","cmd","Configs_1","Network_InPacket_1","Network_OutPacket_1","LOGIN","TOPSERVER","CMD_PINGPONG","CMD_JOIN_ROOM","CMD_RECONNECT_ROOM","MONEY_BET_CONFIG","JOIN_ROOM_FAIL","CHAT_ROOM","CREATE_ROOM","GET_LIST_ROOM","JOIN_GAME_ROOM_BY_ID","BINH_SO_CHI","BAT_DAU","KET_THUC","AUTO_BINH_SO_CHI","CHIA_BAI","BAO_BINH","TU_DONG_BAT_DAU","XEP_LAI","DAT_CUOC","THONG_TIN_BAN_CHOI","DANG_KY_THOAT_PHONG","VAO_GA","DOI_CHUONG","MOI_DAT_CUOC","CHEAT_CARDS","DANG_KY_CHOI_TIEP","UPDATE_OWNER_ROOM","JOIN_ROOM_SUCCESS","LEAVE_GAME","NOTIFY_KICK_FROM_ROOM","NEW_USER_JOIN","NOTIFY_USER_GET_JACKPOT","UPDATE_MATCH","PLAYER_STATUS_OUT_GAME","PLAYER_STATUS_VIEWER","PLAYER_STATUS_SITTING","PLAYER_STATUS_PLAYING","TYPE_SANH_RONG","TYPE_MUOI_BA_CAY_DONG_MAU","TYPE_MUOI_HAI_CAY_DONG_MAU","TYPE_BA_CAI_THUNG","TYPE_BA_CAI_SANH","TYPE_LUC_PHE_BON","TYPE_BINH_THUONG","TYPE_BINH_LUNG","GROUP_THUNG_PHA_SANH","GROUP_TU_QUY","GROUP_CU_LU","GROUP_THUNG","GROUP_SANH","GROUP_SAM_CO","GROUP_THU","GROUP_MOT_DOI","GROUP_MAU_THAU","LV_THUONG","LV_HA","LV_BINH_THUONG","STATE_NO_START","STATE_PLAYING","STATE_END","MAX_PLAYER","CmdLogin","_super","_this","call","initData","setControllerId","setCmdId","packHeader","putString","updateSize","__extends","CmdJoinRoom","c","putInt","putLong","CmdReconnectRoom","CmdSendRequestLeaveGame","CmdSendHoldRoom","SendGetGameConfig","SendGetTopServer","putByte","SendCreateRoom","d","e","f","g","h","SendCardCheat","putShort","length","CmdSendPing","SendGetListRoom","App","MONEY_TYPE","SendJoinRoomById","SendChatRoom","encodeURI","SendBinhSoChi","SendBaoBinh","SendAutoBinhSoChi","SendXepLai","ReceivedLogin","data","ReceivedGetListRoom","list","listSize","getShort","i","item","getInt","getByte","getString","getBool","getLong","push","ReceivedJoinRoomSucceed","myChair","moneyBet","roomId","gameId","moneyType","rule","playerSize","playerStatus","playerInfos","gameState","gameAction","countDownTime","ReceivedAutoStart","isAutoStart","timeAutoStart","ReceivedChiaBai","cardList","mauBinh","countdown","ReceivedUserLeaveRoom","chair","nickName","ReceivedUserJoinRoom","info","uStatus","ReceivedUpdateMatch","hasInfo","infos","ReceivedNotifyRegOutRoom","outChair","isOutRoom","ReceivedKickOff","reason","ReceivedMoiDatCuoc","timeDatCuoc","ReceivedMoBai","chairMoBai","cardSize","cards","ReceivedEndGame","playerResultList","timeEndGame","ReceivedDoiChuong","chuongChair","ReceivedChatRoom","isIcon","content","decodeURI","nickname","ReceivedGameInfo","countdownTime","players","maubinhType","moneyCommon","sochi","status","avatar","userId","currentMoney","ReceivedTopServer","rankType","topDay_money","topWeek_money","topMonth_money","topDay_number","topWeek_number","topMonth_number","ReceivedJoinRoomFail","ReceivedMauBinhConfig","ReceivedBinhSoChi","ReceivedXepLai","MauBinh_NetworkClient_1","MauBinh_CardUtil_1","MauBinh_DetectPlayerCards_1","App_1","BroadcastReceiver_1","Utils_1","Network_Cmd_1","configPlayer","defaultPlayerPos","MauBinhController","apply","arguments","UI_ChooseRoom","labelNickName","labelCoin","contentListRooms","prefabItemRoom","scrollListRoom","edtFindRoom","btnHideRoomFull","isInitedUIRoom","UI_Playing","meCards","groupPlayers","spriteCards","spriteCardBack","cardsDeal","btnLeaveRoom","labelRoomId","labelRoomBet","actionBetting","cardMove","suggestTarget","btnSoChi","btnCombining","tableCurrentChi","notifyTimeStart","notifyTimeEnd","notifyTimeBet","fxSoChiTotal","spriteSoChiTotal","UI_Chat","edtChatInput","popupNodity","labelNotifyContent","popupGuide","spriteGroupCard","seatOwner","currentRoomBet","minutes","seconds","timeEnd","timeBet","intervalWaitting","intervalEnd","intervalBetting","currentCard","timeoutChiaBaiDone","timeoutBetting","isTinhAce","MauBinhController_1","onLoad","instance","initConfigPlayer","start","showUIRooms","showErrLoading","getInstance","addOnOpen","send","SendLogin","Login","Nickname","AccessToken","addOnClose","loadScene","connect","joinRoom","showLoading","refeshListRoom","removeAllChildren","findRoomId","text","string","trim","idFind","parseInt","index","childrenCount","children","getComponent","roomInfo","active","hideRoomFull","isChecked","roomItem","USER_UPDATE_COIN","register","formatNumber","Coin","setupListener","closeUIRoom","createRoom","playingNow","arrRoomOkMoney","roomCrowed","roomItemCrowed","roomChoosed","alertDialog","showMsg","showUIChat","runAction","moveTo","closeUIChat","chatEmotion","event","chatMsg","showPopupGuide","closePopupGuide","backToLobby","close","showUIPlaying","closeUIPlaying","actionLeaveRoom","setupMatch","startBettingCountDown","playerId","playerPos","arrPlayerPosExist","arrPlayerInfo","arrPlayerStatus","findPos","indexOf","seatId","getPlayerHouse","resetPlayerInfo","isViewer","setIsViewer","playFxDangXep","showCardReal","showCardReady","playFxViewer","setupSeatPlayer","showBtnInvite","startWaittingCountDown","timeWait","setTimeWaittingCountDown","unschedule","schedule","Label","startEndCountDown","setTimeEndCountDown","turnTime","processBetting","rate","toFixed","Sprite","fillRange","getCardsScore","arrCards","score","addListener","getCmdId","res","msg","getError","itemData","instantiate","initItem","addChild","scrollToTop","seatId_1","findPlayerSeatByPos","scaleCardReal","offDrag","playFxXepXong","seatId_2","activeDrag","actionHoldRoom","resetState","result","seatId_3","chairIndex","totalCards","chi3","chi2","chi1","spriteCardId","spriteFrame","resetResultGame","prepareFxAction","soChi","cardList_1","mauBinh_1","countdown_1","clearTimeout","setTimeout","arrChiCuoi","arrChiGiua","arrChiDau","logCard","arrSeatExist","getNumPlayers","numPlayer_1","setPosition","seatId_4","card4Me","rawPlayerPos","Vec2","position","x","y","sequence","delayTime","timeUnderLayer","seatId_5","resetCardReady","prepareToTransform","cardOpen","setupCard","pos","is_Upper","card","transformToCardReal","actionAutoBinhSoChi","isGood","typeName","getBinhName","playFxResultGeneral","index_1","initCard","getPlayerCardsInfo","arrChiCuoi_1","arrChiGiua_1","arrChiDau_1","highLightCards","chiCuoi","chiGiua","chiDau","getChiName","resetPlayersPlaying","stopAllActions","money","seatId_6","showNotify","seatId_7","customPlayerInfo","setGold","seatId_8","showChatEmotion","seatId_9","showChatMsg","actionBaoBinh","actionBinhSoChi","actionXepLai","cardSelect","card_info","card_pos","card_Id","cardMoveId","cardMoveValue","setCardShadow","shadowCard","showMoveTarget","targetName","cardTarget","setCardFocus","completeMoveCard","cardFrom","cardTo","card_id","src","card_Open","updateCard","cardType","chiId","groupKind","end","a_1","a_2","resetMatchHistory","playerInfo","setAvatar","setName","findPlayerSeatByUid","uid","seat","findPlayerPosBySeat","playerPosEntry","name","needSoChi","needShowMoneyWhenSoChi","needBatSap","moneySap","resetResultChi","isNeedSoChi","isNeedShowMoneyWhenSoChi","_loop_1","playerCardInfo","this_1","spriteId","goldChi","moneyInChi","playFxCompareChi","playFxGoldSoChi","prepareCardReal","totalGoldChi","playFxWinSoChi","playFxLoseSoChi","totalCards_1","a_3","a_4","node","callFunc","showGoldResult","batSap","fxWin","moneyChange","fxLose","countWin","countLose","scaleTo","playFxSoChiTotal","soAt","arrCard","num","update","__decorate","Node","Prefab","ScrollView","EditBox","Toggle","SpriteFrame","Button","Component","DetectGroupCards","valueList","getGroupCardsInfo","getGroupKind","isSamCo","isMotDoi","isThungPhaSanh","isTuQuy","isCuLu","isThung","isSanh","isThu","getSortedCardList","getGroupKindLevel","sort","sortCardList","isIncrease","max","min","addCard","removeCard","splice","MauBinh_Card_1","MauBinh_DetectGroupCards_1","DetectPlayerCards","kind_01","kind_02","kind_03","isSanhRong","isMuoiBaCayDongMau","isMuoiHaiCayDongMau","isBaCaiThung","isBaCaiSanh","isLucPheBon","isBinhLung","addCardToChiDau","addCardToChiGiua","addCardToChiCuoi","getChi","getGroupCardContainsIndex","getAllCards","concat","swapCard","getSortedCardListFromList","haveSauDoi","compareChi","MauBinh_Controller_1","DragCardController","currentTarget","other","self","DragCardController_1","director","getCollisionManager","enabled","updatePos","pos_X","pos_Y","opacity","endMove","onCollisionEnter","ItemRoom","labelBet","labelBetMin","labelNumPlayers","progressNumPlayers","chooseRoom","MauBinh_DragCard_1","MeCardController","imgFocus","imgCard","imgShadow","initPos","canDrag","MeCardController_1","onEnable","on","EventType","TOUCH_START","onBeginDrag","TOUCH_MOVE","onDrag","TOUCH_END","onEndDrag","onDisable","off","dragging","delta","getDelta","currentPos","tween","to","scaleX","setCardSrc","state","setIsActive","getIsActive","Network_NetworkClient_1","Network_NetworkListener_1","MauBinhNetworkClient","listeners","Array","isUseWSS","USE_WSS","HOST_BINH","host","port","onOpen","ev","onMessage","Uint8Array","listener","target","Object","callback","packet","Int8Array","_length","_data","ws","isConnected","buffer","Player","btnInvite","cardReady","cardReal","userName","userGold","owner","cardsName","actionViewer","actionThinking","actionWin","goldWin","actionLose","goldLose","actionXepXong","actionDangXep","notify","shadowAvatar","shadowInfo","resultGame","spriteResultChi","spriteResultGeneral","actionGoldSoChi","timeoutNotify","timeoutShowCardName","timeoutChat","sp","Skeleton","setAnimation","setOwner","getAvatarSpriteFrame","scale","cardPos","spriteCard","showCardName","img","showGold","formatGold","setCardReal","showPlayCountdown","processThinking","hidePlayCountdown","resetAction","Animation","play","type","isSoChi","fxGoldChange","shadowCardReady","color","Color","GRAY","WHITE","shadowCardReal","setCardWin","resetCardReal","goldStart","goldEnd","goldAdd","deltaGoldAdd","rep","repeat","seq","price","toString","replace"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\r\n\r\nexport namespace common {\r\n    export class CardUtils {\r\n        static id: number;\r\n        static so: number;\r\n        static chat: number;\r\n        static diem: number;\r\n\r\n        static getCardInfo(a: number) {\r\n            this.id = a;\r\n            this.so = this.getSoById(a);\r\n            this.chat = this.getChatById(a);\r\n            this.diem = this.getDiemById(a)\r\n        }\r\n\r\n        static getSoById(a: number): number {\r\n            return Math.floor(a / 4)\r\n        }\r\n\r\n        static getDiemById(a: number): number {\r\n            return Math.floor(a / 4) + 1\r\n        }\r\n\r\n        static getChatById(a: number): number {\r\n            return a % 4\r\n        }\r\n\r\n        static getNormalId(a: number): number {\r\n            // var b: number = -1;\r\n            // b = 4 > a ? 11 : 8 > a ? 12 : Math.floor(a / 4) - 2;\r\n            // a = Math.floor(a % 4);\r\n            // 3 == a ? a = 2 : 2 == a && (a = 3);\r\n            // return 4 * b + a\r\n\r\n            return a;\r\n        }\r\n\r\n        static getNumber(id) {\r\n            return Math.floor(id / 4) + 2\r\n        }\r\n    }\r\n}\r\nexport default common.CardUtils;","import Cmd from './MauBinh.Cmd';\r\n\r\nexport namespace maubinh {\r\n    export class MauBinhCard {\r\n        id: -1;\r\n        display: null;\r\n\r\n        constructor(a, b) {\r\n            this.id = a;\r\n            this.display = b;\r\n        }\r\n\r\n        setCard(a, b) {\r\n            this.id = 4 * (a - 2) + b\r\n        }\r\n\r\n        getNumber() {\r\n            return Math.floor(this.id / 4) + 2\r\n        }\r\n\r\n        getSuit() {\r\n            return this.id % 4\r\n        }\r\n\r\n        getId() {\r\n            return this.id\r\n        }\r\n\r\n        getColor() {\r\n            var a = this.getSuit();\r\n            if (a == Cmd.Code.SPADE || a == Cmd.Code.CLUB) return Cmd.Code.BLACK;\r\n            if (a == Cmd.Code.DIAMOND || a == Cmd.Code.HEART) return Cmd.Code.RED;\r\n            //  cc.log(\"Not consistent card color with suit \\x3d \" + a);\r\n            return null\r\n        }\r\n    }\r\n}\r\nexport default maubinh.MauBinhCard;\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport OutPacket from \"../../Lobby/LobbyScript/Script/networks/Network.OutPacket\";\r\n\r\n\r\nexport namespace cmd {\r\n    export class Code {\r\n        static LOGIN = 1;\r\n        static TOPSERVER = 1001;\r\n        static CMD_PINGPONG = 1050;\r\n\r\n        static CMD_JOIN_ROOM = 3001;\r\n        static CMD_RECONNECT_ROOM = 3002;\r\n        static MONEY_BET_CONFIG = 3003;\r\n        static JOIN_ROOM_FAIL = 3004;\r\n        static CHAT_ROOM = 3008;\r\n\r\n        static CREATE_ROOM = 3013;\r\n        static GET_LIST_ROOM = 3014;\r\n        static JOIN_GAME_ROOM_BY_ID = 3015;\r\n\r\n        static BINH_SO_CHI = 3101; // new\r\n        static BAT_DAU = 3102;\r\n        static KET_THUC = 3103;\r\n        static AUTO_BINH_SO_CHI = 3104; // new\r\n        static CHIA_BAI = 3105;\r\n        static BAO_BINH = 3106; // new\r\n        static TU_DONG_BAT_DAU = 3107;\r\n        static XEP_LAI = 3108; // new\r\n        static DAT_CUOC = 3109;\r\n        static THONG_TIN_BAN_CHOI = 3110;\r\n        static DANG_KY_THOAT_PHONG = 3111;\r\n        static VAO_GA = 3112;\r\n        static DOI_CHUONG = 3113;\r\n        static MOI_DAT_CUOC = 3114;\r\n        static CHEAT_CARDS = 3115;\r\n        static DANG_KY_CHOI_TIEP = 3116;\r\n        static UPDATE_OWNER_ROOM = 3117;\r\n        static JOIN_ROOM_SUCCESS = 3118;\r\n        static LEAVE_GAME = 3119;\r\n        static NOTIFY_KICK_FROM_ROOM = 3120;\r\n        static NEW_USER_JOIN = 3121;\r\n        static NOTIFY_USER_GET_JACKPOT = 3122;\r\n        static UPDATE_MATCH = 3123;\r\n\r\n        // Player State\r\n        static PLAYER_STATUS_OUT_GAME = 0;\r\n        static PLAYER_STATUS_VIEWER = 1;\r\n        static PLAYER_STATUS_SITTING = 2;\r\n        static PLAYER_STATUS_PLAYING = 3;\r\n\r\n        // Cards Type\r\n        static TYPE_SANH_RONG = 0;\r\n        static TYPE_MUOI_BA_CAY_DONG_MAU = 1;\r\n        static TYPE_MUOI_HAI_CAY_DONG_MAU = 2;\r\n        static TYPE_BA_CAI_THUNG = 3;\r\n        static TYPE_BA_CAI_SANH = 4;\r\n        static TYPE_LUC_PHE_BON = 5;\r\n        static TYPE_BINH_THUONG = 6;\r\n        static TYPE_BINH_LUNG = 7;\r\n\r\n        // Group Kind\r\n        static GROUP_THUNG_PHA_SANH = 0;\r\n        static GROUP_TU_QUY = 1;\r\n        static GROUP_CU_LU = 2;\r\n        static GROUP_THUNG = 3;\r\n        static GROUP_SANH = 4;\r\n        static GROUP_SAM_CO = 5;\r\n        static GROUP_THU = 6;\r\n        static GROUP_MOT_DOI = 7;\r\n        static GROUP_MAU_THAU = 8;\r\n\r\n        // Cards Kind Level\r\n        static LV_THUONG = 0;\r\n        static LV_HA = 1;\r\n        static LV_BINH_THUONG = 2;\r\n\r\n        // Cards Color\r\n        static BLACK = 0;\r\n        static RED = 1;\r\n\r\n        // Cards Suite\r\n        static SPADE = 0;\r\n        static CLUB = 1;\r\n        static DIAMOND = 2;\r\n        static HEART = 3;\r\n\r\n        // Game State\r\n        static STATE_NO_START = 0;\r\n        static STATE_PLAYING = 1;\r\n        static STATE_END = 2;\r\n\r\n        // Max Players\r\n        static MAX_PLAYER = 4;\r\n    }\r\n\r\n    // OutPacket\r\n    export class CmdLogin extends OutPacket {\r\n        constructor(a: string, b: string) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.LOGIN);\r\n            this.packHeader();\r\n            this.putString(a); // nickname\r\n            this.putString(b); // accessToken\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdJoinRoom extends OutPacket {\r\n        constructor(a: number, b: number, c: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CMD_JOIN_ROOM);\r\n            this.packHeader();\r\n            this.putInt(a);\r\n            this.putInt(b);\r\n            this.putLong(c);\r\n            this.putInt(0);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdReconnectRoom extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CMD_RECONNECT_ROOM);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdSendRequestLeaveGame extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.DANG_KY_THOAT_PHONG);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdSendHoldRoom extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.DANG_KY_CHOI_TIEP);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendGetGameConfig extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.MONEY_BET_CONFIG);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendGetTopServer extends OutPacket {\r\n        constructor(a: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.TOPSERVER);\r\n            this.packHeader();\r\n            this.putByte(a);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendCreateRoom extends OutPacket {\r\n        constructor(a: number, b: number, c: number, d: number, e: number, f: string, g: string, h: number,) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CREATE_ROOM);\r\n            this.packHeader();\r\n            this.putInt(a);\r\n            this.putInt(b);\r\n            this.putLong(c);\r\n            this.putInt(d);\r\n            this.putInt(e);\r\n            this.putString(f);\r\n            this.putString(g);\r\n            this.putLong(h);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendCardCheat extends OutPacket {\r\n        constructor(a: number, b: []) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CHEAT_CARDS);\r\n            this.packHeader();\r\n            this.putByte(a);\r\n            this.putByte(0);\r\n            this.putShort(b.length);\r\n            if (a)\r\n                for (var c = 0; c < b.length; c++) this.putByte(b[c]);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdSendPing extends OutPacket {\r\n        constructor(a: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CMD_PINGPONG);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendGetListRoom extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.GET_LIST_ROOM);\r\n            this.packHeader();\r\n            this.putInt(Configs.App.MONEY_TYPE);//money type\r\n            this.putInt(Code.MAX_PLAYER);//maxplayer\r\n            this.putLong(-1);//khong xac dinh\r\n            this.putInt(0);//khong xac dinh\r\n            this.putInt(0);//CARD_FROM\r\n            this.putInt(50);//CARD_TO\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendJoinRoomById extends OutPacket {\r\n        constructor(id: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.JOIN_GAME_ROOM_BY_ID);\r\n            this.packHeader();\r\n            this.putInt(id);\r\n            this.putString(\"\");//mat khau\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendChatRoom extends OutPacket {\r\n        constructor(a: number, b: string) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CHAT_ROOM);\r\n            this.packHeader();\r\n            this.putByte(a ? 1 : 0);\r\n            this.putString(encodeURI(b));\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n\r\n    export class SendBinhSoChi extends OutPacket {\r\n        constructor(a:number [], b:number [], c:number []) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.BINH_SO_CHI);\r\n            this.packHeader();\r\n            this.putShort(a.length);\r\n            for (var d = 0; d < a.length; d++) this.putByte(a[d]);\r\n            this.putShort(b.length);\r\n            for (d = 0; d < b.length; d++) this.putByte(b[d]);\r\n            this.putShort(c.length);\r\n            for (d = 0; d < c.length; d++) this.putByte(c[d]);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendBaoBinh extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.BAO_BINH);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendAutoBinhSoChi extends OutPacket {\r\n        constructor(a: number [], b:number [], c:number []) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.AUTO_BINH_SO_CHI);\r\n            this.packHeader();\r\n            this.putShort(a.length);\r\n            for (var d = 0; d < a.length; d++) this.putByte(a[d]);\r\n            this.putShort(b.length);\r\n            for (d = 0; d < b.length; d++) this.putByte(b[d]);\r\n            this.putShort(c.length);\r\n            for (d = 0; d < c.length; d++) this.putByte(c[d]);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendXepLai extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.XEP_LAI);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n\r\n    // InPacket\r\n    export class ReceivedLogin extends InPacket {\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            //  cc.log(\"____\");\r\n        }\r\n    }\r\n\r\n    export class ReceivedGetListRoom extends InPacket {\r\n        list: any[] = [];\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            let listSize = this.getShort();\r\n            this.list = [];\r\n            for (var i = 0; i < listSize; i++) {\r\n                let item: any = {};\r\n                item[\"id\"] = this.getInt();\r\n                item[\"userCount\"] = this.getByte();\r\n                item[\"limitPlayer\"] = this.getByte();\r\n                item[\"maxUserPerRoom\"] = this.getInt();\r\n                item[\"moneyType\"] = this.getByte();\r\n                item[\"moneyBet\"] = this.getInt();\r\n                item[\"requiredMoney\"] = this.getInt();\r\n                item[\"rule\"] = this.getByte();\r\n                item[\"nameRoom\"] = this.getString();\r\n                item[\"key\"] = this.getBool();\r\n                item[\"quyban\"] = this.getLong();\r\n                this.list.push(item)\r\n            }\r\n        }\r\n    }\r\n\r\n    // edited\r\n    export class ReceivedJoinRoomSucceed extends InPacket {\r\n        myChair: number;\r\n        moneyBet: number;\r\n        roomId: number;\r\n        gameId: number;\r\n        moneyType: number;\r\n        rule: number;\r\n        playerSize: number;\r\n        playerStatus: any[];\r\n        playerInfos: any[];\r\n        gameState: number;\r\n        gameAction: number;\r\n        countDownTime: number;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            var a: number;\r\n            this.myChair = this.getByte();\r\n            this.moneyBet = this.getLong();\r\n            this.roomId = this.getInt();\r\n            this.gameId = this.getInt();\r\n            this.moneyType = this.getByte();\r\n            this.rule = this.getByte();\r\n            this.playerSize = this.getShort();\r\n            this.playerStatus = [];\r\n            for (a = 0; a < this.playerSize; a++) this.playerStatus.push(this.getByte());\r\n            this.playerSize = this.getShort();\r\n            this.playerInfos = [];\r\n            for (a = 0; a < this.playerSize; a++) {\r\n                var b = {};\r\n                b[\"nickName\"] = this.getString();\r\n                b[\"avatar\"] = this.getString();\r\n                b[\"money\"] = this.getLong();\r\n                this.playerInfos.push(b);\r\n            }\r\n            this.gameState = this.getByte();\r\n            this.gameAction = this.getByte();\r\n            this.countDownTime = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedAutoStart extends InPacket {\r\n        isAutoStart: boolean;\r\n        timeAutoStart: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.isAutoStart = this.getBool();\r\n            this.timeAutoStart = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedChiaBai extends InPacket {\r\n        cardList: any[];\r\n        mauBinh: number;\r\n        gameId: number;\r\n        countdown: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            var a = this.getShort();\r\n            this.cardList = [];\r\n            for (var b = 0; b < a; b++) this.cardList.push(this.getByte());\r\n            this.mauBinh = this.getByte();\r\n            this.gameId = this.getInt();\r\n            this.countdown = this.getByte()\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedUserLeaveRoom extends InPacket {\r\n        chair: number;\r\n        nickName: string;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chair = this.getByte();\r\n            this.nickName = this.getString();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedUserJoinRoom extends InPacket {\r\n        info: {};\r\n        myChair: number;\r\n        uStatus: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.info = {};\r\n            this.info[\"nickName\"] = this.getString();\r\n            this.info[\"avatar\"] = this.getString();\r\n            this.info[\"money\"] = this.getLong();\r\n            this.myChair = this.getByte();\r\n            this.uStatus = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedUpdateMatch extends InPacket {\r\n        myChair: number;\r\n        hasInfo: any[];\r\n        infos: any[];\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.myChair = this.getByte();\r\n            var a = this.getShort();\r\n            this.hasInfo = [];\r\n            for (var b = 0; b < a; b++) this.hasInfo.push(this.getBool());\r\n            this.infos = [];\r\n            for (b = 0; b < a; b++) {\r\n                var c = {};\r\n                this.hasInfo[b] && (c[\"nickName\"] = this.getString(), c[\"avatar\"] = this.getString(), c[\"money\"] = this.getLong(), c[\"status\"] = this.getInt());\r\n                this.infos.push(c);\r\n            }\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedNotifyRegOutRoom extends InPacket {\r\n        outChair: number;\r\n        isOutRoom: boolean;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.outChair = this.getByte();\r\n            this.isOutRoom = this.getBool();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedKickOff extends InPacket {\r\n        reason: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.reason = this.getByte();\r\n        }\r\n    }\r\n\r\n    // co the k dung toi\r\n    export class ReceivedMoiDatCuoc extends InPacket {\r\n        timeDatCuoc: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.timeDatCuoc = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedMoBai extends InPacket {\r\n        chairMoBai: number;\r\n        cardSize: number;\r\n        cards: any[];\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chairMoBai = this.getByte();\r\n            this.cardSize = this.getShort();\r\n            this.cards = [];\r\n            for (var a = 0; a < this.cardSize; a++) {\r\n                this.cards.push(this.getByte());\r\n            }\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedEndGame extends InPacket {\r\n        playerResultList: any[];\r\n        timeEndGame: number;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.playerResultList = [];\r\n            for (var a = this.getShort(), b = 0; b < a; b++) {\r\n                var c = {};\r\n                c[\"chairIndex\"] = this.getByte();\r\n                c[\"maubinhType\"] = this.getInt();\r\n                var d = this.getShort();\r\n                c[\"chi1\"] = [];\r\n                for (var e = 0; e < d; e++) c[\"chi1\"].push(this.getByte());\r\n                d = this.getShort();\r\n                c[\"chi2\"] = [];\r\n                for (e = 0; e < d; e++) c[\"chi2\"].push(this.getByte());\r\n                d = this.getShort();\r\n                c[\"chi3\"] = [];\r\n                for (e = 0; e < d; e++) c[\"chi3\"].push(this.getByte());\r\n                c[\"moneyInChi\"] = [];\r\n                d = this.getShort();\r\n                for (e = 0; e < d; e++) c[\"moneyInChi\"].push(this.getLong());\r\n                c[\"moneyAt\"] = this.getLong();\r\n                c[\"moneyCommon\"] = this.getLong();\r\n                c[\"moneySap\"] = this.getLong();\r\n                c[\"currentMoney\"] = this.getLong();\r\n                this.playerResultList.push(c)\r\n            }\r\n            this.timeEndGame = this.getByte()\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedDoiChuong extends InPacket {\r\n        chuongChair: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chuongChair = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedChatRoom extends InPacket {\r\n        chair: number;\r\n        isIcon: boolean;\r\n        content: string;\r\n        nickname: string;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chair = this.getByte();\r\n            this.isIcon = this.getBool();\r\n            this.content = decodeURI(this.getString());\r\n            this.nickname = this.getString()\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedGameInfo extends InPacket {\r\n        myChair: number;\r\n        gameState: number;\r\n        gameAction: number;\r\n        countdownTime: number;\r\n        moneyBet: number;\r\n        moneyType: number;\r\n        gameId: number;\r\n        roomId: number;\r\n        rule: number;\r\n        hasInfo: any[];\r\n        players: any[];\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.myChair = this.getByte();\r\n            this.gameState = this.getByte();\r\n            this.gameAction = this.getByte();\r\n            this.countdownTime = this.getByte();\r\n            this.moneyBet = this.getLong();\r\n            this.moneyType = this.getByte();\r\n            this.gameId = this.getInt();\r\n            this.roomId = this.getInt();\r\n            this.rule = this.getByte();\r\n            var a = this.getShort();\r\n            this.hasInfo = [];\r\n            for (var b = 0; b < a; b++) this.hasInfo[b] = this.getBool();\r\n            this.players = [];\r\n            for (b = 0; b < cmd.Code.MAX_PLAYER; b++)\r\n                if (this.hasInfo[b]) {\r\n                    this.players[b] = {};\r\n                    if (this.gameState == cmd.Code.STATE_PLAYING) {\r\n                        if (b == this.myChair) {\r\n                            a = this.getShort();\r\n                            this.players[b].cardList = [];\r\n                            for (var c = 0; c < a; c++) this.players[b].cardList.push(this.getByte())\r\n                        }\r\n                    } else if (this.gameState == cmd.Code.STATE_END) {\r\n                        a = this.getShort();\r\n                        this.players[b].cardList = [];\r\n                        for (c = 0; c < a; c++) this.players[b].cardList.push(this.getByte());\r\n                        this.players[b].maubinhType = this.getByte();\r\n                        this.players[b].moneyCommon =\r\n                            this.getLong()\r\n                    }\r\n                    this.players[b].sochi = this.getBool();\r\n                    this.players[b].status = this.getByte();\r\n                    this.players[b].avatar = this.getString();\r\n                    this.players[b].userId = this.getInt();\r\n                    this.players[b].nickName = this.getString();\r\n                    this.players[b].currentMoney = this.getLong()\r\n                }\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedTopServer extends InPacket {\r\n        rankType: number;\r\n        topDay_money: string;\r\n        topWeek_money: string;\r\n        topMonth_money: string;\r\n        topDay_number: string;\r\n        topWeek_number: string;\r\n        topMonth_number: string;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.rankType = this.getByte();\r\n            this.topDay_money = this.getString();\r\n            this.topWeek_money = this.getString();\r\n            this.topMonth_money = this.getString();\r\n            this.topDay_number = this.getString();\r\n            this.topWeek_number = this.getString();\r\n            this.topMonth_number = this.getString();\r\n        }\r\n    }\r\n\r\n    export class ReceivedJoinRoomFail extends InPacket {\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedMauBinhConfig extends InPacket {\r\n        listSize: number;\r\n        list: any[];\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.listSize = this.getShort();\r\n            this.list = [];\r\n            for (var a = 0; a < this.listSize; a++) {\r\n                var b = {};\r\n                b[\"maxUserPerRoom\"] = this.getByte();\r\n                b[\"moneyType\"] = this.getByte();\r\n                b[\"moneyBet\"] = this.getLong();\r\n                b[\"moneyRequire\"] = this.getLong();\r\n                b[\"nPersion\"] = this.getInt();\r\n                this.list.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedBinhSoChi extends InPacket {\r\n        chair: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chair = this.getByte();\r\n        }\r\n    }\r\n\r\n    // new\r\n    export class ReceivedXepLai extends InPacket {\r\n        chair: number;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chair = this.getByte();\r\n        }\r\n    }\r\n\r\n}\r\nexport default cmd;","\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport Cmd from \"./MauBinh.Cmd\";\r\n\r\nimport MauBinhNetworkClient from \"./MauBinh.NetworkClient\";\r\nimport CardUtils from \"./MauBinh.CardUtil\"\r\n\r\nimport DetectPlayerCards from './MauBinh.DetectPlayerCards';\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport cmdNetwork from \"../../Lobby/LobbyScript/Script/networks/Network.Cmd\";\r\nvar configPlayer = [\r\n    // {\r\n    //     seatId: 0,\r\n    //     playerId: -1,\r\n    //     playerPos: -1,\r\n    //     isViewer: true\r\n    // }\r\n];\r\n\r\n// defaultPlayerPos[0 -> 3][0] = player_pos of me\r\nlet defaultPlayerPos = [\r\n    [0, 1, 2, 3],\r\n    [1, 2, 3, 0],\r\n    [2, 3, 0, 1],\r\n    [3, 0, 1, 2]\r\n]\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MauBinhController extends cc.Component {\r\n\r\n    public static instance: MauBinhController = null;\r\n\r\n    // UI Rooms\r\n    @property(cc.Node)\r\n    UI_ChooseRoom: cc.Node = null;\r\n    @property(cc.Label)\r\n    labelNickName: cc.Label = null;\r\n    @property(cc.Label)\r\n    labelCoin: cc.Label = null;\r\n    @property(cc.Node)\r\n    contentListRooms: cc.Node = null;\r\n    @property(cc.Prefab)\r\n    prefabItemRoom: cc.Prefab = null;\r\n    @property(cc.ScrollView)\r\n    scrollListRoom: cc.ScrollView = null;\r\n    @property(cc.EditBox)\r\n    edtFindRoom: cc.EditBox = null;\r\n    @property(cc.Toggle)\r\n    btnHideRoomFull: cc.Toggle = null;\r\n\r\n    public isInitedUIRoom = false;\r\n\r\n    // UI Playing\r\n    @property(cc.Node)\r\n    UI_Playing: cc.Node = null;\r\n    @property(cc.Node)\r\n    meCards: cc.Node = null;\r\n    @property(cc.Node)\r\n    groupPlayers: cc.Node = null;\r\n    @property(cc.SpriteFrame)\r\n    spriteCards: cc.SpriteFrame[] = [];\r\n    @property(cc.SpriteFrame)\r\n    spriteCardBack: cc.SpriteFrame = null;\r\n    @property(cc.Node)\r\n    cardsDeal: cc.Node = null;\r\n    @property(cc.Button)\r\n    btnLeaveRoom: cc.Button = null;\r\n    @property(cc.Label)\r\n    labelRoomId: cc.Label = null;\r\n    @property(cc.Label)\r\n    labelRoomBet: cc.Label = null;\r\n    @property(cc.Node)\r\n    actionBetting: cc.Node = null;\r\n    @property(cc.Node)\r\n    cardMove: cc.Node = null;\r\n    @property(cc.Node)\r\n    suggestTarget: cc.Node = null;\r\n    @property(cc.Node)\r\n    btnSoChi: cc.Node = null;\r\n    @property(cc.Node)\r\n    btnCombining: cc.Node = null;\r\n    @property(cc.Node)\r\n    tableCurrentChi: cc.Node = null;\r\n\r\n    // Notify\r\n    @property(cc.Node)\r\n    notifyTimeStart: cc.Node = null;\r\n    @property(cc.Node)\r\n    notifyTimeEnd: cc.Node = null;\r\n    @property(cc.Node)\r\n    notifyTimeBet: cc.Node = null;\r\n    @property(cc.Node)\r\n    fxSoChiTotal: cc.Node = null;\r\n    @property(cc.SpriteFrame)\r\n    spriteSoChiTotal: cc.SpriteFrame[] = [];\r\n\r\n    // UI Chat\r\n    @property(cc.Node)\r\n    UI_Chat: cc.Node = null;\r\n    @property(cc.EditBox)\r\n    edtChatInput: cc.EditBox = null;\r\n\r\n    // Popup\r\n    @property(cc.Node)\r\n    popupNodity: cc.Node = null;\r\n    @property(cc.Label)\r\n    labelNotifyContent: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    popupGuide: cc.Node = null;\r\n\r\n    @property(cc.SpriteFrame)\r\n    spriteGroupCard: cc.SpriteFrame[] = [];\r\n\r\n\r\n    private seatOwner = null;\r\n    private currentRoomBet = null;\r\n\r\n    private gameState = null;\r\n\r\n    private minutes = null;\r\n    private seconds = null;\r\n\r\n    private timeAutoStart = null;\r\n    private timeEnd = null;\r\n    private timeBet = null;\r\n    private intervalWaitting = null;\r\n    private intervalEnd = null;\r\n    private intervalBetting = null;\r\n\r\n    private currentCard = null;\r\n\r\n    private timeoutChiaBaiDone = null;\r\n    private timeoutBetting = null;\r\n\r\n    cardMoveId: -1;\r\n    cardMoveValue: \"\";\r\n\r\n    isTinhAce = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        MauBinhController.instance = this;\r\n\r\n        this.seatOwner = -1;\r\n\r\n        this.initConfigPlayer();\r\n    }\r\n\r\n    start() {\r\n        this.showUIRooms();\r\n\r\n        App.instance.showErrLoading(\"Đang kết nối tới server...\");\r\n        MauBinhNetworkClient.getInstance().addOnOpen(() => {\r\n            App.instance.showErrLoading(\"Đang đăng nhập...\");\r\n            MauBinhNetworkClient.getInstance().send(new cmdNetwork.SendLogin(Configs.Login.Nickname, Configs.Login.AccessToken));\r\n        }, this);\r\n        MauBinhNetworkClient.getInstance().addOnClose(() => {\r\n            App.instance.loadScene(\"Lobby\");\r\n        }, this);\r\n        MauBinhNetworkClient.getInstance().connect();\r\n    }\r\n\r\n    // Request UI Room\r\n    joinRoom(info) {\r\n        //  cc.log(\"MauBinh joinRoom roomInfo : \", info);\r\n        App.instance.showLoading(true);\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendJoinRoomById(info[\"id\"]));\r\n    }\r\n\r\n    refeshListRoom() {\r\n        this.contentListRooms.removeAllChildren(true);\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendGetListRoom());\r\n    }\r\n\r\n    findRoomId() {\r\n        //  cc.log(\"MauBinh findRoomId id : \", this.edtFindRoom.string);\r\n        let text = this.edtFindRoom.string.trim();\r\n        if (text.length > 0) {\r\n            let idFind = parseInt(text);\r\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\r\n                let roomItem = this.contentListRooms.children[index].getComponent(\"MauBinh.ItemRoom\");\r\n                if (roomItem.roomInfo[\"id\"] != idFind) {\r\n                    this.contentListRooms.children[index].active = false;\r\n                }\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\r\n                this.contentListRooms.children[index].active = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    hideRoomFull() {\r\n        if (this.btnHideRoomFull.isChecked) {\r\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\r\n                let roomItem = this.contentListRooms.children[index].getComponent(\"MauBinh.ItemRoom\");\r\n                if (roomItem.roomInfo[\"userCount\"] == roomItem.roomInfo[\"maxUserPerRoom\"]) {\r\n                    this.contentListRooms.children[index].active = false;\r\n                }\r\n            }\r\n        } else {\r\n            for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\r\n                this.contentListRooms.children[index].active = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    showUIRooms() {\r\n        this.UI_ChooseRoom.active = true;\r\n        if (this.isInitedUIRoom) {\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n        } else {\r\n            this.labelNickName.string = Configs.Login.Nickname;\r\n            BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n                this.labelCoin.string = Utils.formatNumber(Configs.Login.Coin);\r\n            }, this);\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            this.setupListener();\r\n        }\r\n    }\r\n\r\n    closeUIRoom() {\r\n        this.UI_ChooseRoom.active = false;\r\n    }\r\n\r\n    createRoom() {\r\n        //  cc.log(\"MauBinh createRoom\");\r\n        // MauBinhNetworkClient.getInstance().send(new Cmd.SendGetTopServer(1));\r\n    }\r\n\r\n    playingNow() {\r\n        //  cc.log(\"MauBinh playingNow\");\r\n        let arrRoomOkMoney = [];\r\n        for (let index = 0; index < this.contentListRooms.childrenCount; index++) {\r\n            let roomItem = this.contentListRooms.children[index].getComponent(\"MauBinh.ItemRoom\");\r\n            if (roomItem.roomInfo[\"requiredMoney\"] < Configs.Login.Coin) {\r\n                arrRoomOkMoney.push(index);\r\n            }\r\n        }\r\n\r\n        //  cc.log(\"MauBinh playingNow arrRoomOkMoney : \", arrRoomOkMoney);\r\n\r\n        if (arrRoomOkMoney.length > 0) {\r\n            let roomCrowed = arrRoomOkMoney[0];\r\n            //  cc.log(\"MauBinh playingNow roomCrowed start : \", roomCrowed);\r\n            for (let index = 0; index < arrRoomOkMoney.length; index++) {\r\n                let roomItem = this.contentListRooms.children[arrRoomOkMoney[index]].getComponent(\"MauBinh.ItemRoom\");\r\n                let roomItemCrowed = this.contentListRooms.children[roomCrowed].getComponent(\"MauBinh.ItemRoom\");\r\n                //  cc.log(\"MauBinh playingNow ------------------------------------------\");\r\n                //  cc.log(\"MauBinh playingNow roomItem : \", roomItem.roomInfo[\"userCount\"]);\r\n                //  cc.log(\"MauBinh playingNow roomItemCrowed : \", roomItemCrowed.roomInfo[\"userCount\"]);\r\n                if (roomItem.roomInfo[\"userCount\"] > roomItemCrowed.roomInfo[\"userCount\"]) {\r\n                    roomCrowed = arrRoomOkMoney[index];\r\n                    //  cc.log(\"MauBinh playingNow roomCrowed update : \", roomCrowed);\r\n                }\r\n            }\r\n            //  cc.log(\"MauBinh playingNow roomCrowed end : \", roomCrowed);\r\n            let roomChoosed = this.contentListRooms.children[roomCrowed].getComponent(\"MauBinh.ItemRoom\");\r\n            //  cc.log(\"MauBinh playingNow roomCrowed end roomInfo : \", roomChoosed.roomInfo);\r\n            this.joinRoom(roomChoosed.roomInfo);\r\n        } else {\r\n            App.instance.alertDialog.showMsg(\"Không đủ tiền tham gia\\nbất kỳ phòng nào !\");\r\n        }\r\n    }\r\n\r\n    // Chat\r\n    showUIChat() {\r\n        this.UI_Chat.active = true;\r\n        this.UI_Chat.runAction(\r\n            cc.moveTo(0.5, 420, 0)\r\n        );\r\n    }\r\n\r\n    closeUIChat() {\r\n        this.UI_Chat.runAction(\r\n            cc.moveTo(0.5, 1000, 0)\r\n        );\r\n    }\r\n\r\n    chatEmotion(event, id) {\r\n        //  cc.log(\"MauBinh chatEmotion id : \", id);\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendChatRoom(1, id));\r\n        this.closeUIChat();\r\n    }\r\n\r\n    chatMsg() {\r\n        if (this.edtChatInput.string.trim().length > 0) {\r\n            MauBinhNetworkClient.getInstance().send(new Cmd.SendChatRoom(0, this.edtChatInput.string));\r\n            this.edtChatInput.string = \"\";\r\n            this.closeUIChat();\r\n        }\r\n    }\r\n\r\n    showPopupGuide() {\r\n        this.popupGuide.active = true;\r\n    }\r\n\r\n    closePopupGuide() {\r\n        this.popupGuide.active = false;\r\n    }\r\n\r\n    backToLobby() {\r\n        MauBinhNetworkClient.getInstance().close();\r\n        App.instance.loadScene(\"Lobby\");\r\n    }\r\n\r\n    // Playing\r\n    showUIPlaying() {\r\n        this.UI_Playing.active = true;\r\n    }\r\n\r\n    closeUIPlaying() {\r\n        this.actionLeaveRoom();\r\n    }\r\n\r\n    setupMatch(data: Cmd.ReceivedJoinRoomSucceed) {\r\n        this.showUIPlaying();\r\n        this.closeUIChat();\r\n\r\n        //  cc.log(\"MauBinh setupMatch data : \", data);\r\n        //  cc.log(\"MauBinh setupMatch data !0 : \", !0);\r\n        //  cc.log(\"MauBinh setupMatch data !1 : \", !1);\r\n\r\n\r\n\r\n        let myChair = data[\"myChair\"];\r\n        let moneyBet = data[\"moneyBet\"];\r\n        let roomId = data[\"roomId\"];\r\n        let gameId = data[\"gameId\"];\r\n        let moneyType = data[\"moneyType\"];\r\n        let rule = data[\"rule\"];\r\n        let playerSize = data[\"playerSize\"];\r\n        let playerStatus = data[\"playerStatus\"];\r\n        let playerInfos = data[\"playerInfos\"];\r\n        let gameState = data[\"gameState\"];\r\n        let gameAction = data[\"gameAction\"];\r\n        let countDownTime = data[\"countDownTime\"];\r\n\r\n        this.labelRoomId.string = \"MẬU BINH - PHÒNG: \" + roomId;\r\n        this.labelRoomBet.string = \"MỨC CƯỢC: \" + Utils.formatNumber(moneyBet) + \"$\";\r\n\r\n        this.isTinhAce = rule == 1 ? true : false;\r\n        this.currentRoomBet = moneyBet;\r\n\r\n        if (gameState == Cmd.Code.STATE_PLAYING) {\r\n            this.startBettingCountDown(countDownTime);\r\n        }\r\n\r\n        configPlayer[0].playerId = Configs.Login.Nickname;\r\n        configPlayer[0].playerPos = myChair;\r\n        //  cc.log(\"MauBinh setupMatch configPlayer Me : \", configPlayer[0]);\r\n\r\n        var numPlayers = 0;\r\n        var arrPlayerPosExist = [];\r\n        var arrPlayerInfo = [];\r\n        var arrPlayerStatus = [];\r\n\r\n        for (let index = 0; index < playerInfos.length; index++) {\r\n            if (playerInfos[index].nickName !== \"\") {\r\n                numPlayers += 1;\r\n                arrPlayerPosExist.push(index);\r\n                arrPlayerInfo.push(playerInfos[index]);\r\n                arrPlayerStatus.push(playerStatus[index]);\r\n            }\r\n        }\r\n        //  cc.log(\"MauBinh numPlayers : \", numPlayers);\r\n\r\n        // setup configPlayer\r\n        for (let a = 0; a < configPlayer.length; a++) {\r\n            configPlayer[a].playerPos = defaultPlayerPos[myChair][a];\r\n        }\r\n\r\n        //  cc.log(\"MauBinh setupMatch configPlayer  : \", JSON.stringify(configPlayer));\r\n        //  cc.log(\"MauBinh setupMatch arrPlayerPosExist  : \", JSON.stringify(arrPlayerPosExist));\r\n        //  cc.log(\"MauBinh setupMatch arrPlayerInfo  : \", JSON.stringify(arrPlayerInfo));\r\n        //  cc.log(\"MauBinh setupMatch arrPlayerStatus  : \", JSON.stringify(arrPlayerStatus));\r\n\r\n        // set State of Seat : Yes | No exist Player\r\n        for (let index = 0; index < configPlayer.length; index++) {\r\n            let findPos = arrPlayerPosExist.indexOf(configPlayer[index].playerPos);\r\n\r\n            //  cc.log(\"MauBinh setupMatch find -------------- \");\r\n            //  cc.log(\"MauBinh setupMatch find \" + index + \" : \" + configPlayer[index].playerPos);\r\n            var seatId = configPlayer[index].seatId;\r\n            //  cc.log(\"MauBinh setupMatch find seatId \", seatId);\r\n            this.getPlayerHouse(seatId).resetPlayerInfo(seatId);\r\n\r\n            //  cc.log(\"MauBinh setupMatch find findPos \", findPos);\r\n            if (findPos > -1) {\r\n                // Exist player -> Set Player Info\r\n                //  cc.log(\"MauBinh setupMatch find arrPlayerStatus[findPos] : \", arrPlayerStatus[findPos]);\r\n                if (arrPlayerStatus[findPos] == Cmd.Code.PLAYER_STATUS_SITTING || arrPlayerStatus[findPos] == Cmd.Code.PLAYER_STATUS_PLAYING) {\r\n                    configPlayer[index].isViewer = false;\r\n                    this.getPlayerHouse(seatId).setIsViewer(false);\r\n                    if (seatId != 0) {\r\n                        if (gameState == Cmd.Code.STATE_PLAYING) {\r\n                            this.getPlayerHouse(seatId).playFxDangXep();\r\n                            this.getPlayerHouse(seatId).showCardReal(true);\r\n                            this.getPlayerHouse(seatId).showCardReady(false);\r\n                        }\r\n                    }\r\n                } else {\r\n                    configPlayer[index].isViewer = true;\r\n                    this.getPlayerHouse(seatId).setIsViewer(true);\r\n                    this.getPlayerHouse(seatId).playFxViewer();\r\n                }\r\n\r\n                this.setupSeatPlayer(seatId, arrPlayerInfo[findPos]);\r\n            } else {\r\n                // Not Exist player  -> Active Btn Add player\r\n                this.getPlayerHouse(seatId).showBtnInvite(true);\r\n                configPlayer[index].isViewer = true;\r\n            }\r\n        }\r\n        //  cc.log(\"MauBinh setupMatch configPlayer : \", configPlayer);\r\n    }\r\n\r\n\r\n    // Time Start\r\n    startWaittingCountDown(timeWait) {\r\n        this.timeAutoStart = timeWait;\r\n        this.setTimeWaittingCountDown();\r\n        this.notifyTimeStart.active = true;\r\n        this.unschedule(this.intervalWaitting);\r\n        this.schedule(this.intervalWaitting = () => {\r\n            this.timeAutoStart--;\r\n            this.setTimeWaittingCountDown();\r\n            if (this.timeAutoStart < 1) {\r\n                this.unschedule(this.intervalWaitting);\r\n                this.notifyTimeStart.active = false;\r\n            }\r\n        }, 1)\r\n    }\r\n\r\n    setTimeWaittingCountDown() {\r\n        this.seconds = Math.floor(this.timeAutoStart % 60);\r\n        this.notifyTimeStart.getComponent(cc.Label).string = \" Bắt đầu sau : \" + this.seconds + \"s \";\r\n    }\r\n\r\n    // Time End\r\n    startEndCountDown(timeWait) {\r\n        this.timeEnd = timeWait;\r\n        this.setTimeEndCountDown();\r\n        this.notifyTimeEnd.active = true;\r\n        this.unschedule(this.intervalEnd);\r\n        this.schedule(this.intervalEnd = () => {\r\n            this.timeEnd--;\r\n            this.setTimeEndCountDown();\r\n            if (this.timeEnd < 1) {\r\n                this.unschedule(this.intervalEnd);\r\n                this.notifyTimeEnd.active = false;\r\n            }\r\n        }, 1)\r\n    }\r\n\r\n    setTimeEndCountDown() {\r\n        this.seconds = Math.floor(this.timeEnd % 60);\r\n        this.notifyTimeEnd.getComponent(cc.Label).string = \" Kết thúc sau : \" + this.seconds + \"s \";\r\n    }\r\n\r\n    // Time Bet\r\n    startBettingCountDown(turnTime) {\r\n        //  cc.log(\"MauBinh startBettingCountDown turnTime : \", turnTime);\r\n        this.timeBet = turnTime;\r\n        this.actionBetting.active = true;\r\n        this.processBetting(1);\r\n        this.unschedule(this.intervalBetting);\r\n        this.schedule(this.intervalBetting = () => {\r\n            this.timeBet--;\r\n            var rate = (this.timeBet / turnTime).toFixed(1);\r\n            this.processBetting(rate);\r\n            if (this.timeBet < 1) {\r\n                this.unschedule(this.intervalBetting);\r\n                this.actionBetting.active = false;\r\n            }\r\n        }, 1);\r\n    }\r\n\r\n    processBetting(rate) {\r\n        //  cc.log(\"MauBinh processBetting rate : \", rate);\r\n        //  cc.log(\"MauBinh processBetting fillRange : \", this.actionBetting.children[0].getComponent(cc.Sprite).fillRange);\r\n        this.actionBetting.children[0].getComponent(cc.Sprite).fillRange = rate;\r\n    }\r\n\r\n    getCardsScore(arrCards) {\r\n        let score = 0;\r\n        for (let a = 0; a < 3; a++) {\r\n            score += CardUtils.getDiemById(arrCards[a]);\r\n        }\r\n        score = score % 10;\r\n        if (score == 0) {\r\n            score = 10;\r\n        }\r\n\r\n        return score;\r\n    }\r\n\r\n    // addListener\r\n    setupListener() {\r\n        MauBinhNetworkClient.getInstance().addListener((data) => {\r\n            let inpacket = new InPacket(data);\r\n            switch (inpacket.getCmdId()) {\r\n                case Cmd.Code.LOGIN:\r\n                    App.instance.showLoading(false);\r\n                    this.refeshListRoom();\r\n                    MauBinhNetworkClient.getInstance().send(new Cmd.CmdReconnectRoom());\r\n                    break;\r\n                case Cmd.Code.TOPSERVER:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedTopServer(data);\r\n                        //  cc.log(\"MauBinh TOPSERVER res : \", JSON.stringify(res));\r\n\r\n                        let rankType = res[\"rankType\"];\r\n                        let topDay_money = res[\"topDay_money\"];\r\n                        let topWeek_money = res[\"topWeek_money\"];\r\n                        let topMonth_money = res[\"topMonth_money\"];\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CMD_PINGPONG:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh CMD_PINGPONG\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CMD_JOIN_ROOM:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh CMD_JOIN_ROOM\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CMD_RECONNECT_ROOM:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh CMD_RECONNECT_ROOM\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.MONEY_BET_CONFIG:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh MONEY_BET_CONFIG\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.JOIN_ROOM_FAIL:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedJoinRoomFail(data);\r\n                        //  cc.log(\"MauBinh JOIN_ROOM_FAIL res : \", JSON.stringify(res));\r\n                        let msg = \"Lỗi \" + res.getError() + \", không xác định.\";\r\n                        switch (res.getError()) {\r\n                            case 1:\r\n                                msg = \"Lỗi kiểm tra thông tin!\";\r\n                                break;\r\n                            case 2:\r\n                                msg = \"Không tìm được phòng thích hợp. Vui lòng thử lại sau!\";\r\n                                break;\r\n                            case 3:\r\n                                msg = \"Bạn không đủ tiền vào phòng chơi này!\";\r\n                                break;\r\n                            case 4:\r\n                                msg = \"Không tìm được phòng thích hợp. Vui lòng thử lại sau!\";\r\n                                break;\r\n                            case 5:\r\n                                msg = \"Mỗi lần vào phòng phải cách nhau 10 giây!\";\r\n                                break;\r\n                            case 6:\r\n                                msg = \"Hệ thống bảo trì!\";\r\n                                break;\r\n                            case 7:\r\n                                msg = \"Không tìm thấy phòng chơi!\";\r\n                                break;\r\n                            case 8:\r\n                                msg = \"Mật khẩu phòng chơi không đúng!\";\r\n                                break;\r\n                            case 9:\r\n                                msg = \"Phòng chơi đã đủ người!\";\r\n                                break;\r\n                            case 10:\r\n                                msg = \"Bạn bị chủ phòng không cho vào bàn!\"\r\n                                break;\r\n                        }\r\n                        App.instance.alertDialog.showMsg(msg);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.GET_LIST_ROOM:\r\n                    {\r\n                        let res = new Cmd.ReceivedGetListRoom(data);\r\n                        //  cc.log(res);\r\n                        for (let i = 0; i < res.list.length; i++) {\r\n                            let itemData = res.list[i];\r\n                            let item = cc.instantiate(this.prefabItemRoom);\r\n                            item.getComponent(\"MauBinh.ItemRoom\").initItem(itemData);\r\n                            this.contentListRooms.addChild(item);\r\n                        }\r\n                        this.scrollListRoom.scrollToTop(0.2);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.JOIN_GAME_ROOM_BY_ID:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh JOIN_GAME_ROOM_BY_ID\");\r\n                    }\r\n                    break;\r\n\r\n                // ------------------------ Game ---------------------------     \r\n\r\n                case Cmd.Code.BINH_SO_CHI:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedBinhSoChi(data);\r\n                        //  cc.log(\"MauBinh ReceivedBinhSoChi res : \", JSON.stringify(res));\r\n\r\n                        let chair = res[\"chair\"];\r\n                        let seatId = this.findPlayerSeatByPos(chair);\r\n                        if (seatId != -1) {\r\n                            if (seatId == 0) {\r\n                                this.btnCombining.active = true;\r\n                                this.btnSoChi.active = false;\r\n                                this.getPlayerHouse(0).scaleCardReal(0.45);\r\n                                for (let index = 0; index < 13; index++) {\r\n                                    this.meCards.children[index].getComponent('MauBinh.MeCard').offDrag();\r\n                                }\r\n                            } else {\r\n                                this.getPlayerHouse(seatId).playFxXepXong();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.XEP_LAI:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedXepLai(data);\r\n                        //  cc.log(\"MauBinh ReceivedXepLai res : \", JSON.stringify(res));\r\n\r\n                        let chair = res[\"chair\"];\r\n                        let seatId = this.findPlayerSeatByPos(chair);\r\n                        if (seatId != -1) {\r\n                            if (seatId == 0) {\r\n                                this.btnCombining.active = false;\r\n                                this.btnSoChi.active = true;\r\n                                this.getPlayerHouse(0).scaleCardReal(1);\r\n                                for (let index = 0; index < 13; index++) {\r\n                                    this.meCards.children[index].getComponent('MauBinh.MeCard').activeDrag();\r\n                                }\r\n                            } else {\r\n                                this.getPlayerHouse(seatId).playFxDangXep();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.KET_THUC:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedEndGame(data);\r\n                        //  cc.log(\"MauBinh ReceivedEndGame res : \", JSON.stringify(res));\r\n\r\n                        this.actionHoldRoom();\r\n\r\n                        this.unschedule(this.timeoutBetting);\r\n                        this.actionBetting.active = false;\r\n\r\n                        this.btnSoChi.active = false;\r\n                        this.btnCombining.active = false;\r\n                        this.tableCurrentChi.active = false;\r\n\r\n                        for (let index = 0; index < 13; index++) {\r\n                            this.meCards.children[index].getComponent('MauBinh.MeCard').offDrag();\r\n                            this.meCards.children[index].getComponent('MauBinh.MeCard').resetState();\r\n                        }\r\n\r\n                        // {\r\n                        //     \"playerResultList\": [\r\n                        //         {\r\n                        //             \"chairIndex\": 0,\r\n                        //             \"maubinhType\": 7,\r\n                        //             \"chi1\": [50, 49, 47, 45, 38],\r\n                        //             \"chi2\": [35, 34, 33, 27, 23],\r\n                        //             \"chi3\": [21, 15, 5],\r\n                        //             \"moneyInChi\": [0, 0, 0],\r\n                        //             \"moneyAt\": 0,\r\n                        //             \"moneyCommon\": -120000,\r\n                        //             \"moneySap\": 0,\r\n                        //             \"currentMoney\": 18063610\r\n                        //         },\r\n                        //         {\r\n                        //             \"chairIndex\": 1,\r\n                        //             \"maubinhType\": 6,\r\n                        //             \"chi1\": [39, 37, 36, 51, 41],\r\n                        //             \"chi2\": [22, 20, 32, 29, 24],\r\n                        //             \"chi3\": [16, 12, 4],\r\n                        //             \"moneyInChi\": [0, 0, 0],\r\n                        //             \"moneyAt\": 0,\r\n                        //             \"moneyCommon\": 117600,\r\n                        //             \"moneySap\": 0,\r\n                        //             \"currentMoney\": 0\r\n                        //         }\r\n                        //     ],\r\n                        //     \"timeEndGame\": 5\r\n                        // }\r\n\r\n                        let playerResultList = res[\"playerResultList\"];\r\n                        let timeEndGame = res[\"timeEndGame\"];\r\n\r\n                        this.unschedule(this.intervalBetting);\r\n                        this.actionBetting.active = false;\r\n\r\n                        // show Me cards\r\n                        for (let index = 0; index < playerResultList.length; index++) {\r\n                            let result = playerResultList[index];\r\n                            let seatId = this.findPlayerSeatByPos(result.chairIndex);\r\n                            if (seatId != -1 && seatId == 0) {\r\n                                let totalCards = [\r\n                                    result.chi3[0], result.chi3[1], result.chi3[2],\r\n                                    result.chi2[0], result.chi2[1], result.chi2[2], result.chi2[3], result.chi2[4],\r\n                                    result.chi1[0], result.chi1[1], result.chi1[2], result.chi1[3], result.chi1[4]\r\n                                ];\r\n\r\n                                for (let a = 0; a < 13; a++) {\r\n                                    let spriteCardId = CardUtils.getNormalId(totalCards[a]);\r\n                                    this.meCards.children[a].children[1].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\r\n                                }\r\n                                Configs.Login.Coin = result.currentMoney;\r\n                                BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                            }\r\n                        }\r\n\r\n                        for (let index = 0; index < Cmd.Code.MAX_PLAYER; index++) {\r\n                            this.getPlayerHouse(index).resetResultGame();\r\n                            this.getPlayerHouse(index).prepareFxAction();\r\n                        }\r\n\r\n                        this.getPlayerHouse(0).scaleCardReal(0.45);\r\n                        this.soChi(1, playerResultList);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CHIA_BAI:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedChiaBai(data);\r\n                        //  cc.log(\"MauBinh ReceivedChiaBai res : \", JSON.stringify(res));\r\n\r\n                        // {\r\n                        //     \"cardList\": [46, 42, 41, 35, 33, 31, 30, 23, 22, 15, 9, 5, 2],\r\n                        //     \"mauBinh\": 6,\r\n                        //     \"gameId\": 9859882,\r\n                        //     \"countdown\": 60\r\n                        // }\r\n\r\n                        this.btnSoChi.active = false;\r\n                        this.btnCombining.active = false;\r\n\r\n                        let cardList = res[\"cardList\"];\r\n                        let mauBinh = res[\"mauBinh\"];\r\n                        let gameId = res[\"gameId\"];\r\n                        let countdown = res[\"countdown\"];\r\n\r\n                        clearTimeout(this.timeoutBetting);\r\n                        this.timeoutBetting = setTimeout(() => {\r\n                            this.startBettingCountDown(countdown);\r\n                        }, 3000); // 2000\r\n\r\n                        this.currentCard = cardList;\r\n                        //  cc.log(\"MauBinh ReceivedChiaBai currentCard : \", this.currentCard);\r\n\r\n                        let arrChiCuoi = [this.currentCard[0], this.currentCard[1], this.currentCard[2]];\r\n                        let arrChiGiua = [this.currentCard[3], this.currentCard[4], this.currentCard[5], this.currentCard[6], this.currentCard[7]];\r\n                        let arrChiDau = [this.currentCard[8], this.currentCard[9], this.currentCard[10], this.currentCard[11], this.currentCard[12]];\r\n                        //  cc.log(\"Check currentCard ====================================== \");\r\n                        this.logCard(this.currentCard);\r\n                        this.logCard(arrChiCuoi);\r\n                        this.logCard(arrChiGiua);\r\n                        this.logCard(arrChiDau);\r\n\r\n                        var arrSeatExist = this.getNumPlayers();\r\n                        let numPlayer = arrSeatExist.length;\r\n\r\n                        let cardDeal = 4;\r\n                        // Open | Hide cards not use -> Mau binh nhieu la bai qua nen chi chia 4 la tuong trung\r\n                        for (let index = 0; index < Cmd.Code.MAX_PLAYER * cardDeal; index++) { // 4 players * 4 cards\r\n                            this.cardsDeal.children[index].active = index >= numPlayer * cardDeal ? false : true;\r\n                            this.cardsDeal.children[index].setPosition(0, 0);\r\n                        }\r\n\r\n                        let timeShip = 0.1; // 0.15\r\n                        // Move Cards used to each player joined\r\n                        for (let a = 0; a < cardDeal; a++) { // players x 4 cards\r\n                            for (let b = 0; b < numPlayer; b++) {\r\n                                let seatId = arrSeatExist[b];\r\n                                if (seatId !== -1) {\r\n                                    let card4Me = this.cardsDeal.children[(a * numPlayer) + b];\r\n                                    let rawPlayerPos = new cc.Vec2(this.groupPlayers.children[seatId].position.x,this.groupPlayers.children[seatId].position.y);\r\n                                    //  cc.log(\"MauBinh CHIA_BAI delayTime : \", ((a * numPlayer) + b) * timeShip);\r\n                                    card4Me.runAction(\r\n                                        cc.sequence(\r\n                                            cc.delayTime(((a * numPlayer) + b) * timeShip),\r\n                                            cc.moveTo(0.2, rawPlayerPos)\r\n                                        )\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        let delayOver2Under = 0.2;\r\n                        var maxDelay = (((cardDeal - 1) * numPlayer) + (numPlayer - 1)) * timeShip; // ((a * numPlayer) + b) * timeShip\r\n                        let timeUnderLayer = (maxDelay + 0.2 + delayOver2Under) * 1000;\r\n                        //  cc.log(\"CHIA_BAI timeUnderLayer : \", timeUnderLayer);\r\n                        clearTimeout(this.timeoutChiaBaiDone);\r\n                        this.timeoutChiaBaiDone = setTimeout(() => {\r\n                            for (let index = 0; index < Cmd.Code.MAX_PLAYER * cardDeal; index++) { // 4 players * 3 cards\r\n                                //  cc.log(\"CHIA_BAI cardsDeal index : \", index);\r\n                                this.cardsDeal.children[index].active = false;\r\n                            }\r\n\r\n                            for (let index = 0; index < numPlayer; index++) {\r\n                                let seatId = arrSeatExist[index];\r\n                                if (seatId !== -1) {\r\n                                    // Drop layer\r\n                                    if (seatId == 0) {\r\n                                        this.getPlayerHouse(seatId).resetCardReady(seatId);\r\n                                        this.getPlayerHouse(seatId).showCardReal(false);\r\n                                        this.getPlayerHouse(seatId).showCardReady(true);\r\n                                        // Open Me cards\r\n                                        this.getPlayerHouse(0).prepareToTransform();\r\n                                        for (let a = 0; a < 13; a++) {\r\n                                            //  cc.log(\"MauBinh cardId : \", cardList[a]);\r\n                                            let spriteCardId = CardUtils.getNormalId(cardList[a]);\r\n                                            let cardOpen = this.meCards.children[a];\r\n                                            cardOpen.active = true;\r\n                                            cardOpen.getComponent(\"MauBinh.MeCard\").setupCard({\r\n                                                pos: a,\r\n                                                is_Upper: false,\r\n                                                card: cardList[a]\r\n                                            }, this.spriteCards[spriteCardId]);\r\n                                            this.getPlayerHouse(0).transformToCardReal(a, this.spriteCards[spriteCardId], 0);\r\n                                        }\r\n\r\n\r\n                                        this.actionAutoBinhSoChi();\r\n                                        this.btnSoChi.active = true;\r\n                                        let isGood = mauBinh == Cmd.Code.TYPE_BINH_LUNG ? false : true;\r\n                                        let typeName = this.getBinhName(mauBinh);\r\n                                        this.getPlayerHouse(0).resetResultGame();\r\n                                        if (mauBinh != Cmd.Code.TYPE_BINH_THUONG) {\r\n                                            this.getPlayerHouse(0).playFxResultGeneral(0, isGood, typeName, 0);\r\n                                        }\r\n                                        for (let index = 0; index < numPlayer; index++) {\r\n                                            if (arrSeatExist[index] != 0) {\r\n                                                this.getPlayerHouse(arrSeatExist[index]).playFxDangXep();\r\n                                            }\r\n                                        }\r\n\r\n                                        let x = new DetectPlayerCards();\r\n                                        x.initCard(this.currentCard);\r\n                                        let result = x.getPlayerCardsInfo(this.isTinhAce); // isTinhAce\r\n                                        //  cc.log(\"completeMoveCard result : \", result);\r\n\r\n                                        let arrChiCuoi = [this.currentCard[0], this.currentCard[1], this.currentCard[2]];\r\n                                        let arrChiGiua = [this.currentCard[3], this.currentCard[4], this.currentCard[5], this.currentCard[6], this.currentCard[7]];\r\n                                        let arrChiDau = [this.currentCard[8], this.currentCard[9], this.currentCard[10], this.currentCard[11], this.currentCard[12]];\r\n\r\n                                        this.highLightCards(3, result.chiCuoi, arrChiCuoi);\r\n                                        this.highLightCards(2, result.chiGiua, arrChiGiua);\r\n                                        this.highLightCards(1, result.chiDau, arrChiDau);\r\n\r\n                                        this.tableCurrentChi.active = true;\r\n                                        this.tableCurrentChi.children[1].getComponent(cc.Label).string = \"1. \" + this.getChiName(result.chiDau);\r\n                                        this.tableCurrentChi.children[2].getComponent(cc.Label).string = \"2. \" + this.getChiName(result.chiGiua);\r\n                                        this.tableCurrentChi.children[3].getComponent(cc.Label).string = \"3. \" + this.getChiName(result.chiCuoi);\r\n\r\n                                    } else {\r\n                                        this.getPlayerHouse(seatId).showCardReal(true);\r\n                                        this.getPlayerHouse(seatId).showCardReady(false);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }, timeUnderLayer);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.TU_DONG_BAT_DAU:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedAutoStart(data);\r\n                        //  cc.log(\"MauBinh ReceiveAutoStart res : \", JSON.stringify(res));\r\n                        // {\r\n                        //     \"isAutoStart\": true,\r\n                        //     \"timeAutoStart\": 5\r\n                        // }\r\n\r\n                        if (res.isAutoStart) {\r\n                            this.startWaittingCountDown(res.timeAutoStart);\r\n                            this.btnSoChi.active = false;\r\n                            this.btnCombining.active = false;\r\n                            this.tableCurrentChi.active = false;\r\n                            this.resetPlayersPlaying();\r\n                            for (let index = 0; index < Cmd.Code.MAX_PLAYER; index++) {\r\n                                this.getPlayerHouse(index).resetResultGame();\r\n                            }\r\n                            this.fxSoChiTotal.stopAllActions();\r\n                            this.fxSoChiTotal.active = false;\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.THONG_TIN_BAN_CHOI:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedGameInfo(data);\r\n                        //  cc.log(\"MauBinh ReceivedGameInfo res : \", JSON.stringify(res));\r\n\r\n                        // Reconnect\r\n                        this.closeUIRoom();\r\n                        this.showUIPlaying();\r\n                        this.closeUIChat();\r\n\r\n                        // {\r\n                        //     \"myChair\": 3,\r\n                        //     \"gameState\": 1,\r\n                        //     \"gameAction\": 2,\r\n                        //     \"countdownTime\": 46,\r\n                        //     \"moneyBet\": 500,\r\n                        //     \"moneyType\": 1,\r\n                        //     \"gameId\": 5556609,\r\n                        //     \"roomId\": 94,\r\n                        //     \"rule\": 0,\r\n                        //     \"hasInfo\": [true, true, true, true],\r\n                        //     \"players\": [\r\n                        //         {\r\n                        //             \"sochi\": false,\r\n                        //             \"status\": 3,\r\n                        //             \"avatar\": \"3\",\r\n                        //             \"userId\": 114,\r\n                        //             \"nickName\": \"toichangcogi\",\r\n                        //             \"currentMoney\": 6223085\r\n                        //         },\r\n                        //         {\r\n                        //             \"sochi\": false,\r\n                        //             \"status\": 3,\r\n                        //             \"avatar\": \"4\",\r\n                        //             \"userId\": 403,\r\n                        //             \"nickName\": \"traulucxc\",\r\n                        //             \"currentMoney\": 863887\r\n                        //         },\r\n                        //         {\r\n                        //             \"sochi\": false,\r\n                        //             \"status\": 3,\r\n                        //             \"avatar\": \"1\",\r\n                        //             \"userId\": 6789589,\r\n                        //             \"nickName\": \"Napgame\",\r\n                        //             \"currentMoney\": 1025000\r\n                        //         },\r\n                        //         {\r\n                        //             \"cardList\": [21, 20, 1, 0, 19, 27, 24, 42, 39, 28, 45, 44, 49],\r\n                        //             \"sochi\": false,\r\n                        //             \"status\": 3,\r\n                        //             \"avatar\": \"6\",\r\n                        //             \"userId\": 6790894,\r\n                        //             \"nickName\": \"vn_star\",\r\n                        //             \"currentMoney\": 1000000\r\n                        //         }\r\n                        //     ]\r\n                        // }\r\n\r\n                        let myChair = res[\"myChair\"];\r\n                        let gameState = res[\"gameState\"];\r\n                        let gameAction = res[\"gameAction\"];\r\n                        let countDownTime = res[\"countDownTime\"];\r\n                        let moneyBet = res[\"moneyBet\"];\r\n                        let moneyType = res[\"moneyType\"];\r\n                        let gameId = res[\"gameId\"];\r\n                        let roomId = res[\"roomId\"];\r\n                        let rule = res[\"rule\"];\r\n                        let hasInfo = res[\"hasInfo\"];\r\n                        let players = res[\"players\"];\r\n\r\n                        this.labelRoomId.string = \"MẬU BINH - PHÒNG: \" + roomId;\r\n                        this.labelRoomBet.string = \"MỨC CƯỢC: \" + Utils.formatNumber(moneyBet) + \"$\";\r\n\r\n                        this.currentRoomBet = moneyBet;\r\n\r\n                        this.isTinhAce = rule == 1 ? true : false;\r\n\r\n                        this.currentCard = players[myChair].cardList;\r\n\r\n                        configPlayer[0].playerId = Configs.Login.Nickname;\r\n                        configPlayer[0].playerPos = myChair;\r\n                        //  cc.log(\"MauBinh setupMatch configPlayer Me : \", configPlayer[0]);\r\n                        //  cc.log(\"MauBinh setupMatch configPlayer  : \", configPlayer);\r\n\r\n                        var numPlayers = 0;\r\n                        var arrPlayerPosExist = [];\r\n\r\n                        for (let index = 0; index < hasInfo.length; index++) {\r\n                            if (hasInfo[index]) {\r\n                                numPlayers += 1;\r\n                                arrPlayerPosExist.push(index);\r\n                            }\r\n                        }\r\n                        //  cc.log(\"MauBinh numPlayers : \", numPlayers);\r\n\r\n                        // setup configPlayer\r\n                        for (let a = 0; a < configPlayer.length; a++) {\r\n                            configPlayer[a].playerPos = defaultPlayerPos[myChair][a];\r\n                        }\r\n\r\n                        // set State of Seat : Yes | No exist Player\r\n                        for (let index = 0; index < configPlayer.length; index++) {\r\n                            let findPos = arrPlayerPosExist.indexOf(configPlayer[index].playerPos);\r\n\r\n                            var seatId = configPlayer[index].seatId;\r\n                            this.getPlayerHouse(seatId).resetPlayerInfo(seatId);\r\n\r\n                            if (findPos > -1) {\r\n                                // Exist player -> Set Player Info\r\n                                this.setupSeatPlayer(seatId, {\r\n                                    nickName: players[findPos].nickName,\r\n                                    avatar: parseInt(players[findPos].avatar),\r\n                                    money: players[findPos].currentMoney\r\n                                });\r\n\r\n                                if (players[findPos].status == Cmd.Code.PLAYER_STATUS_VIEWER) {\r\n                                    configPlayer[seatId].isViewer = true;\r\n                                    this.getPlayerHouse(seatId).setIsViewer(true);\r\n                                    this.getPlayerHouse(seatId).playFxViewer();\r\n                                } else {\r\n                                    configPlayer[seatId].isViewer = false;\r\n                                    this.getPlayerHouse(seatId).setIsViewer(false);\r\n                                    if (seatId != 0) {\r\n                                        this.getPlayerHouse(seatId).showCardReady(false);\r\n                                        this.getPlayerHouse(seatId).showCardReal(true);\r\n                                        if (players[findPos].sochi) {\r\n                                            this.getPlayerHouse(seatId).playFxXepXong();\r\n                                        } else {\r\n                                            this.getPlayerHouse(seatId).playFxDangXep();\r\n                                        }\r\n                                    } else {\r\n                                        this.btnSoChi.active = !players[findPos].sochi;\r\n                                        this.btnCombining.active = players[findPos].sochi;\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                // Not Exist player  -> Active Btn Add player\r\n                                this.getPlayerHouse(seatId).showBtnInvite(true);\r\n                                configPlayer[index].isViewer = true;\r\n                            }\r\n                        }\r\n\r\n                        // Open Me cards\r\n                        if (this.currentCard.length > 0) {\r\n                            this.getPlayerHouse(0).showCardReady(false);\r\n                            this.getPlayerHouse(0).prepareToTransform();\r\n                            for (let a = 0; a < this.currentCard.length; a++) {\r\n                                //  cc.log(\"Poker cardId : \", this.currentCard[a]);\r\n                                let spriteCardId = CardUtils.getNormalId(this.currentCard[a]);\r\n                                this.getPlayerHouse(0).transformToCardReal(a, this.spriteCards[spriteCardId], 0);\r\n                            }\r\n                        }\r\n\r\n                        if (gameState == Cmd.Code.STATE_PLAYING) {\r\n                            this.startBettingCountDown(countDownTime);\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.DANG_KY_THOAT_PHONG:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedNotifyRegOutRoom(data);\r\n                        //  cc.log(\"MauBinh ReceivedNotifyRegOutRoom res : \", JSON.stringify(res));\r\n                        // {\r\n                        //     \"outChair\": 1,\r\n                        //     \"isOutRoom\": true\r\n                        //   }\r\n\r\n                        let outChair = res[\"outChair\"];\r\n                        let isOutRoom = res[\"isOutRoom\"];\r\n\r\n                        let seatId = this.findPlayerSeatByPos(outChair);\r\n                        if (seatId !== -1) {\r\n                            if (isOutRoom) {\r\n                                this.getPlayerHouse(seatId).showNotify(\"Sắp rời bàn !\");\r\n                            } else {\r\n                                this.getPlayerHouse(seatId).showNotify(\"Khô Máu !\");\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.MOI_DAT_CUOC:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedMoiDatCuoc(data);\r\n                        //  cc.log(\"MauBinh ReceivedMoiDatCuoc res : \", JSON.stringify(res));\r\n                        // {\r\n                        //     \"timeDatCuoc\": 20\r\n                        //   }\r\n                        this.startBettingCountDown(res.timeDatCuoc);\r\n\r\n                        if (this.seatOwner == 0) { // Me la Chuong -> K dc bet va k dc vao ga\r\n                            this.btnSoChi.active = false;\r\n                            this.btnCombining.active = false;\r\n\r\n                        } else {\r\n                            this.btnSoChi.active = true;\r\n                            this.btnCombining.active = true;\r\n\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CHEAT_CARDS:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh CHEAT_CARDS\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.DANG_KY_CHOI_TIEP:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh DANG_KY_CHOI_TIEP\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.UPDATE_OWNER_ROOM:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh UPDATE_OWNER_ROOM\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.JOIN_ROOM_SUCCESS:\r\n                    {\r\n                        //  cc.log(\"MauBinh JOIN_ROOM_SUCCESS\");\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedJoinRoomSucceed(data);\r\n                        this.closeUIRoom();\r\n                        this.setupMatch(res);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.LEAVE_GAME:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedUserLeaveRoom(data);\r\n                        //  cc.log(\"MauBinh ReceivedUserLeaveRoom res : \", JSON.stringify(res));\r\n\r\n                        // {\r\n                        //     \"chair\": 1,\r\n                        //     \"nickName\": \"chaoae99\"\r\n                        //   }\r\n\r\n                        let chair = res[\"chair\"];\r\n\r\n                        let seatId = this.findPlayerSeatByPos(chair);\r\n                        if (seatId !== -1) {\r\n                            // Need clear configPlayer\r\n                            for (let index = 0; index < configPlayer.length; index++) {\r\n                                if (configPlayer[index].seatId == seatId) {\r\n                                    configPlayer[index].playerId = -1;\r\n                                    configPlayer[index].isViewer = true;\r\n                                }\r\n                            }\r\n\r\n                            // Change UI\r\n                            this.getPlayerHouse(seatId).resetPlayerInfo(seatId);\r\n                            this.getPlayerHouse(seatId).showBtnInvite(true);\r\n\r\n                            let arrSeatExistLast = this.getNumPlayers();\r\n                            if (arrSeatExistLast.length == 1) {\r\n                                this.resetPlayersPlaying();\r\n                            }\r\n\r\n                            if (seatId == 0) {\r\n                                // Me leave\r\n                                // Change UI\r\n                                this.UI_Playing.active = false;\r\n                                this.UI_ChooseRoom.active = true;\r\n                                this.refeshListRoom();\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.NOTIFY_KICK_FROM_ROOM:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedKickOff(data);\r\n                        //  cc.log(\"MauBinh ReceivedKickOff res : \", JSON.stringify(res));\r\n                    }\r\n                    break;\r\n                case Cmd.Code.NEW_USER_JOIN:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedUserJoinRoom(data);\r\n                        //  cc.log(\"MauBinh ReceivedUserJoinRoom res : \", JSON.stringify(res));\r\n                        // {\r\n                        //     \"info\": {\r\n                        //       \"nickName\": \"Ahoang88\",\r\n                        //       \"avatar\": \"7\",\r\n                        //       \"money\": 10230080\r\n                        //     },\r\n                        //     \"myChair\": 5,\r\n                        //     \"uStatus\": 1\r\n                        //   }\r\n\r\n                        let info = res[\"info\"];\r\n                        let myChair = res[\"myChair\"];\r\n                        let uStatus = res[\"uStatus\"];\r\n\r\n                        // set State of Seat : Yes | No exist Player\r\n                        for (let index = 0; index < configPlayer.length; index++) {\r\n                            if (configPlayer[index].playerPos == myChair) {\r\n                                // Exist player -> Set Player Info\r\n                                var seatId = configPlayer[index].seatId;\r\n                                this.getPlayerHouse(seatId).resetPlayerInfo(seatId);\r\n                                var customPlayerInfo = {\r\n                                    \"avatar\": info[\"avatar\"],\r\n                                    \"nickName\": info[\"nickName\"],\r\n                                    \"money\": info[\"money\"],\r\n                                }\r\n\r\n                                this.setupSeatPlayer(seatId, customPlayerInfo);\r\n\r\n                                if (uStatus == Cmd.Code.PLAYER_STATUS_VIEWER) {\r\n                                    configPlayer[seatId].isViewer = true;\r\n                                    this.getPlayerHouse(seatId).setIsViewer(true);\r\n                                    this.getPlayerHouse(seatId).playFxViewer();\r\n                                } else {\r\n                                    configPlayer[seatId].isViewer = false;\r\n                                    this.getPlayerHouse(seatId).setIsViewer(false);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case Cmd.Code.NOTIFY_USER_GET_JACKPOT:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        //  cc.log(\"MauBinh NOTIFY_USER_GET_JACKPOT\");\r\n                    }\r\n                    break;\r\n                case Cmd.Code.UPDATE_MATCH:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedUpdateMatch(data);\r\n                        //  cc.log(\"MauBinh ReceivedUpdateMatch res : \", JSON.stringify(res));\r\n                        // {\r\n                        //     \"myChair\": 2,\r\n                        //     \"hasInfo\": [\r\n                        //       true,\r\n                        //       true,\r\n                        //       true,\r\n                        //       true,\r\n                        //       false,\r\n                        //       true,\r\n                        //       false,\r\n                        //       false\r\n                        //     ],\r\n                        //     \"infos\": [\r\n                        //       {\r\n                        //         \"nickName\": \"nestle103\",\r\n                        //         \"avatar\": \"7\",\r\n                        //         \"money\": 5560860,\r\n                        //         \"status\": 2\r\n                        //       },\r\n                        //       {\r\n                        //         \"nickName\": \"imeldda\",\r\n                        //         \"avatar\": \"2\",\r\n                        //         \"money\": 3852854,\r\n                        //         \"status\": 2\r\n                        //       },\r\n                        //       {\r\n                        //         \"nickName\": \"VN_Star1\",\r\n                        //         \"avatar\": \"2\",\r\n                        //         \"money\": 5703572,\r\n                        //         \"status\": 2\r\n                        //       },\r\n                        //       {\r\n                        //         \"nickName\": \"gvngvn4567\",\r\n                        //         \"avatar\": \"2\",\r\n                        //         \"money\": 2749687,\r\n                        //         \"status\": 2\r\n                        //       },\r\n                        //       {},\r\n                        //       {\r\n                        //         \"nickName\": \"skypenon\",\r\n                        //         \"avatar\": \"5\",\r\n                        //         \"money\": 5051363,\r\n                        //         \"status\": 2\r\n                        //       },\r\n                        //       {},\r\n                        //       {}\r\n                        //     ]\r\n                        //   }\r\n\r\n                        let myChair = res[\"myChair\"];\r\n                        let hasInfo = res[\"hasInfo\"];\r\n                        let infos = res[\"infos\"];\r\n\r\n                        //  cc.log(\"MauBinh setupMatch configPlayer : \", configPlayer);\r\n                        // theo Pos khong phai SeatId\r\n                        for (let index = 0; index < hasInfo.length; index++) {\r\n                            let pos = configPlayer[index][\"playerPos\"];\r\n                            if (hasInfo[pos]) {\r\n                                // setGold se inactive isViewer nen dat no len dau de ben duoi config lai\r\n                                this.getPlayerHouse(index).setGold(infos[pos][\"money\"]);\r\n                                configPlayer[index][\"playerId\"] = infos[pos][\"nickName\"];\r\n                                if (infos[pos][\"status\"] == Cmd.Code.PLAYER_STATUS_SITTING || infos[pos][\"status\"] == Cmd.Code.PLAYER_STATUS_PLAYING) {\r\n                                    configPlayer[index][\"isViewer\"] = false;\r\n                                    this.getPlayerHouse(index).setIsViewer(false);\r\n                                } else {\r\n                                    configPlayer[index][\"isViewer\"] = true;\r\n                                    this.getPlayerHouse(index).setIsViewer(true);\r\n                                    this.getPlayerHouse(index).playFxViewer();\r\n                                }\r\n                                this.setupSeatPlayer(index, infos[pos]);\r\n                            } else {\r\n                                configPlayer[index][\"playerId\"] = -1;\r\n                                configPlayer[index][\"isViewer\"] = true;\r\n                            }\r\n                        }\r\n                        //  cc.log(\"MauBinh setupMatch configPlayer : \", configPlayer);\r\n                    }\r\n                    break;\r\n                case Cmd.Code.CHAT_ROOM:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new Cmd.ReceivedChatRoom(data);\r\n                        //  cc.log(\"MauBinh CHAT_ROOM res : \", JSON.stringify(res));\r\n\r\n                        // {\r\n                        //     \"chair\": 0,\r\n                        //     \"isIcon\": true,\r\n                        //     \"content\": \"6\",\r\n                        //     \"nickname\": \"chaoae99\"\r\n                        //   }\r\n\r\n                        // {\r\n                        //     \"chair\": 0,\r\n                        //     \"isIcon\": false,\r\n                        //     \"content\": \"lalal\",\r\n                        //     \"nickname\": \"chaoae99\"\r\n                        //   }\r\n\r\n                        let chair = res[\"chair\"];\r\n                        let isIcon = res[\"isIcon\"];\r\n                        let content = res[\"content\"];\r\n                        if (isIcon) {\r\n                            // Chat Icon\r\n                            let seatId = this.findPlayerSeatByPos(chair);\r\n                            if (seatId != -1) {\r\n                                this.getPlayerHouse(seatId).showChatEmotion(content);\r\n                            }\r\n                        } else {\r\n                            // Chat Msg\r\n                            let seatId = this.findPlayerSeatByPos(chair);\r\n                            if (seatId != -1) {\r\n                                this.getPlayerHouse(seatId).showChatMsg(content);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    //  cc.log(\"--inpacket.getCmdId(): \" + inpacket.getCmdId());\r\n                    break;\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    // request\r\n    actionLeaveRoom() {\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.CmdSendRequestLeaveGame());\r\n    }\r\n\r\n    actionHoldRoom() {\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.CmdSendHoldRoom());\r\n    }\r\n\r\n    actionBaoBinh() {\r\n        this.btnSoChi.active = false;\r\n        this.btnCombining.active = true;\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendBaoBinh());\r\n    }\r\n\r\n    actionBinhSoChi() {\r\n        let arrChiCuoi = [this.currentCard[0], this.currentCard[1], this.currentCard[2]];\r\n        let arrChiGiua = [this.currentCard[3], this.currentCard[4], this.currentCard[5], this.currentCard[6], this.currentCard[7]];\r\n        let arrChiDau = [this.currentCard[8], this.currentCard[9], this.currentCard[10], this.currentCard[11], this.currentCard[12]];\r\n\r\n        //  cc.log(\"Check currentCard ============================== \");\r\n        this.logCard(this.currentCard);\r\n        this.logCard(arrChiCuoi);\r\n        this.logCard(arrChiGiua);\r\n        this.logCard(arrChiDau);\r\n\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendBinhSoChi(arrChiDau, arrChiGiua, arrChiCuoi));\r\n    }\r\n\r\n    actionAutoBinhSoChi() {\r\n        return; // Open will error -> Me auto leave room \r\n        let arrChiCuoi = [this.currentCard[0], this.currentCard[1], this.currentCard[2]];\r\n        let arrChiGiua = [this.currentCard[3], this.currentCard[4], this.currentCard[5], this.currentCard[6], this.currentCard[7]];\r\n        let arrChiDau = [this.currentCard[8], this.currentCard[9], this.currentCard[10], this.currentCard[11], this.currentCard[12]];\r\n\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendAutoBinhSoChi(arrChiDau, arrChiGiua, arrChiCuoi));\r\n    }\r\n\r\n    actionXepLai() {\r\n        this.btnSoChi.active = true;\r\n        this.btnCombining.active = false;\r\n        MauBinhNetworkClient.getInstance().send(new Cmd.SendXepLai());\r\n    }\r\n\r\n    cardSelect(card_info, card_pos, card_Id) {\r\n        //  cc.log(\"cardSelect card_info : \", card_info.card);\r\n        //  cc.log(\"cardSelect card_pos  : \", card_pos);\r\n        //  cc.log(\"cardSelect card_id  : \", card_Id);\r\n\r\n        this.cardMove.active = true;\r\n        this.cardMove.setPosition(card_pos.x, card_pos.y - 95);\r\n        let spriteCardId = CardUtils.getNormalId(card_info.card);\r\n        this.cardMove.children[0].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\r\n\r\n        this.cardMoveId = card_Id;\r\n        this.cardMoveValue = card_info.card;\r\n\r\n        this.getPlayerHouse(0).resetResultGame();\r\n        for (let a = 0; a < 13; a++) {\r\n            this.meCards.children[a].getComponent(\"MauBinh.MeCard\").setCardShadow(false);\r\n            this.getPlayerHouse(0).shadowCard(a, false);\r\n        }\r\n    }\r\n\r\n    showMoveTarget(targetName) {\r\n        //  cc.log(\"showMoveTarget : \", targetName);\r\n        for (let index = 0; index < 13; index++) {\r\n            let cardTarget = this.meCards.children[index].getComponent(\"MauBinh.MeCard\");\r\n            if (index == targetName) {\r\n                cardTarget.setCardShadow(false);\r\n                cardTarget.setCardFocus(true);\r\n            } else {\r\n                cardTarget.setCardShadow(true);\r\n                cardTarget.setCardFocus(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    completeMoveCard(targetName) {\r\n        /* Id value - Node \r\n        0,1,2         chiCuoi\r\n        3,4,5,6,7     chiGiua\r\n        8,9,10,11,12     chiDau\r\n        */\r\n\r\n        //  cc.log(\"completeMoveCard from id   : \", this.cardMoveId);\r\n        //  cc.log(\"completeMoveCard target id : \", targetName);\r\n\r\n        //  cc.log(\"completeMoveCard from info   : \", this.currentCard[this.cardMoveId]);\r\n        //  cc.log(\"completeMoveCard target info : \", this.currentCard[targetName]);\r\n\r\n        let cardFrom = this.currentCard[this.cardMoveId];\r\n        let cardTo = this.currentCard[targetName];\r\n        //  cc.log(\"completeMoveCard cardFrom 1 : \", cardFrom);\r\n        //  cc.log(\"completeMoveCard cardTo   1 : \", cardTo);\r\n        this.currentCard[this.cardMoveId] = cardTo;\r\n        this.currentCard[targetName] = cardFrom;\r\n        //  cc.log(\"completeMoveCard cardFrom 2 : \", this.currentCard[this.cardMoveId]);\r\n        //  cc.log(\"completeMoveCard cardTo 2   : \", this.currentCard[targetName]);\r\n\r\n        //  cc.log(\"completeMoveCard currentCard : \", this.currentCard);\r\n\r\n        for (let index = 0; index < 13; index++) {\r\n            let card_id = this.currentCard[index];      // {\"card\":4,\"face\":2}\r\n            let spriteCardId = CardUtils.getNormalId(card_id);\r\n            let src = this.spriteCards[spriteCardId];\r\n            let card_Open = this.meCards.children[index];\r\n            card_Open.active = true;\r\n            card_Open.getComponent(\"MauBinh.MeCard\").updateCard(card_id, src);\r\n        }\r\n\r\n        this.cardMoveValue = \"\";\r\n        this.cardMoveId = -1;\r\n\r\n        let x = new DetectPlayerCards();\r\n        x.initCard(this.currentCard);\r\n        let result = x.getPlayerCardsInfo(this.isTinhAce); // isTinhAce\r\n        //  cc.log(\"completeMoveCard result : \", result);\r\n\r\n        let isGood = result.cardType == Cmd.Code.TYPE_BINH_LUNG ? false : true;\r\n        let typeName = this.getBinhName(result.cardType);\r\n        this.getPlayerHouse(0).resetResultGame();\r\n        if (result.cardType != Cmd.Code.TYPE_BINH_THUONG) {\r\n            this.getPlayerHouse(0).playFxResultGeneral(0, isGood, typeName, 0);\r\n        }\r\n\r\n        let arrChiCuoi = [this.currentCard[0], this.currentCard[1], this.currentCard[2]];\r\n        let arrChiGiua = [this.currentCard[3], this.currentCard[4], this.currentCard[5], this.currentCard[6], this.currentCard[7]];\r\n        let arrChiDau = [this.currentCard[8], this.currentCard[9], this.currentCard[10], this.currentCard[11], this.currentCard[12]];\r\n\r\n        //  cc.log(\"Check currentCard =======================================\");\r\n        this.logCard(this.currentCard);\r\n        this.logCard(arrChiCuoi);\r\n        this.logCard(arrChiGiua);\r\n        this.logCard(arrChiDau);\r\n\r\n        this.highLightCards(3, result.chiCuoi, arrChiCuoi);\r\n        this.highLightCards(2, result.chiGiua, arrChiGiua);\r\n        this.highLightCards(1, result.chiDau, arrChiDau);\r\n\r\n        this.tableCurrentChi.active = true;\r\n        this.tableCurrentChi.children[1].getComponent(cc.Label).string = \"1. \" + this.getChiName(result.chiDau);\r\n        this.tableCurrentChi.children[2].getComponent(cc.Label).string = \"2. \" + this.getChiName(result.chiGiua);\r\n        this.tableCurrentChi.children[3].getComponent(cc.Label).string = \"3. \" + this.getChiName(result.chiCuoi);\r\n\r\n        this.actionAutoBinhSoChi();\r\n    }\r\n\r\n    highLightCards(chiId, groupKind, cardList) {\r\n        let start = -1;\r\n        let end = -1;\r\n        if (chiId == 3) {\r\n            start = 0;\r\n            end = 3;\r\n        } else if (chiId == 2) {\r\n            start = 3;\r\n            end = 8;\r\n        } else {\r\n            start = 8;\r\n            end = 13;\r\n        }\r\n\r\n        for (var a = start; a < end; a++) this.getPlayerHouse(0).shadowCard(a, true);\r\n\r\n        switch (groupKind) {\r\n            case Cmd.Code.GROUP_THUNG_PHA_SANH:\r\n            case Cmd.Code.GROUP_CU_LU:\r\n            case Cmd.Code.GROUP_THUNG:\r\n            case Cmd.Code.GROUP_SANH:\r\n                for (var a = start; a < end; a++) this.getPlayerHouse(0).shadowCard(a, false);\r\n                break;\r\n            case Cmd.Code.GROUP_TU_QUY:\r\n            case Cmd.Code.GROUP_SAM_CO:\r\n            case Cmd.Code.GROUP_MOT_DOI:\r\n            case Cmd.Code.GROUP_MAU_THAU:\r\n                for (let a = 0; a < cardList.length - 1; a++) {\r\n                    for (let b = a + 1; b < cardList.length; b++) {\r\n                        if (CardUtils.getNumber(cardList[a]) == CardUtils.getNumber(cardList[b])) {\r\n                            this.getPlayerHouse(0).shadowCard(a + start, false);\r\n                            this.getPlayerHouse(0).shadowCard(b + start, false);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case Cmd.Code.GROUP_THU:\r\n                for (let a = 0; a < cardList.length - 1; a++) {\r\n                    for (let b = a + 1; b < cardList.length; b++) {\r\n                        if (CardUtils.getNumber(cardList[a]) == CardUtils.getNumber(cardList[b])) {\r\n                            this.getPlayerHouse(0).shadowCard(a + start, false);\r\n                            this.getPlayerHouse(0).shadowCard(b + start, false);\r\n                        }\r\n                    }\r\n                }\r\n                // for (a = 0; a < cardList.length; a++) {\r\n                //     cardList[a] != cardList[0] && cardList[a] != cardList[1] || this.getPlayerHouse(0).shadowCard(a + start, false);\r\n                // }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // State\r\n    initConfigPlayer() {\r\n        configPlayer = [];\r\n        for (let index = 0; index < Cmd.Code.MAX_PLAYER; index++) {\r\n            configPlayer.push({\r\n                seatId: index,\r\n                playerId: -1,\r\n                playerPos: -1,\r\n                isViewer: true\r\n            });\r\n        }\r\n        //  cc.log(\"MauBinh configPlayer : \", configPlayer);\r\n    }\r\n\r\n    resetPlayersPlaying() {\r\n        for (let index = 0; index < Cmd.Code.MAX_PLAYER; index++) {\r\n            this.getPlayerHouse(index).resetMatchHistory(index);\r\n        }\r\n    }\r\n\r\n    // handle Game Players\r\n    setupSeatPlayer(seatId, playerInfo) {\r\n        //  cc.log(\"MauBinh setupSeatPlayer playerInfo : \", playerInfo);\r\n        configPlayer[seatId].playerId = playerInfo.nickName;\r\n        this.getPlayerHouse(seatId).setAvatar(playerInfo.avatar);\r\n        this.getPlayerHouse(seatId).setName(playerInfo.nickName);\r\n        this.getPlayerHouse(seatId).setGold(playerInfo.money);\r\n    }\r\n\r\n    findPlayerSeatByUid(uid) {\r\n        let seat = -1;\r\n        for (let index = 0; index < configPlayer.length; index++) {\r\n            if (configPlayer[index].playerId === uid) {\r\n                seat = configPlayer[index].seatId;\r\n            }\r\n        }\r\n        return seat;\r\n    }\r\n\r\n    findPlayerPosBySeat(seat) {\r\n        return configPlayer[seat].playerPos;\r\n    }\r\n\r\n    findPlayerSeatByPos(pos) {\r\n        if (pos == -1) {\r\n            return -1;\r\n        }\r\n\r\n        let seat = -1;\r\n        for (let index = 0; index < configPlayer.length; index++) {\r\n            if (configPlayer[index].playerPos === pos) {\r\n                seat = configPlayer[index].seatId;\r\n            }\r\n        }\r\n        return seat;\r\n    }\r\n\r\n    getPlayerHouse(seatId) {\r\n        return this.groupPlayers.children[seatId].getComponent(\"MauBinh.Player\");\r\n    }\r\n\r\n    getNumPlayers() {\r\n        //  cc.log(\"playerPosEntry configPlayer : \", configPlayer);\r\n        var playerPosEntry = [];\r\n        for (let index = 0; index < configPlayer.length; index++) {\r\n            //  cc.log(\"playerPosEntry playerId : \", configPlayer[index].playerId);\r\n            //  cc.log(\"playerPosEntry isViewer : \", configPlayer[index].isViewer);\r\n            //  cc.log(\"-------------------------------------\");\r\n            if (configPlayer[index].playerId !== -1 && !configPlayer[index].isViewer) {\r\n                playerPosEntry.push(configPlayer[index].seatId);\r\n                //  cc.log(\"playerPosEntry seatId : \", configPlayer[index].seatId);\r\n            }\r\n        }\r\n        //  cc.log(\"playerPosEntry : \", playerPosEntry);\r\n        return playerPosEntry;\r\n    }\r\n\r\n    getBinhName(maubinhType) {\r\n        let name = \"\";\r\n        switch (maubinhType) {\r\n            case Cmd.Code.TYPE_SANH_RONG:\r\n                name = \"Sảnh Rồng\";\r\n                break;\r\n            case Cmd.Code.TYPE_MUOI_BA_CAY_DONG_MAU:\r\n                name = \"Mười Ba Cây Đồng Màu\";\r\n                break;\r\n            case Cmd.Code.TYPE_MUOI_HAI_CAY_DONG_MAU:\r\n                name = \"Mười Hai Cây Đồng Màu\";\r\n                break;\r\n            case Cmd.Code.TYPE_BA_CAI_THUNG:\r\n                name = \"Ba Cái Thùng\";\r\n                break;\r\n            case Cmd.Code.TYPE_BA_CAI_SANH:\r\n                name = \"Ba Cái Sảnh\";\r\n                break;\r\n            case Cmd.Code.TYPE_LUC_PHE_BON:\r\n                name = \"Lục Phế Bôn\";\r\n                break;\r\n            case Cmd.Code.TYPE_BINH_THUONG:\r\n                name = \"Binh Thường\";\r\n                break;\r\n            case Cmd.Code.TYPE_BINH_LUNG:\r\n                name = \"Binh Lủng\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return name;\r\n    }\r\n\r\n    needSoChi(playerResultList) {\r\n        let a = 0;\r\n        for (var b = 0; b < playerResultList.length; b++) {\r\n            if (playerResultList[b].maubinhType == Cmd.Code.TYPE_BINH_THUONG) {\r\n                a++;\r\n            }\r\n        }\r\n        return 2 <= a;\r\n    }\r\n\r\n    needShowMoneyWhenSoChi(playerResultList) {\r\n        for (var a = 0; a < playerResultList.length; a++) {\r\n            var b = playerResultList[a];\r\n            if (0 == b.chairIndex && b.maubinhType != Cmd.Code.TYPE_BINH_THUONG) return !1\r\n        }\r\n        return !0\r\n    }\r\n\r\n    needBatSap(playerResultList) {\r\n        for (var a = 0; a < playerResultList.length; a++)\r\n            if (0 != playerResultList[a].moneySap) return !0;\r\n        return !1\r\n    }\r\n\r\n    soChi(chiId, playerResultList) {\r\n        //  cc.log(\"MauBinh soChi id : \", chiId);\r\n\r\n        // hide result chi 1 - 3 : not hide general\r\n        for (let index = 0; index < Cmd.Code.MAX_PLAYER; index++) {\r\n            this.getPlayerHouse(index).resetResultChi(1);\r\n            this.getPlayerHouse(index).resetResultChi(2);\r\n            this.getPlayerHouse(index).resetResultChi(3);\r\n        }\r\n\r\n        let isNeedSoChi = this.needSoChi(playerResultList);\r\n        let isNeedShowMoneyWhenSoChi = this.needShowMoneyWhenSoChi(playerResultList);\r\n        //  cc.log(\"MauBinh soChi isNeedSoChi : \", isNeedSoChi);\r\n        //  cc.log(\"MauBinh soChi isNeedShowMoneyWhenSoChi : \", isNeedShowMoneyWhenSoChi);\r\n\r\n        for (let index = 0; index < playerResultList.length; index++) {\r\n            let result = playerResultList[index];\r\n            let chair = result['chairIndex'];\r\n\r\n            let totalCards = [\r\n                result.chi3[0], result.chi3[1], result.chi3[2],\r\n                result.chi2[0], result.chi2[1], result.chi2[2], result.chi2[3], result.chi2[4],\r\n                result.chi1[0], result.chi1[1], result.chi1[2], result.chi1[3], result.chi1[4]\r\n            ];\r\n            let x = new DetectPlayerCards();\r\n            x.initCard(totalCards);\r\n            let playerCardInfo = x.getPlayerCardsInfo(this.isTinhAce); // isTinhAce\r\n            //  cc.log(\"soChi playerCardInfo : \", playerCardInfo);\r\n\r\n            let seatId = this.findPlayerSeatByPos(chair);\r\n            if (seatId != -1) {\r\n                //  cc.log(\"soChi seatId : \", seatId);\r\n                //  cc.log(\"soChi maubinhType : \", result.maubinhType);\r\n                if (result.maubinhType == Cmd.Code.TYPE_BINH_THUONG && isNeedSoChi) {\r\n                    // So Chi -> Show card tung chi 1\r\n                    //  cc.log(\"soChi case 1\");\r\n                    let spriteId = -1;\r\n                    let goldChi = result.moneyInChi[chiId - 1];\r\n                    if (chiId == 1) {\r\n                        spriteId = playerCardInfo.chiDau;\r\n                    } else if (chiId == 2) {\r\n                        spriteId = playerCardInfo.chiGiua;\r\n                    } else {\r\n                        spriteId = playerCardInfo.chiCuoi;\r\n                    }\r\n                    this.getPlayerHouse(seatId).playFxCompareChi(chiId, this.spriteGroupCard[spriteId]);\r\n                    if (isNeedShowMoneyWhenSoChi) {\r\n                        this.getPlayerHouse(seatId).playFxGoldSoChi(goldChi);\r\n                    }\r\n\r\n                    // Show cards chi\r\n                    if (chiId == 3) {\r\n                        for (var a = 0; a < 3; a++) {\r\n                            let spriteCardId = CardUtils.getNormalId(result.chi3[a]);\r\n                            this.getPlayerHouse(seatId).prepareCardReal(a);\r\n                            this.getPlayerHouse(seatId).transformToCardReal(a, this.spriteCards[spriteCardId], seatId);\r\n                        }\r\n\r\n                        setTimeout(() => {\r\n                            let totalGoldChi = result.moneyInChi[0] + result.moneyInChi[1] + result.moneyInChi[2];\r\n                            if (totalGoldChi >= 0) {\r\n                                this.getPlayerHouse(seatId).playFxWinSoChi(totalGoldChi);\r\n                            } else {\r\n                                this.getPlayerHouse(seatId).playFxLoseSoChi(totalGoldChi);\r\n                            }\r\n                        }, 2500);\r\n                    } else if (chiId == 2) {\r\n                        for (var a = 0; a < 5; a++) {\r\n                            let spriteCardId = CardUtils.getNormalId(result.chi2[a]);\r\n                            this.getPlayerHouse(seatId).prepareCardReal(a + 3);\r\n                            this.getPlayerHouse(seatId).transformToCardReal(a + 3, this.spriteCards[spriteCardId], seatId);\r\n                        }\r\n                    } else {\r\n                        for (var a = 0; a < 5; a++) {\r\n                            let spriteCardId = CardUtils.getNormalId(result.chi1[a]);\r\n                            this.getPlayerHouse(seatId).prepareCardReal(a + 8);\r\n                            this.getPlayerHouse(seatId).transformToCardReal(a + 8, this.spriteCards[spriteCardId], seatId);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Khong can So chi -> Show tat card ra\r\n                    //  cc.log(\"soChi case 2\");\r\n                    if (chiId == 1) {\r\n                        //  // show All cards\r\n                        //  cc.log(\"soChi case 2 chiId == 1\");\r\n                        if (result.maubinhType == Cmd.Code.TYPE_BINH_THUONG) {\r\n                            // show Binh Type\r\n                            //  cc.log(\"soChi case 2 chiId == 1 = TYPE_BINH_THUONG\");\r\n                            if (playerCardInfo.chiDau < 2) {\r\n                                this.getPlayerHouse(seatId).playFxCompareChi(chiId, this.spriteGroupCard[playerCardInfo.chiDau]);\r\n                            }\r\n\r\n                            if (playerCardInfo.chiGiua < 2) {\r\n                                this.getPlayerHouse(seatId).playFxCompareChi(chiId, this.spriteGroupCard[playerCardInfo.chiGiua]);\r\n                            }\r\n\r\n                            if (playerCardInfo.chiGiua == Cmd.Code.GROUP_SAM_CO) {\r\n                                this.getPlayerHouse(seatId).playFxCompareChi(chiId, this.spriteGroupCard[playerCardInfo.chiCuoi]);\r\n                            }\r\n                        } else {\r\n                            let isGood = result.maubinhType == Cmd.Code.TYPE_BINH_LUNG ? false : true;\r\n                            let typeName = this.getBinhName(result.maubinhType);\r\n                            this.getPlayerHouse(seatId).resetResultGame();\r\n                            this.getPlayerHouse(seatId).playFxResultGeneral(seatId, isGood, typeName, 1);\r\n                        }\r\n\r\n                        let totalCards = [\r\n                            result.chi3[0], result.chi3[1], result.chi3[2],\r\n                            result.chi2[0], result.chi2[1], result.chi2[2], result.chi2[3], result.chi2[4],\r\n                            result.chi1[0], result.chi1[1], result.chi1[2], result.chi1[3], result.chi1[4]\r\n                        ];\r\n\r\n                        for (let a = 0; a < 13; a++) {\r\n                            let spriteCardId = CardUtils.getNormalId(totalCards[a]);\r\n                            if (seatId == 0) {\r\n                                this.meCards.children[a].children[1].getComponent(cc.Sprite).spriteFrame = this.spriteCards[spriteCardId];\r\n                            } else {\r\n                                this.getPlayerHouse(seatId).prepareToTransform();\r\n                                this.getPlayerHouse(seatId).transformToCardReal(a, this.spriteCards[spriteCardId], seatId);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n            if (seatId == 0) {\r\n                for (let a = 0; a < 13; a++) {\r\n                    this.getPlayerHouse(0).shadowCard(a, false);\r\n                    this.meCards.children[a].getComponent(\"MauBinh.MeCard\").setCardShadow(false);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isNeedSoChi) {\r\n            this.node.stopAllActions();\r\n            this.node.runAction(\r\n                cc.sequence(\r\n                    cc.delayTime(2.5), //3s\r\n                    cc.callFunc(() => {\r\n                        if (chiId < 3) {\r\n                            //  cc.log(\"soChi showGoldResult recall soChi\");\r\n                            this.soChi(chiId + 1, playerResultList);\r\n                        } else {\r\n                            //  cc.log(\"soChi showGoldResult no recall soChi\");\r\n                            this.showGoldResult(playerResultList, 2000);\r\n                            this.batSap(playerResultList);\r\n                        }\r\n                    })\r\n                )\r\n            )\r\n        } else {\r\n            // show Gold\r\n            this.showGoldResult(playerResultList, 1000);\r\n            this.batSap(playerResultList);\r\n        }\r\n    }\r\n\r\n    showGoldResult(playerResultList, delayTime) {\r\n        setTimeout(() => {\r\n            for (let index = 0; index < playerResultList.length; index++) {\r\n                let result = playerResultList[index];\r\n                let chair = result['chairIndex'];\r\n                let seatId = this.findPlayerSeatByPos(chair);\r\n\r\n                if (seatId != -1) {\r\n                    this.getPlayerHouse(seatId).resetResultGame();\r\n                    if (result.moneyCommon >= 0) {\r\n                        // Win\r\n                        this.getPlayerHouse(seatId).fxWin({\r\n                            moneyChange: result.moneyCommon,\r\n                            money: result.currentMoney == 0 ? -1 : result.currentMoney\r\n                        });\r\n                    } else {\r\n                        // Lose\r\n                        this.getPlayerHouse(seatId).fxLose({\r\n                            moneyChange: result.moneyCommon,\r\n                            money: result.currentMoney == 0 ? -1 : result.currentMoney\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }, delayTime);\r\n    }\r\n\r\n    batSap(playerResultList) {\r\n        //  cc.log(\"soChi batSap\");\r\n        if (this.needBatSap(playerResultList)) {\r\n            let countWin = 0;\r\n            let countLose = 0;\r\n            for (let index = 0; index < playerResultList.length; index++) {\r\n                let seatId = this.findPlayerSeatByPos(playerResultList[index].chairIndex);\r\n                if (seatId != -1 && seatId != 0) {\r\n                    if (playerResultList[index].moneySap > 0) {\r\n                        countLose += 1;\r\n                    } else {\r\n                        if (playerResultList[index].moneySap < 0) {\r\n                            countWin += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.fxSoChiTotal.active = false;\r\n\r\n            for (let index = 0; index < playerResultList.length; index++) {\r\n                let seatId = this.findPlayerSeatByPos(playerResultList[index].chairIndex);\r\n                if (seatId == 0) {\r\n                    if (countLose > 0) {\r\n                        this.fxSoChiTotal.active = true;\r\n                        if (countLose == 3) {\r\n                            // bi_sap_lang\r\n                            this.fxSoChiTotal.getComponent(cc.Sprite).spriteFrame = this.spriteSoChiTotal[1];\r\n                        } else {\r\n                            // sap_3_chi\r\n                            this.fxSoChiTotal.getComponent(cc.Sprite).spriteFrame = this.spriteSoChiTotal[2];\r\n                        }\r\n                        this.fxSoChiTotal.runAction(\r\n                            cc.sequence(\r\n                                cc.scaleTo(0.25, 1.1, 1.1),\r\n                                cc.scaleTo(0.25, 1, 1),\r\n                                cc.scaleTo(0.25, 1.1, 1.1),\r\n                                cc.scaleTo(0.25, 1, 1)\r\n                            )\r\n                        );\r\n                        setTimeout(() => {\r\n                            this.fxSoChiTotal.stopAllActions();\r\n                            this.fxSoChiTotal.active = false;\r\n                        }, 2000);\r\n                    }\r\n\r\n                    if (countWin > 0) {\r\n                        this.fxSoChiTotal.active = true;\r\n                        if (countWin == 3) {\r\n                            // bat_sap_lang\r\n                            this.fxSoChiTotal.getComponent(cc.Sprite).spriteFrame = this.spriteSoChiTotal[1];\r\n                            this.fxSoChiTotal.runAction(\r\n                                cc.sequence(\r\n                                    cc.scaleTo(0.25, 1.1, 1.1),\r\n                                    cc.scaleTo(0.25, 1, 1),\r\n                                    cc.scaleTo(0.25, 1.1, 1.1),\r\n                                    cc.scaleTo(0.25, 1, 1)\r\n                                )\r\n                            );\r\n                            setTimeout(() => {\r\n                                this.fxSoChiTotal.stopAllActions();\r\n                                this.fxSoChiTotal.active = false;\r\n                            }, 2000);\r\n                        } else {\r\n\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (playerResultList[index].moneySap < 0) {\r\n                        // sap_3_chi\r\n                        this.getPlayerHouse(seatId).playFxSoChiTotal(this.spriteSoChiTotal[2]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.soAt();\r\n        }\r\n    }\r\n\r\n    soAt() {\r\n        if (true) {\r\n            // so At\r\n        } else {\r\n            // Tinh tien chung\r\n        }\r\n    }\r\n\r\n    getChiName(id) {\r\n        let name = \"\";\r\n        switch (id) {\r\n            case Cmd.Code.GROUP_THUNG_PHA_SANH:\r\n                name = \"Thùng Phá Sảnh\";\r\n                break;\r\n            case Cmd.Code.GROUP_TU_QUY:\r\n                name = \"Tứ Quý\";\r\n                break;\r\n            case Cmd.Code.GROUP_CU_LU:\r\n                name = \"Cù Lũ\";\r\n                break;\r\n            case Cmd.Code.GROUP_THUNG:\r\n                name = \"Thùng\";\r\n                break;\r\n            case Cmd.Code.GROUP_SANH:\r\n                name = \"Sảnh\";\r\n                break;\r\n            case Cmd.Code.GROUP_SAM_CO:\r\n                name = \"Sám Cô\";\r\n                break;\r\n            case Cmd.Code.GROUP_THU:\r\n                name = \"Thú\";\r\n                break;\r\n            case Cmd.Code.GROUP_MOT_DOI:\r\n                name = \"Một Đôi\";\r\n                break;\r\n            case Cmd.Code.GROUP_MAU_THAU:\r\n                name = \"Mậu Thầu\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return name;\r\n    }\r\n\r\n\r\n    logCard(arrCard) {\r\n        let result = \"\";\r\n        for (let index = 0; index < arrCard.length; index++) {\r\n            let num = Math.floor(arrCard[index] / 4) + 2;\r\n            let face = arrCard[index] % 4;\r\n\r\n            switch (num) {\r\n                case 14:\r\n                    result += \"A\";\r\n                    break;\r\n                case 13:\r\n                    result += \"K\";\r\n                    break;\r\n                case 12:\r\n                    result += \"Q\";\r\n                    break;\r\n                case 11:\r\n                    result += \"J\";\r\n                    break;\r\n                default:\r\n                    result += num;\r\n                    break;\r\n            }\r\n\r\n            switch (face) {\r\n                case 0:\r\n                    result += \"♠ \"; //B\r\n                    break;\r\n                case 1:\r\n                    result += \"♣ \"; //T\r\n                    break;\r\n                case 2:\r\n                    result += \"♦ \"; //R\r\n                    break;\r\n                case 3:\r\n                    result += \"♥ \"; //C\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        //  cc.log(\"Check currentCard Visual : \", result);\r\n    }\r\n\r\n    update(dt) { }\r\n}\r\n","import Cmd from './MauBinh.Cmd';\r\n\r\nexport namespace maubinh {\r\n    export class DetectGroupCards {\r\n        groupKind = -1;\r\n        cardList = [];\r\n        valueList = [];\r\n\r\n        getGroupCardsInfo() {\r\n            this.groupKind = this.getGroupKind();\r\n            return this.groupKind;\r\n        }\r\n\r\n        getGroupKind() {\r\n            if (1 == this.cardList.length) return Cmd.Code.GROUP_MAU_THAU;\r\n            if (3 == this.cardList.length) {\r\n                if (this.isSamCo()) return Cmd.Code.GROUP_SAM_CO;\r\n                if (this.isMotDoi()) return Cmd.Code.GROUP_MOT_DOI;\r\n            }\r\n            if (5 == this.cardList.length) {\r\n                if (this.isThungPhaSanh()) return Cmd.Code.GROUP_THUNG_PHA_SANH;\r\n                if (this.isTuQuy()) return Cmd.Code.GROUP_TU_QUY;\r\n                if (this.isCuLu()) return Cmd.Code.GROUP_CU_LU;\r\n                if (this.isThung()) return Cmd.Code.GROUP_THUNG;\r\n                if (this.isSanh()) return Cmd.Code.GROUP_SANH;\r\n                if (this.isSamCo()) return Cmd.Code.GROUP_SAM_CO;\r\n                if (this.isThu()) return Cmd.Code.GROUP_THU;\r\n                if (this.isMotDoi()) return Cmd.Code.GROUP_MOT_DOI;\r\n            }\r\n            this.valueList = [];\r\n            for (var a = this.getSortedCardList(), b = this.cardList.length - 1; 0 <= b; b--) this.valueList.push(a[b].getNumber());\r\n            return Cmd.Code.GROUP_MAU_THAU;\r\n        }\r\n\r\n        getGroupKindLevel(a) {\r\n            var b = Cmd.Code.LV_BINH_THUONG;\r\n            !a || this.groupKind != Cmd.Code.GROUP_THUNG_PHA_SANH && this.groupKind != Cmd.Code.GROUP_SANH || (10 == this.valueList[0] ? b = Cmd.Code.LV_THUONG : 1 == this.valueList[0] && (b = Cmd.Code.LV_HA));\r\n            return b;\r\n        }\r\n\r\n        getSortedCardList() {\r\n            var a = [];\r\n            for (let b = 0; b < this.cardList.length; b++) {\r\n                a.push(this.cardList[b]);\r\n            }\r\n            // return a.sort(function (a, c) { return c.getId() - a.getId(); });\r\n            return a.sort(function (a, c) { return a.getId() - c.getId(); });\r\n        }\r\n\r\n        sortCardList(isIncrease) {\r\n            if (isIncrease) {\r\n                this.cardList.sort(function (a, c) { return c - a; });\r\n            } else {\r\n                this.cardList.sort(function (a, c) { return a - c; });\r\n            }\r\n        }\r\n\r\n\r\n        // Kinds\r\n        isThungPhaSanh() {\r\n            if (5 != this.cardList.length) return !1;\r\n            for (var a = this.getSortedCardList(), b = 1, c = 1; c < this.cardList.length; c++) a[c].getSuit() == a[c - 1].getSuit() && (a[c].getNumber() == a[c - 1].getNumber() + 1 || 2 == a[0].getNumber() && 14 == a[c].getNumber()) && b++;\r\n            b == this.cardList.length && (this.valueList = [], 2 == a[0].getNumber() && 14 == a[a.length - 1].getNumber() ? this.valueList.push(1) : this.valueList.push(a[0].getNumber()));\r\n            return b == this.cardList.length;\r\n        }\r\n\r\n        isTuQuy() {\r\n            if (5 != this.cardList.length) return !1;\r\n            for (var a = 0; a < this.cardList.length; a++)\r\n                for (var b = 1, c = 0; c < this.cardList.length; c++)\r\n                    if (a != c && this.cardList[a].getNumber() == this.cardList[c].getNumber() && b++, 4 == b) return this.valueList = [], this.valueList.push(this.cardList[a].getNumber()), !0;\r\n            return !1\r\n        }\r\n\r\n        isCuLu() {\r\n            if (5 != this.cardList.length) return !1;\r\n            var a = this.getSortedCardList(),\r\n                b = !1;\r\n            a[0].getNumber() == a[1].getNumber() && (a[1].getNumber() == a[2].getNumber() && a[3].getNumber() == a[4].getNumber() && (b = !0, this.valueList = [], this.valueList.push(a[0].getNumber()), this.valueList.push(a[3].getNumber())), a[2].getNumber() ==\r\n                a[3].getNumber() && a[3].getNumber() == a[4].getNumber() && (b = !0, this.valueList = [], this.valueList.push(a[2].getNumber()), this.valueList.push(a[0].getNumber())));\r\n            return b\r\n        }\r\n\r\n        isThung() {\r\n            var a = this.getSortedCardList();\r\n            if (5 != this.cardList.length) return !1;\r\n            for (var b = 1; b < this.cardList.length; b++)\r\n                if (a[b].getSuit() != a[0].getSuit()) return !1;\r\n            this.valueList = [];\r\n            for (b = this.cardList.length - 1; 0 <= b; b--) this.valueList.push(a[b].getNumber());\r\n            return !0\r\n        }\r\n\r\n        isSanh() {\r\n            if (5 != this.cardList.length) return !1;\r\n            for (var a = this.getSortedCardList(), b = 1, c = 1; c < this.cardList.length; c++)\r\n                (a[c].getNumber() == a[c - 1].getNumber() + 1 || 2 == a[0].getNumber() && 14 == a[c].getNumber()) && b++;\r\n            b == this.cardList.length && (this.valueList = [], 2 == a[0].getNumber() && 14 == a[a.length - 1].getNumber()\r\n                ? this.valueList.push(1) : this.valueList.push(a[0].getNumber()));\r\n            return b == this.cardList.length;\r\n        }\r\n\r\n        isSamCo() {\r\n            for (var a = 0; a < this.cardList.length; a++) {\r\n                for (var b = 1, c = 0; c < this.cardList.length; c++) a != c && this.cardList[a].getNumber() ==\r\n                    this.cardList[c].getNumber() && b++;\r\n                if (3 == b) return this.valueList = [], this.valueList.push(this.cardList[a].getNumber()), !0\r\n            }\r\n            return !1\r\n        }\r\n\r\n        isThu() {\r\n            if (5 != this.cardList.length) return !1;\r\n            for (var a = [], b = 0; b < this.cardList.length - 1; b++)\r\n                if (-1 == a.indexOf(this.cardList[b].getNumber()))\r\n                    for (var c = b + 1; c < this.cardList.length; c++)\r\n                        if (this.cardList[b].getNumber() == this.cardList[c].getNumber()) {\r\n                            a.push(this.cardList[b].getNumber());\r\n                            break\r\n                        }\r\n            if (2 == a.length) {\r\n                this.valueList = [];\r\n                this.valueList.push(Math.max(a[0], a[1]));\r\n                this.valueList.push(Math.min(a[0], a[1]));\r\n                for (b = 0; b < this.cardList.length; b++) - 1 == a.indexOf(this.cardList[b].getNumber()) && this.valueList.push(this.cardList[b].getNumber());\r\n                return !0\r\n            }\r\n            return !1\r\n        }\r\n\r\n        isMotDoi() {\r\n            for (var a = [], b = 0; b < this.cardList.length - 1; b++)\r\n                for (let c = b + 1; c < this.cardList.length; c++) this.cardList[b].getNumber() == this.cardList[c].getNumber() && a.push(this.cardList[b].getNumber());\r\n            if (1 == a.length) {\r\n                this.valueList = [];\r\n                this.valueList.push(a[0]);\r\n                let d = this.getSortedCardList();\r\n                for (b = this.cardList.length - 1; 0 <= b; b--) d[b].getNumber() != a[0] && this.valueList.push(d[b].getNumber());\r\n                return !0\r\n            }\r\n            return !1\r\n        }\r\n\r\n        addCard(a) {\r\n            this.cardList.push(a);\r\n        }\r\n\r\n        removeCard(id) {\r\n            for (let b = 0; b < this.cardList.length; b++)\r\n                if (this.cardList[b] == id) {\r\n                    this.cardList.splice(b, 1);\r\n                    break\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\nexport default maubinh.DetectGroupCards;\r\n\r\n","import Cmd from './MauBinh.Cmd';\r\nimport MauBinhCard from './MauBinh.Card';\r\nimport MauBinhDetectGroupCards from \"./MauBinh.DetectGroupCards\";\r\n\r\nexport namespace maubinh {\r\n    export class DetectPlayerCards {\r\n        maubinhType = Cmd.Code.TYPE_BINH_THUONG;\r\n        chiDau = new MauBinhDetectGroupCards;\r\n        chiGiua = new MauBinhDetectGroupCards;\r\n        chiCuoi = new MauBinhDetectGroupCards;\r\n\r\n        initCard(a) {\r\n            //  cc.log(\"DetectPlayerCard initCard a : \", a);\r\n            //  cc.log(\"DetectPlayerCard initCard chiDau : \", this.chiDau);\r\n            //  cc.log(\"DetectPlayerCard initCard chiGiua : \", this.chiGiua);\r\n            //  cc.log(\"DetectPlayerCard initCard chiCuoi : \", this.chiCuoi);\r\n            for (var c = 10; c < 13; c++) this.chiCuoi.addCard(new MauBinhCard(a[c - 10], null));  // 0, 1, 2\r\n            for (c = 5; c < 10; c++) this.chiGiua.addCard(new MauBinhCard(a[c - 2], null));    // 3, 4, 5, 6, 7\r\n            for (c = 0; c < 5; c++) this.chiDau.addCard(new MauBinhCard(a[c + 8], null));  // 8, 9, 10, 11, 12\r\n        }\r\n\r\n        getPlayerCardsInfo(isTinhAce) {\r\n            let kind_01 = this.chiDau.getGroupCardsInfo();\r\n            //  cc.log(\"DetectPlayerCard getPlayerCardsInfo chiDau : \", kind_01);\r\n            let kind_02 = this.chiGiua.getGroupCardsInfo();\r\n            //  cc.log(\"DetectPlayerCard getPlayerCardsInfo chiGiua : \", kind_02);\r\n            let kind_03 = this.chiCuoi.getGroupCardsInfo();\r\n            //  cc.log(\"DetectPlayerCard getPlayerCardsInfo chiCuoi : \", kind_03);\r\n\r\n            this.isSanhRong() ? this.maubinhType = Cmd.Code.TYPE_SANH_RONG\r\n                : isTinhAce && this.isMuoiBaCayDongMau() ? this.maubinhType = Cmd.Code.TYPE_MUOI_BA_CAY_DONG_MAU\r\n                    : isTinhAce && this.isMuoiHaiCayDongMau() ? this.maubinhType = Cmd.Code.TYPE_MUOI_HAI_CAY_DONG_MAU\r\n                        : this.isBaCaiThung() ? this.maubinhType = Cmd.Code.TYPE_BA_CAI_THUNG\r\n                            : this.isBaCaiSanh() ? this.maubinhType = Cmd.Code.TYPE_BA_CAI_SANH\r\n                                : this.isLucPheBon() ? this.maubinhType = Cmd.Code.TYPE_LUC_PHE_BON\r\n                                    : this.isBinhLung(isTinhAce) ? this.maubinhType = Cmd.Code.TYPE_BINH_LUNG\r\n                                        : this.maubinhType = Cmd.Code.TYPE_BINH_THUONG\r\n\r\n\r\n            return {\r\n                cardType: this.maubinhType,\r\n                chiDau: kind_01,\r\n                chiGiua: kind_02,\r\n                chiCuoi: kind_03\r\n            }\r\n        }\r\n\r\n        addCardToChiDau(a) {\r\n            this.chiDau.addCard(a);\r\n        }\r\n\r\n        addCardToChiGiua(a) {\r\n            this.chiGiua.addCard(a);\r\n        }\r\n\r\n        addCardToChiCuoi(a) {\r\n            this.chiCuoi.addCard(a);\r\n        }\r\n\r\n        getChi(a) {\r\n            switch (a) {\r\n                case 1:\r\n                    return this.chiDau;\r\n                case 2:\r\n                    return this.chiGiua;\r\n                case 3:\r\n                    return this.chiCuoi;\r\n            }\r\n        }\r\n\r\n        getGroupCardContainsIndex(a) {\r\n            return 0 <= a && 5 > a ? this.chiDau : 10 > a ? this.chiGiua : 13 > a ? this.chiCuoi : null\r\n        }\r\n\r\n        getAllCards() {\r\n            var a = [],\r\n                a = a.concat(this.chiDau.cardList),\r\n                a = a.concat(this.chiGiua.cardList);\r\n            return a = a.concat(this.chiCuoi.cardList)\r\n        }\r\n\r\n        swapCard(a: any, b: any) {\r\n            var c = a.id;\r\n            a.id = b.id;\r\n            b.id = c;\r\n        }\r\n\r\n        // Types\r\n        isSanhRong() {\r\n            for (var a = this.getSortedCardListFromList(this.getAllCards()), b = 0, c = 1, d = 0; d < a.length; d++) c++, a[d].getNumber() == c && b++;\r\n            return 13 == b\r\n        }\r\n\r\n        isMuoiBaCayDongMau() {\r\n            for (var a = this.getAllCards(), b = 0, c = 0, d = 0; d < a.length; d++) a[d].getColor() == Cmd.Code.BLACK ? b++ : c++;\r\n            return 13 == b || 13 == c\r\n        }\r\n\r\n        isMuoiHaiCayDongMau() {\r\n            for (var a = this.getAllCards(), b = 0, c = 0, d = 0; d < a.length; d++) a[d].getColor() == Cmd.Code.BLACK ? b++ : c++;\r\n            return 12 == b || 12 == c\r\n        }\r\n\r\n        isBaCaiThung() {\r\n            if (!(this.chiDau.groupKind != Cmd.Code.GROUP_THUNG_PHA_SANH && this.chiDau.groupKind != Cmd.Code.GROUP_THUNG || this.chiGiua.groupKind != Cmd.Code.GROUP_THUNG_PHA_SANH && this.chiGiua.groupKind != Cmd.Code.GROUP_THUNG)) {\r\n                var a =\r\n                    this.chiCuoi.cardList;\r\n                if (a[0].getSuit() == a[1].getSuit() && a[1].getSuit() == a[2].getSuit()) return !0\r\n            }\r\n            return !1\r\n        }\r\n\r\n        isBaCaiSanh() {\r\n            if (!(this.chiDau.groupKind != Cmd.Code.GROUP_THUNG_PHA_SANH && this.chiDau.groupKind != Cmd.Code.GROUP_SANH || this.chiGiua.groupKind != Cmd.Code.GROUP_THUNG_PHA_SANH && this.chiGiua.groupKind != Cmd.Code.GROUP_SANH)) {\r\n                var a = this.getSortedCardListFromList(this.chiCuoi.cardList);\r\n                if (a[0].getNumber() + 1 == a[1].getNumber() && a[1].getNumber() + 1 == a[2].getNumber() || 2 == a[0].getNumber() &&\r\n                    3 == a[1].getNumber() && 14 == a[2].getNumber()) return !0\r\n            }\r\n            return !1\r\n        }\r\n\r\n        haveSauDoi() {\r\n            for (var a = this.getSortedCardListFromList(this.getAllCards()), b = 0, c = 0; c < a.length;) c + 1 < a.length && a[c + 1].getNumber() == a[c].getNumber() && (b++, c++), c++;\r\n            return 6 == b\r\n        }\r\n\r\n        isLucPheBon() {\r\n            return this.haveSauDoi() && this.chiDau.groupKind == Cmd.Code.GROUP_THU && this.chiGiua.groupKind == Cmd.Code.GROUP_THU && this.chiCuoi.groupKind == Cmd.Code.GROUP_MOT_DOI ? !0 : !1\r\n        }\r\n\r\n        isBinhLung(a) {\r\n            return 0 > this.compareChi(this.chiDau, this.chiGiua, a) || 0 > this.compareChi(this.chiGiua, this.chiCuoi, a) ? !0 : !1\r\n        }\r\n\r\n        getSortedCardListFromList(a) {\r\n            for (var b = [], c = 0; c < a.length; c++) b.push(a[c]);\r\n            for (c = 0; c < b.length - 1; c++)\r\n                for (a = c + 1; a < b.length; a++)\r\n                    if (b[c].getId() > b[a].getId()) {\r\n                        var d = b[c];\r\n                        b[c] = b[a];\r\n                        b[a] = d\r\n                    }\r\n            return b\r\n        }\r\n\r\n        compareChi(a: any, b: any, c: any) {\r\n            if (a.groupKind > b.groupKind) return -1;\r\n            if (a.groupKind < b.groupKind) return 1;\r\n            if (c) {\r\n                var d = a.getGroupKindLevel(c);\r\n                c = b.getGroupKindLevel(c);\r\n                if (d > c) return -1;\r\n                if (d < c) return 1\r\n            }\r\n            for (d = 0; d < a.valueList.length; d++) {\r\n                if (a.valueList[d] > b.valueList[d]) return 1;\r\n                if (a.valueList[d] < b.valueList[d]) return -1\r\n            }\r\n            return 0\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default maubinh.DetectPlayerCards;\r\n\r\n","import MauBinhController from \"./MauBinh.Controller\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class DragCardController extends cc.Component {\r\n\r\n    public static instance: DragCardController = null;\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    currentTarget = null;\r\n    other = null;\r\n    self = null;\r\n\r\n    onLoad() {\r\n        DragCardController.instance = this;\r\n    }\r\n\r\n    start() {\r\n        cc.director.getCollisionManager().enabled = true;\r\n    }\r\n\r\n    updatePos(pos_X, pos_Y) {\r\n        // this.node.opacity = 100;\r\n        this.node.opacity = 255;\r\n        this.node.setPosition(pos_X, pos_Y);\r\n    }\r\n\r\n    endMove() {\r\n        //  cc.log(\"endMove : \", this.currentTarget);\r\n        MauBinhController.instance.completeMoveCard(this.currentTarget);\r\n        this.node.active = false;\r\n    }\r\n\r\n    onCollisionEnter(other, self) {\r\n        this.other = other.node;\r\n        this.self = self.node;\r\n\r\n        this.currentTarget = parseInt(this.other.name) - 1;\r\n        MauBinhController.instance.showMoveTarget(this.currentTarget);\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport MauBinhController from \"./MauBinh.Controller\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ItemRoom extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    labelBet: cc.Label = null;\r\n    @property(cc.Label)\r\n    labelBetMin: cc.Label = null;\r\n    @property(cc.Label)\r\n    labelNumPlayers: cc.Label = null;\r\n    @property(cc.Sprite)\r\n    progressNumPlayers: cc.Sprite = null;\r\n\r\n    private roomInfo = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    initItem(info) {\r\n        this.roomInfo = info;\r\n\r\n        this.labelBet.string = Utils.formatNumber(info[\"moneyBet\"]);\r\n        this.labelBetMin.string = Utils.formatNumber(info[\"requiredMoney\"]);\r\n        this.labelNumPlayers.string = info[\"userCount\"] + \"/\" + info[\"maxUserPerRoom\"];\r\n        this.progressNumPlayers.fillRange = info[\"userCount\"] / info[\"maxUserPerRoom\"];\r\n    }\r\n\r\n    chooseRoom() {\r\n        MauBinhController.instance.joinRoom(this.roomInfo);\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","import MauBinhController from \"./MauBinh.Controller\";\r\nimport DragCardController from \"./MauBinh.DragCard\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class MeCardController extends cc.Component {\r\n\r\n    public static instance: MeCardController = null;\r\n\r\n    @property(cc.Node)\r\n    imgFocus: cc.Node = null;\r\n    @property(cc.Node)\r\n    imgCard: cc.Node = null;\r\n    @property(cc.Node)\r\n    imgShadow: cc.Node = null;\r\n\r\n    card_info = null;\r\n    initPos = null;\r\n    canDrag = null;\r\n    dragging: boolean;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        MeCardController.instance = this;\r\n\r\n        this.initPos = this.node.position;\r\n    }\r\n\r\n    start() { }\r\n\r\n    onEnable() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onBeginDrag, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onDrag, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onEndDrag, this);\r\n    }\r\n\r\n    onDisable() {\r\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onBeginDrag, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onDrag, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onEndDrag, this);\r\n    }\r\n\r\n    activeDrag() {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onBeginDrag, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onDrag, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onEndDrag, this);\r\n    }\r\n\r\n    offDrag() {\r\n        this.node.off(cc.Node.EventType.TOUCH_START, this.onBeginDrag, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.onDrag, this);\r\n        this.node.off(cc.Node.EventType.TOUCH_END, this.onEndDrag, this);\r\n    }\r\n\r\n    onBeginDrag(event) {\r\n        //  cc.log(\"onBeginDrag : \", this.node.name);\r\n        //  cc.log(\"onBeginDrag initPos : \", this.initPos);\r\n        //  cc.log(\"onBeginDrag card_info : \", this.card_info);\r\n        MauBinhController.instance.cardSelect(this.card_info, this.node.position, parseInt(this.node.name) - 1);\r\n    }\r\n\r\n    onDrag(event) {\r\n        this.dragging = true;\r\n        var delta = event.getDelta();\r\n\r\n        var currentPos = this.node.position;\r\n        this.node.x = currentPos.x + delta.x;\r\n        this.node.y = currentPos.y + delta.y;\r\n        DragCardController.instance.updatePos(currentPos.x + delta.x, currentPos.y + delta.y - 95);\r\n    }\r\n\r\n    onEndDrag(event) {\r\n        this.dragging = false;\r\n        this.node.position = this.initPos;\r\n        DragCardController.instance.endMove();\r\n    }\r\n\r\n    resetState() {\r\n        if (this.initPos) {\r\n            this.node.position = this.initPos;\r\n            this.setCardFocus(false);\r\n            this.setCardShadow(false);\r\n        }\r\n    }\r\n\r\n    setupCard(data, src) {\r\n        this.card_info = data;\r\n        //  cc.log(\"MauBinh MeCard card_info : \", data);\r\n        this.setCardFocus(false);\r\n        this.setCardShadow(false);\r\n\r\n        cc.tween(this.node)\r\n            .to(0.1, { scaleX: 0 })\r\n            .call(() => {\r\n                this.imgCard.getComponent(cc.Sprite).spriteFrame = src;\r\n            })\r\n            .to(0.1, { scaleX: 1 })\r\n            .start();\r\n    }\r\n\r\n    updateCard(data, src) {\r\n        this.card_info.card = data;\r\n        this.setCardFocus(false);\r\n        this.setCardShadow(false);\r\n        this.setCardSrc(src);\r\n    }\r\n\r\n    setCardSrc(src) {\r\n        this.imgCard.getComponent(cc.Sprite).spriteFrame = src;\r\n    }\r\n\r\n    setCardShadow(state) {\r\n        this.imgShadow.active = state;\r\n    }\r\n\r\n    setCardFocus(state) {\r\n        this.imgFocus.active = state;\r\n    }\r\n\r\n    setIsActive(state) {\r\n        this.node.active = state;\r\n    }\r\n\r\n    getIsActive() {\r\n        return this.node.active;\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport NetworkClient from \"../../Lobby/LobbyScript/Script/networks/Network.NetworkClient\";\r\nimport NetworkListener from \"../../Lobby/LobbyScript/Script/networks/Network.NetworkListener\";\r\nimport OutPacket from \"../../Lobby/LobbyScript/Script/networks/Network.OutPacket\";\r\n\r\n\r\nexport default class MauBinhNetworkClient extends NetworkClient {\r\n    private static instance: MauBinhNetworkClient;\r\n\r\n    private listeners: Array<NetworkListener> = new Array<NetworkListener>();\r\n\r\n    public static getInstance(): MauBinhNetworkClient {\r\n        if (this.instance == null) {\r\n            this.instance = new MauBinhNetworkClient();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.isUseWSS = Configs.App.USE_WSS;\r\n    }\r\n\r\n    public connect() {\r\n        super.connect(Configs.App.HOST_BINH.host, Configs.App.HOST_BINH.port);\r\n    }\r\n\r\n    protected onOpen(ev: Event) {\r\n        super.onOpen(ev);\r\n    }\r\n\r\n    protected onMessage(ev: MessageEvent) {\r\n        var data = new Uint8Array(ev.data);\r\n        for (var i = 0; i < this.listeners.length; i++) {\r\n            var listener = this.listeners[i];\r\n            if (listener.target && listener.target instanceof Object && listener.target.node) {\r\n                listener.callback(data);\r\n            } else {\r\n                this.listeners.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addListener(callback: (data: Uint8Array) => void, target: cc.Component) {\r\n        this.listeners.push(new NetworkListener(target, callback));\r\n    }\r\n\r\n    public send(packet: OutPacket) {\r\n        for (var b = new Int8Array(packet._length), c = 0; c < packet._length; c++)\r\n            b[c] = packet._data[c];\r\n        if (this.ws != null && this.isConnected())\r\n            this.ws.send(b.buffer);\r\n    }\r\n}\r\n","import App from \"../../Lobby/LobbyScript/Script/common/App\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n    @property(cc.Node)\r\n    btnInvite: cc.Node = null;\r\n    @property(cc.Node)\r\n    avatar: cc.Node = null;\r\n    @property(cc.Node)\r\n    cardReady: cc.Node = null;\r\n    @property(cc.Node)\r\n    cardReal: cc.Node = null;\r\n    @property(cc.Label)\r\n    userName: cc.Label = null;\r\n    @property(cc.Label)\r\n    userGold: cc.Label = null;\r\n    @property(cc.Node)\r\n    owner: cc.Node = null;\r\n    @property(cc.Node)\r\n    cardsName: cc.Node = null;\r\n    @property(cc.Node)\r\n    actionViewer: cc.Node = null;\r\n    @property(cc.Node)\r\n    actionThinking: cc.Node = null;\r\n    @property(cc.Node)\r\n    actionWin: cc.Node = null;\r\n    @property(cc.Label)\r\n    goldWin: cc.Label = null;\r\n    @property(cc.Node)\r\n    actionLose: cc.Node = null;\r\n    @property(cc.Label)\r\n    goldLose: cc.Label = null;\r\n    @property(cc.Node)\r\n    actionXepXong: cc.Node = null;\r\n    @property(cc.Node)\r\n    actionDangXep: cc.Node = null;\r\n    @property(cc.Node)\r\n    notify: cc.Node = null;\r\n    @property(cc.Node)\r\n    chatEmotion: cc.Node = null;\r\n    @property(cc.Node)\r\n    chatMsg: cc.Node = null;\r\n    @property(cc.Node)\r\n    shadowAvatar: cc.Node = null;\r\n    @property(cc.Node)\r\n    shadowInfo: cc.Node = null;\r\n    @property(cc.SpriteFrame)\r\n    spriteCardBack: cc.SpriteFrame = null;\r\n\r\n    @property(cc.Node)\r\n    resultGame: cc.Node = null;\r\n    @property(cc.SpriteFrame)\r\n    spriteResultChi: cc.SpriteFrame[] = [];\r\n    @property(cc.SpriteFrame)\r\n    spriteResultGeneral: cc.SpriteFrame[] = [];\r\n    @property(cc.Node)\r\n    actionGoldSoChi: cc.Node = null;\r\n\r\n    private timeoutNotify = null;\r\n    private timeoutShowCardName = null;\r\n    private timeoutChat = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    showChatEmotion(content) {\r\n        this.node.children[6].active = true;\r\n        this.chatEmotion.active = true;\r\n        this.chatMsg.active = false;\r\n        clearTimeout(this.timeoutChat);\r\n        this.chatEmotion.getComponent(sp.Skeleton).setAnimation(0, content, true);\r\n        this.timeoutChat = setTimeout(() => {\r\n            this.chatEmotion.active = false;\r\n            this.chatMsg.active = false;\r\n        }, 3000);\r\n    }\r\n\r\n    showChatMsg(content) {\r\n        this.node.children[6].active = true;\r\n        this.chatEmotion.active = false;\r\n        this.chatMsg.active = true;\r\n        clearTimeout(this.timeoutChat);\r\n        this.chatMsg.children[1].getComponent(cc.Label).string = content;\r\n        this.timeoutChat = setTimeout(() => {\r\n            this.chatEmotion.active = false;\r\n            this.chatMsg.active = false;\r\n        }, 3000);\r\n    }\r\n\r\n    showBtnInvite(state) {\r\n        this.btnInvite.active = state;\r\n    }\r\n\r\n    setOwner(state) {\r\n        // this.owner.active = state;\r\n        this.owner.active = false;\r\n    }\r\n\r\n    setAvatar(avatar) {\r\n        this.node.children[1].active = true;\r\n        this.avatar.getComponent(cc.Sprite).spriteFrame = App.instance.getAvatarSpriteFrame(avatar);\r\n    }\r\n\r\n    setIsViewer(state) {\r\n        this.shadowAvatar.active = state;\r\n        this.shadowInfo.active = state;\r\n    }\r\n\r\n    setName(data) {\r\n        this.node.children[3].active = true;\r\n        this.userName.string = data;\r\n    }\r\n\r\n    scaleCardReal(state) {\r\n        this.cardReal.scale = state;\r\n    }\r\n\r\n    showCardReady(state) {\r\n        this.node.children[2].active = true;\r\n        this.cardReady.active = state;\r\n    }\r\n\r\n    showCardReal(state) {\r\n        this.node.children[2].active = true;\r\n        this.scaleCardReal(1);\r\n        this.cardReal.active = state;\r\n    }\r\n\r\n    prepareToTransform() {\r\n        for (let index = 0; index < 13; index++) {\r\n            this.prepareCardReal(index);\r\n        }\r\n    }\r\n\r\n    prepareCardReal(pos) {\r\n        this.cardReal.children[pos].runAction(cc.scaleTo(0, 0, 1));\r\n    }\r\n\r\n    transformToCardReal(cardPos, spriteCard, seatId) {\r\n        this.node.children[2].active = true;\r\n        this.cardReal.active = true;\r\n        if (seatId == 0) {\r\n            this.cardReal.children[cardPos].children[1].getComponent(cc.Sprite).spriteFrame = spriteCard;\r\n\r\n            this.cardReady.children[cardPos].runAction(\r\n                cc.sequence(\r\n                    cc.scaleTo(0.15, 0, 1),\r\n                    cc.callFunc(() => {\r\n\r\n                    })\r\n                )\r\n            );\r\n            this.cardReal.children[cardPos].runAction(\r\n                cc.sequence(\r\n                    cc.delayTime(0.15),  // 2\r\n                    cc.scaleTo(0.15, 1, 1),\r\n                    cc.callFunc(() => {\r\n\r\n                    })\r\n                )\r\n            );\r\n        } else {\r\n            this.cardReal.children[cardPos].children[0].getComponent(cc.Sprite).spriteFrame = spriteCard;\r\n            this.cardReal.children[cardPos].runAction(\r\n                cc.sequence(\r\n                    cc.scaleTo(0.15, 1, 1),\r\n                    cc.callFunc(() => {\r\n\r\n                    })\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    showCardName(img) {\r\n        this.cardsName.active = true;\r\n        this.cardsName.getComponent(cc.Sprite).spriteFrame = img;\r\n        clearTimeout(this.timeoutShowCardName);\r\n        this.timeoutShowCardName = setTimeout(() => {\r\n            this.cardsName.active = false;\r\n        }, 4500);\r\n    }\r\n\r\n    setGold(data) {\r\n        // this.actionViewer.active = false;\r\n        this.actionThinking.active = false;\r\n\r\n        this.showGold(true);\r\n        this.userGold.string = this.formatGold(data);\r\n    }\r\n\r\n    setCardReal(data, index) {\r\n        this.cardReal.children[index].children[1].getComponent(cc.Sprite).spriteFrame = data;\r\n    }\r\n\r\n    showPlayCountdown() {\r\n        this.node.children[4].active = true;\r\n        this.actionThinking.active = true;\r\n        this.processThinking(0);\r\n        // 1 = Full | 0 = Empty\r\n    }\r\n\r\n    hidePlayCountdown() {\r\n        this.actionThinking.active = false;\r\n    }\r\n\r\n    processThinking(rate) {\r\n        //  cc.log(\"MauBinh_Player processThinking rate : \", rate);\r\n        this.actionThinking.getComponent(cc.Sprite).fillRange = rate;\r\n    }\r\n\r\n    showGold(state) {\r\n        this.node.children[3].children[2].active = state;\r\n    }\r\n\r\n    prepareFxAction() {\r\n        // this.showGold(false);\r\n        this.node.children[4].active = true;\r\n        this.resetAction();\r\n    }\r\n\r\n    // Fx Action\r\n    playFxViewer() {\r\n        this.prepareFxAction();\r\n        this.actionViewer.active = true;\r\n    }\r\n\r\n    playFxDangXep() {\r\n        this.prepareFxAction();\r\n        this.actionDangXep.active = true;\r\n        this.actionXepXong.active = false;\r\n    }\r\n\r\n    playFxXepXong() {\r\n        this.prepareFxAction();\r\n        this.actionDangXep.active = false;\r\n        this.actionXepXong.active = true;\r\n    }\r\n\r\n    playFxSoChiTotal(img) {\r\n        this.node.children[7].active = true;\r\n        this.resultGame.children[3].active = true;\r\n        this.resultGame.children[3].children[0].getComponent(cc.Sprite).spriteFrame = img;\r\n        this.resultGame.children[3].children[1].getComponent(cc.Label).string = \"\";\r\n        this.resultGame.children[3].getComponent(cc.Animation).play();\r\n    }\r\n\r\n    playFxResultGeneral(seatId, isGood, type, isSoChi) {\r\n        this.node.children[7].active = true;\r\n        this.resultGame.children[3].active = true;\r\n        if (seatId == 0) {\r\n            this.resultGame.children[3].y = isSoChi == 0 ? 30 : 100;\r\n            this.resultGame.children[3].children[0].scale = isSoChi == 0 ? 1 : 0.5;\r\n            this.resultGame.children[3].children[1].scale = isSoChi == 0 ? 1 : 0.5;\r\n        }\r\n        this.resultGame.children[3].children[0].getComponent(cc.Sprite).spriteFrame\r\n            = isGood ? this.spriteResultGeneral[0] : this.spriteResultGeneral[1];\r\n\r\n        this.resultGame.children[3].children[1].getComponent(cc.Label).string = isGood ? type : \"\";\r\n        this.resultGame.children[3].getComponent(cc.Animation).play();\r\n    }\r\n\r\n    playFxCompareChi(id, img) {\r\n        //  cc.log(\"MauBinh_Player playFxCompareChi id : \", id);\r\n        this.node.children[7].active = true;\r\n        this.resultGame.children[id - 1].active = true;\r\n        this.resultGame.children[id - 1].children[0].getComponent(cc.Sprite).spriteFrame = img;\r\n        this.resultGame.children[id - 1].getComponent(cc.Animation).play();\r\n    }\r\n\r\n    playFxGoldSoChi(goldChi) {\r\n        //  cc.log(\"MauBinh_Player playFxGoldSoChi goldChi : \", goldChi);\r\n        if (goldChi >= 0) {\r\n            this.actionGoldSoChi.active = true;\r\n            this.actionGoldSoChi.children[1].getComponent(cc.Label).string = \"+\" + goldChi + \" Chi\";\r\n        } else if (goldChi < 0) {\r\n            this.actionGoldSoChi.active = true;\r\n            this.actionGoldSoChi.children[1].getComponent(cc.Label).string = goldChi + \" Chi\";\r\n        }\r\n        setTimeout(() => {\r\n            this.actionGoldSoChi.active = false;\r\n        }, 2500);\r\n    }\r\n\r\n    playFxWinSoChi(result) {\r\n        //  cc.log(\"MauBinh_Player playFxWinSoChi result : \", result);\r\n        this.node.children[4].active = true;\r\n        this.actionWin.active = true;\r\n        this.actionWin.children[1].active = true;\r\n        this.goldWin.string = \"+\" + result + \" Chi\";\r\n        setTimeout(() => {\r\n            this.node.children[4].active = false;\r\n        }, 2000);\r\n    }\r\n\r\n    playFxLoseSoChi(result) {\r\n        //  cc.log(\"MauBinh_Player playFxLoseSoChi result : \", result);\r\n        this.node.children[4].active = true;\r\n        this.actionLose.active = true;\r\n        this.actionLose.children[1].active = true;\r\n        this.goldLose.string = result + \" Chi\";\r\n        setTimeout(() => {\r\n            this.node.children[4].active = false;\r\n        }, 2000);\r\n    }\r\n\r\n    fxWin(playerInfo) {\r\n        //  cc.log(\"MauBinh_Player playFxWin playerInfo : \", playerInfo);\r\n        this.node.children[4].active = true;\r\n        this.actionLose.active = false;\r\n        this.actionWin.active = true;\r\n        this.actionWin.children[1].active = true;\r\n        this.goldWin.node.stopAllActions();\r\n        this.fxGoldChange(0, playerInfo.moneyChange, this.goldWin.node);\r\n        if (playerInfo.money != -1) {\r\n            this.setGold(this.formatGold(playerInfo.money));\r\n        }\r\n        setTimeout(() => {\r\n            this.actionWin.active = false;\r\n            this.node.children[4].active = false;\r\n        }, 2500);\r\n    }\r\n\r\n    fxLose(playerInfo) {\r\n        //  cc.log(\"MauBinh_Player playFxLose playerInfo : \", playerInfo);\r\n        this.node.children[4].active = true;\r\n        this.actionWin.active = false;\r\n        this.actionLose.active = true;\r\n        this.actionLose.children[1].active = true;\r\n        this.goldLose.node.stopAllActions();\r\n        this.fxGoldChange(0, playerInfo.moneyChange, this.goldLose.node);\r\n        if (playerInfo.money != -1) {\r\n            this.setGold(this.formatGold(playerInfo.money));\r\n        }\r\n        setTimeout(() => {\r\n            this.actionLose.active = false;\r\n            this.node.children[4].active = false;\r\n        }, 2500);\r\n    }\r\n\r\n    shadowCardReady(state) {\r\n        for (let index = 0; index < 13; index++) {\r\n            this.cardReady.children[index].color = state ? cc.Color.GRAY : cc.Color.WHITE;\r\n        }\r\n    }\r\n\r\n    shadowCardReal(state) {\r\n        for (let index = 0; index < 13; index++) {\r\n            this.cardReal.children[index].children[0].color = state ? cc.Color.GRAY : cc.Color.WHITE;\r\n        }\r\n    }\r\n\r\n    shadowCard(index, state) {\r\n        this.cardReal.children[index].children[1].color = state ? cc.Color.GRAY : cc.Color.WHITE;\r\n    }\r\n\r\n    setCardWin(pos, state) {\r\n        this.cardReal.children[pos].children[0].color = state ? cc.Color.WHITE : cc.Color.GRAY;\r\n    }\r\n\r\n    // notify\r\n    showNotify(content) {\r\n        this.notify.active = true;\r\n        this.notify.children[1].getComponent(cc.Label).string = content;\r\n        clearTimeout(this.timeoutNotify);\r\n        this.timeoutNotify = setTimeout(() => {\r\n            this.notify.active = false;\r\n        }, 1500);\r\n    }\r\n\r\n    // reset\r\n    resetResultGame() {\r\n        for (let index = 0; index < 4; index++) {\r\n            this.resultGame.children[index].active = false;\r\n        }\r\n    }\r\n\r\n    resetResultChi(chiId) {\r\n        this.resultGame.children[chiId - 1].active = false;\r\n    }\r\n\r\n    resetAction() {\r\n        for (let index = 0; index < this.node.children[4].childrenCount; index++) {\r\n            this.node.children[4].children[index].active = false;\r\n        }\r\n    }\r\n\r\n    resetMatchHistory(seatId) {\r\n        // card\r\n        this.resetCardReady(seatId);\r\n        this.resetCardReal(seatId);\r\n        this.node.children[2].active = false;\r\n\r\n        // Info\r\n        this.showGold(true);\r\n        this.cardsName.active = false;\r\n\r\n        // Action\r\n        this.resetAction();\r\n    }\r\n\r\n    resetCardReady(seatId) {\r\n        if (seatId == 0) {\r\n            for (let index = 0; index < 13; index++) {\r\n                this.cardReady.children[index].scale = 1;\r\n            }\r\n        }\r\n        this.cardReady.active = false;\r\n        // this.shadowCardReady(false);\r\n    }\r\n\r\n    resetCardReal(seatId) {\r\n        this.cardReal.active = false;\r\n        for (let index = 0; index < 13; index++) {\r\n            this.cardReal.children[index].children[seatId == 0 ? 1 : 0].getComponent(cc.Sprite).spriteFrame = this.spriteCardBack;\r\n        }\r\n        this.shadowCardReal(false);\r\n    }\r\n\r\n    resetPlayerInfo(seatId) {\r\n        // Hide node Lv1\r\n        for (let index = 0; index < this.node.childrenCount; index++) {\r\n            this.node.children[index].active = false;\r\n        }\r\n\r\n        // reset card\r\n        for (let index = 0; index < 13; index++) {\r\n            this.cardReal.children[index].children[seatId == 0 ? 1 : 0].getComponent(cc.Sprite).spriteFrame = this.spriteCardBack;\r\n        }\r\n\r\n        this.cardReady.active = false;\r\n        this.cardReal.active = false;\r\n\r\n        this.cardsName.active = false;\r\n\r\n        // reset Action\r\n        this.actionViewer.active = false;\r\n        this.actionThinking.active = false;\r\n        this.actionWin.active = false;\r\n        this.actionLose.active = false;\r\n\r\n        // reset Viewer\r\n        this.setIsViewer(true);\r\n    }\r\n\r\n    fxGoldChange(goldStart, goldEnd, node) {\r\n        var goldAdd = goldEnd - goldStart;\r\n        node.getComponent(cc.Label).string = this.formatGold(goldStart);\r\n\r\n        var steps = 10;\r\n        var deltaGoldAdd = Math.floor(goldAdd / steps);\r\n\r\n        var rep = cc.repeat(\r\n            cc.sequence(\r\n                cc.delayTime(0.05),\r\n                cc.callFunc(() => {\r\n                    goldStart += deltaGoldAdd;\r\n                    node.getComponent(cc.Label).string = (goldAdd > 0 ? \"+\" : \"\") + this.formatGold(goldStart);\r\n                }),\r\n            ), steps);\r\n        var seq = cc.sequence(rep, cc.callFunc(() => {\r\n            goldStart = goldEnd;\r\n            node.getComponent(cc.Label).string = (goldAdd > 0 ? \"+\" : \"\") + this.formatGold(goldStart);\r\n        }));\r\n        node.runAction(seq);\r\n    }\r\n\r\n    formatGold(price) {\r\n        return price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n"],"file":"index.js"}