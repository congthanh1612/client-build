{"version":3,"sources":["assets/MiniPoker/MiniPokerScript/MiniPoker.Cmd.ts","assets/MiniPoker/MiniPokerScript/MiniPoker.MiniPokerController.ts","assets/MiniPoker/MiniPokerScript/MiniPoker.PopupHistory.ts","assets/MiniPoker/MiniPokerScript/MiniPoker.PopupHonors.ts"],"names":["cmd","Configs_1","require","Network_InPacket_1","Network_OutPacket_1","Code","SCRIBE","UNSCRIBE","CHANGE_ROOM","SPIN","UPDATE_JACKPOT","SendScribe","_super","betIdx","_this","call","this","initData","setControllerId","setCmdId","packHeader","putByte","updateSize","__extends","default","SendUnScribe","SendChangeRoom","oldBetIdx","newBetIdx","SendSpin","betValue","putLong","putShort","App","MONEY_TYPE","ReceiveUpdateJackpot","data","value","x2","getLong","getByte","ReceiveSpin","result","prize","card1","card2","card3","card4","card5","currentMoney","getShort","exports","BundleControl_1","MiniGame_1","App_1","BroadcastReceiver_1","Language_LanguageManager_1","Tween_1","Utils_1","MiniGameNetworkClient_1","MiniPoker_Cmd_1","_a","cc","_decorator","ccclass","property","ButtonBet","button","sfNormal","sfActive","_isActive","prototype","setActive","isActive","getComponent","Sprite","spriteFrame","interactable","__decorate","Button","SpriteFrame","MiniPokerController","apply","arguments","sprAtlasCards","columns","itemTemplate","lblJackpot","buttonBets","lblToast","btnSpinAnim","btnSpin","btnClose","toggleAuto","btnBoost","sprResult","lblWinCash","popupContainer","popups","rollStartItemCount","rollAddItemCount","spinDuration","addSpinDuration","listBet","defaultCards","itemHeight","isBoost","isCanChangeBet","isSpined","lastSpinRes","popupGuide","popupHistory","popupHonor","start","height","i","childrenCount","column","children","count","j","item","instantiate","parent","getSpriteFrame","randomRangeInt","removeFromParent","btn","_loop_1","this_1","node","on","instance","showBgMiniGame","oldIdx","i_1","length","scheduleOnce","getInstance","send","log","showToast","getTextLang","isChecked","actSpin","setEnableAllButtons","register","USER_LOGOUT","active","dismiss","addOnClose","addListener","getCmdId","res","numberTo","onSpinResult","show","reOrder","play","message","string","stopAllActions","opacity","runAction","sequence","fadeIn","delayTime","fadeOut","callFunc","isEnable","indexOf","Login","Coin","USER_UPDATE_COIN","timeScale","_loop_2","i_2","roll","this_2","step1Pos","step2Pos","step3Pos","moveTo","v2","getPosition","x","easing","easeQuadraticActionOut","easeQuadraticActionInOut","easeQuadraticActionIn","setPosition","spined","bottomSprite","topSprite","langCode","languageCode","animation","loop","setScale","Label","moveBy","hideGameMini","actPopupGuide","loadPrefabGame","prefab","showLoading","push","actPopupHistory","actPopupHonor","SpriteAtlas","Node","Animation","Toggle","sp","Skeleton","Http_1","Dialog_1","PopupHistory","lblPage","page","maxPage","items","Array","_onShowed","loadData","actNextPage","actPrevPage","get","API","c","mt","p","un","Nickname","err","destroy","itemData","getChildByName","formatNumber","replace","PopupHonors","JSON","stringify"],"mappings":"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","sourcesContent":["import Configs from \"../../Loading/src/Configs\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport OutPacket from \"../../Lobby/LobbyScript/Script/networks/Network.OutPacket\";\r\n\r\nexport namespace cmd {\r\n    export class Code {\r\n        static SCRIBE = 4003;\r\n        static UNSCRIBE = 4004;\r\n        static CHANGE_ROOM = 4005;\r\n        static SPIN = 4001;\r\n        static UPDATE_JACKPOT = 4002;\r\n    }\r\n\r\n    export class SendScribe extends OutPacket {\r\n        constructor(betIdx: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.SCRIBE);\r\n            this.packHeader();\r\n            this.putByte(betIdx);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendUnScribe extends OutPacket {\r\n        constructor(betIdx: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.UNSCRIBE);\r\n            this.packHeader();\r\n            this.putByte(betIdx);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendChangeRoom extends OutPacket {\r\n        constructor(oldBetIdx: number, newBetIdx: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CHANGE_ROOM);\r\n            this.packHeader();\r\n            this.putByte(oldBetIdx);\r\n            this.putByte(newBetIdx);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendSpin extends OutPacket {\r\n        constructor(betValue: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.SPIN);\r\n            this.packHeader();\r\n            this.putLong(betValue);\r\n            this.putShort(Configs.App.MONEY_TYPE);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveUpdateJackpot extends InPacket {\r\n        value = 0;\r\n        x2 = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.value = this.getLong();\r\n            this.x2 = this.getByte()\r\n        }\r\n    }\r\n\r\n    export class ReceiveSpin extends InPacket {\r\n        result = 0;\r\n        prize = 0;\r\n        card1 = 0;\r\n        card2 = 0;\r\n        card3 = 0;\r\n        card4 = 0;\r\n        card5 = 0;\r\n        currentMoney = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.result = this.getShort();\r\n            this.prize = this.getLong();\r\n            this.card1 = this.getByte();\r\n            this.card2 = this.getByte();\r\n            this.card3 = this.getByte();\r\n            this.card4 = this.getByte();\r\n            this.card5 = this.getByte();\r\n            this.currentMoney = this.getLong()\r\n        }\r\n    }\r\n}\r\nexport default cmd;","import BundleControl from \"../../Loading/src/BundleControl\";\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport MiniGame from \"../../Lobby/LobbyScript/MiniGame\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport LanguageLanguageManager from \"../../Lobby/LobbyScript/Script/common/Language.LanguageManager\";\r\nimport Tween from \"../../Lobby/LobbyScript/Script/common/Tween\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport MiniGameNetworkClient from \"../../Lobby/LobbyScript/Script/networks/MiniGameNetworkClient\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport cmd from \"./MiniPoker.Cmd\";\r\nimport PopupHistory from \"./MiniPoker.PopupHistory\";\r\nimport PopupHonors from \"./MiniPoker.PopupHonors\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass(\"ButtonBet\")\r\nexport class ButtonBet {\r\n  @property(cc.Button)\r\n  button: cc.Button = null;\r\n  @property(cc.SpriteFrame)\r\n  sfNormal: cc.SpriteFrame = null;\r\n  @property(cc.SpriteFrame)\r\n  sfActive: cc.SpriteFrame = null;\r\n\r\n  _isActive = false;\r\n\r\n  setActive(isActive: boolean) {\r\n    this._isActive = isActive;\r\n    this.button.getComponent(cc.Sprite).spriteFrame = isActive\r\n      ? this.sfActive\r\n      : this.sfNormal;\r\n    this.button.interactable = !isActive;\r\n  }\r\n}\r\n\r\n@ccclass\r\nexport default class MiniPokerController extends MiniGame {\r\n  @property(cc.SpriteAtlas)\r\n  sprAtlasCards: cc.SpriteAtlas = null;\r\n  @property(cc.Node)\r\n  columns: cc.Node = null;\r\n  @property(cc.Node)\r\n  itemTemplate: cc.Node = null;\r\n  @property(cc.Label)\r\n  lblJackpot: cc.Label = null;\r\n  @property([ButtonBet])\r\n  buttonBets: ButtonBet[] = [];\r\n  @property(cc.Label)\r\n  lblToast: cc.Label = null;\r\n  @property(cc.Animation)\r\n  btnSpinAnim: cc.Animation = null;\r\n  @property(cc.Button)\r\n  btnSpin: cc.Button = null;\r\n  @property(cc.Button)\r\n  btnClose: cc.Button = null;\r\n  @property(cc.Toggle)\r\n  toggleAuto: cc.Toggle = null;\r\n  @property(cc.Toggle)\r\n  btnBoost: cc.Toggle = null;\r\n  @property(sp.Skeleton)\r\n  sprResult: sp.Skeleton = null;\r\n  @property(cc.Node)\r\n  lblWinCash: cc.Node = null;\r\n  @property(cc.Node)\r\n  popupContainer: cc.Node = null;\r\n\r\n  @property([cc.Node])\r\n  public popups: cc.Node[] = [];\r\n\r\n  private readonly rollStartItemCount = 15;\r\n  private readonly rollAddItemCount = 10;\r\n  private readonly spinDuration = 1.2;\r\n  private readonly addSpinDuration = 0.3;\r\n  private readonly listBet = [100, 1000, 10000];\r\n  private readonly defaultCards = [0, 1, 2, 3, 4];\r\n  private itemHeight = 0;\r\n  private betIdx = 0;\r\n  private isBoost = false;\r\n  private isCanChangeBet = true;\r\n  private isSpined = true;\r\n  private lastSpinRes: cmd.ReceiveSpin = null;\r\n  private popupGuide = null;\r\n  private popupHistory: PopupHistory = null;\r\n  private popupHonor: PopupHonors = null;\r\n\r\n  start() {\r\n    this.itemHeight = this.itemTemplate.height;\r\n    for (let i = 0; i < this.columns.childrenCount; i++) {\r\n      let column = this.columns.children[i];\r\n      let count = this.rollStartItemCount + i * this.rollAddItemCount;\r\n      for (let j = 0; j < count; j++) {\r\n        let item = cc.instantiate(this.itemTemplate);\r\n        item.parent = column;\r\n        if (j >= 1) {\r\n          item.children[0].getComponent(cc.Sprite).spriteFrame =\r\n            this.sprAtlasCards.getSpriteFrame(\r\n              \"cardBlur_\" + Utils.randomRangeInt(1, 15)\r\n            );\r\n        } else {\r\n          item.children[0].getComponent(cc.Sprite).spriteFrame =\r\n            this.sprAtlasCards.getSpriteFrame(\"card\" + this.defaultCards[i]);\r\n        }\r\n      }\r\n    }\r\n    this.itemTemplate.removeFromParent();\r\n    this.itemTemplate = null;\r\n\r\n    for (let i = 0; i < this.buttonBets.length; i++) {\r\n      var btn = this.buttonBets[i];\r\n      btn.setActive(i == this.betIdx);\r\n      btn.button.node.on(\"click\", () => {\r\n        App.instance.showBgMiniGame(\"MiniPoker\");\r\n        if (!this.isCanChangeBet) {\r\n          this.showToast(App.instance.getTextLang(\"txt_notify_fast_action\"));\r\n          return;\r\n        }\r\n        let oldIdx = this.betIdx;\r\n        this.betIdx = i;\r\n        for (let i = 0; i < this.buttonBets.length; i++) {\r\n          this.buttonBets[i].setActive(i == this.betIdx);\r\n        }\r\n        this.isCanChangeBet = false;\r\n        this.scheduleOnce(() => {\r\n          this.isCanChangeBet = true;\r\n        }, 1);\r\n        MiniGameNetworkClient.getInstance().send(\r\n          new cmd.SendChangeRoom(oldIdx, this.betIdx)\r\n        );\r\n        cc.log(\"send change room:\", oldIdx + \"---0-\" + this.betIdx);\r\n      });\r\n    }\r\n\r\n    this.toggleAuto.node.on(\"click\", () => {\r\n      App.instance.showBgMiniGame(\"MiniPoker\");\r\n      if (this.toggleAuto.isChecked) {\r\n        if (this.isSpined) this.actSpin();\r\n        this.btnBoost.interactable = false;\r\n      } else {\r\n        this.btnBoost.interactable = true;\r\n        if (this.isSpined) {\r\n          this.setEnableAllButtons(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.btnBoost.node.on(\"click\", () => {\r\n      App.instance.showBgMiniGame(\"MiniPoker\");\r\n      this.isBoost = !this.isBoost;\r\n      if (this.isBoost) {\r\n        if (this.isSpined) this.actSpin();\r\n        this.toggleAuto.interactable = false;\r\n        this.btnBoost.isChecked = true;\r\n      } else {\r\n        this.toggleAuto.interactable = true;\r\n        this.btnBoost.isChecked = false;\r\n        if (this.isSpined) {\r\n          this.setEnableAllButtons(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    BroadcastReceiver.register(\r\n      BroadcastReceiver.USER_LOGOUT,\r\n      () => {\r\n        if (!this.node.active) return;\r\n        this.dismiss();\r\n      },\r\n      this\r\n    );\r\n\r\n    MiniGameNetworkClient.getInstance().addOnClose(() => {\r\n      if (!this.node.active) return;\r\n      this.dismiss();\r\n    }, this);\r\n\r\n    MiniGameNetworkClient.getInstance().addListener((data: Uint8Array) => {\r\n      if (!this.node.active) return;\r\n      let inpacket = new InPacket(data);\r\n      switch (inpacket.getCmdId()) {\r\n        case cmd.Code.UPDATE_JACKPOT: {\r\n          let res = new cmd.ReceiveUpdateJackpot(data);\r\n          Tween.numberTo(this.lblJackpot, res.value, 0.3);\r\n          break;\r\n        }\r\n        case cmd.Code.SPIN: {\r\n          let res = new cmd.ReceiveSpin(data);\r\n          this.onSpinResult(res);\r\n          break;\r\n        }\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  show() {\r\n    if (this.node.active) {\r\n      this.reOrder();\r\n      return;\r\n    }\r\n    App.instance.showBgMiniGame(\"MiniPoker\");\r\n    super.show();\r\n\r\n    this.lblToast.node.parent.active = false;\r\n    this.sprResult.node.active = false;\r\n    this.lblWinCash.active = false;\r\n\r\n    this.isSpined = true;\r\n    this.isCanChangeBet = true;\r\n    this.betIdx = 0;\r\n    for (let i = 0; i < this.buttonBets.length; i++) {\r\n      this.buttonBets[i].setActive(i == this.betIdx);\r\n    }\r\n    MiniGameNetworkClient.getInstance().send(new cmd.SendScribe(this.betIdx));\r\n  }\r\n\r\n  actSpin() {\r\n    App.instance.showBgMiniGame(\"MiniPoker\");\r\n    if (!this.isSpined) {\r\n      this.showToast(App.instance.getTextLang(\"txt_notify_fast_action\"));\r\n      return;\r\n    }\r\n    this.btnSpinAnim.play(\"spin\", 0);\r\n    this.isSpined = false;\r\n    this.setEnableAllButtons(false);\r\n    for (var i = 0; i < this.buttonBets.length; i++) {\r\n      this.buttonBets[i].button.interactable = false;\r\n    }\r\n    cc.log(\"Send bet:\", new cmd.SendSpin(this.listBet[this.betIdx]));\r\n    MiniGameNetworkClient.getInstance().send(\r\n      new cmd.SendSpin(this.listBet[this.betIdx])\r\n    );\r\n    cc.log(\"actSpin:\" + this.listBet[this.betIdx]);\r\n  }\r\n\r\n  private showToast(message: string) {\r\n    this.lblToast.string = message;\r\n    let parent = this.lblToast.node.parent;\r\n    parent.stopAllActions();\r\n    parent.active = true;\r\n    parent.opacity = 0;\r\n    parent.runAction(\r\n      cc.sequence(\r\n        cc.fadeIn(0.1),\r\n        cc.delayTime(2),\r\n        cc.fadeOut(0.2),\r\n        cc.callFunc(() => {\r\n          parent.active = false;\r\n        })\r\n      )\r\n    );\r\n  }\r\n\r\n  private setEnableAllButtons(isEnable: boolean) {\r\n    this.btnSpin.interactable = isEnable;\r\n    this.btnClose.interactable = isEnable;\r\n  }\r\n\r\n  private onSpinResult(data: cmd.ReceiveSpin) {\r\n    // cc.log(data);\r\n    this.lastSpinRes = data;\r\n\r\n    var resultSuccess = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n    if (resultSuccess.indexOf(data.result) < 0) {\r\n      this.scheduleOnce(function () {\r\n        this.isSpined = true;\r\n      }, 1);\r\n      this.setEnableAllButtons(true);\r\n      for (var i = 0; i < this.buttonBets.length; i++) {\r\n        this.buttonBets[i].button.interactable = true;\r\n      }\r\n\r\n      this.toggleAuto.isChecked = false;\r\n      this.toggleAuto.interactable = true;\r\n\r\n      this.isBoost = false;\r\n      this.btnBoost.interactable = true;\r\n      this.btnBoost.isChecked = false;\r\n\r\n      switch (data.result) {\r\n        case 102:\r\n          this.showToast(App.instance.getTextLang(\"txt_not_enough\"));\r\n          break;\r\n        default:\r\n          this.showToast(App.instance.getTextLang(\"txt_unknown_error1\"));\r\n          break;\r\n      }\r\n      return;\r\n    }\r\n\r\n    Configs.Login.Coin -= this.listBet[this.betIdx];\r\n    BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n    Configs.Login.Coin = data.currentMoney;\r\n\r\n    let result = [data.card1, data.card2, data.card3, data.card4, data.card5];\r\n    //currentMoney: 3392748\r\n    // prize: 0\r\n    // result: 10 = khong an\r\n    // result: 9 = doi J+\r\n    // result: 8 = hai doi\r\n    // result: 7 = sam\r\n    let timeScale = this.isBoost ? 0.5 : 1;\r\n    for (let i = 0; i < this.columns.childrenCount; i++) {\r\n      let roll = this.columns.children[i];\r\n      let step1Pos = this.itemHeight * 0.2;\r\n      let step2Pos =\r\n        -this.itemHeight * roll.childrenCount +\r\n        this.itemHeight -\r\n        this.itemHeight * 0.2;\r\n      let step3Pos = -this.itemHeight * roll.childrenCount + this.itemHeight;\r\n      roll.runAction(\r\n        cc.sequence(\r\n          cc.delayTime(0.2 * i * timeScale),\r\n          cc\r\n            .moveTo(0.2 * timeScale, cc.v2(roll.getPosition().x, step1Pos))\r\n            .easing(cc.easeQuadraticActionOut()),\r\n          cc\r\n            .moveTo(\r\n              (this.spinDuration + this.addSpinDuration * i) * timeScale,\r\n              cc.v2(roll.getPosition().x, step2Pos)\r\n            )\r\n            .easing(cc.easeQuadraticActionInOut()),\r\n          cc\r\n            .moveTo(0.2 * timeScale, cc.v2(roll.getPosition().x, step3Pos))\r\n            .easing(cc.easeQuadraticActionIn()),\r\n          cc.callFunc(() => {\r\n            roll.setPosition(cc.v2(roll.getPosition().x, 0));\r\n            if (i === this.columns.childrenCount - 1) {\r\n              this.spined();\r\n            }\r\n          })\r\n        )\r\n      );\r\n      roll.runAction(\r\n        cc.sequence(\r\n          cc.delayTime((0.45 + 0.2 * i) * timeScale),\r\n          cc.callFunc(() => {\r\n            let children = roll.children;\r\n            let bottomSprite = children[0].children[0].getComponent(cc.Sprite);\r\n            let topSprite = children[\r\n              children.length - 1\r\n            ].children[0].getComponent(cc.Sprite);\r\n            bottomSprite.spriteFrame = topSprite.spriteFrame =\r\n              this.sprAtlasCards.getSpriteFrame(\"card\" + result[i]);\r\n          })\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  private spined() {\r\n    // cc.log(\"vao day chu ha:\" + JSON.stringify(this.lastSpinRes));\r\n    BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n    this.setEnableAllButtons(true);\r\n    let langCode = LanguageLanguageManager.instance.languageCode;\r\n    if (this.lastSpinRes.prize > 0) {\r\n      // this.lastSpinRes.result = 9;\r\n      switch (this.lastSpinRes.result) {\r\n        case 1:\r\n          this.sprResult.animation = \"jackport\";\r\n          this.sprResult.loop = false;\r\n          break;\r\n        case 2:\r\n          this.sprResult.animation =\r\n            langCode == \"vi\" ? \"thùng phá sảnh2\" : \"thùng phá sảnh2 Eng\";\r\n          break;\r\n        case 3:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"tu quy\" : \"tu quy Eng\";\r\n          break;\r\n        case 4:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"cù lũ\" : \"cù lũ Eng\";\r\n          break;\r\n        case 5:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"thùng\" : \"thùng Eng\";\r\n          break;\r\n        case 6:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"sanh\" : \"sanh Eng\";\r\n          break;\r\n        case 7:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"sám cô\" : \"sám cô Eng\";\r\n          break;\r\n        case 8:\r\n          this.sprResult.animation =\r\n            langCode == \"vi\" ? \"hai đôi\" : \"hai đôi Eng\";\r\n          break;\r\n        case 9:\r\n          this.sprResult.animation = langCode == \"vi\" ? \"đôi J+\" : \"đôi J+ Eng\";\r\n          break;\r\n      }\r\n      this.sprResult.node.active = true;\r\n      this.sprResult.node.setScale(1);\r\n\r\n      this.lblWinCash.active = true;\r\n      this.lblWinCash.getComponent(cc.Label).string =\r\n        \"+\" + this.lastSpinRes.prize;\r\n      this.lblWinCash.setPosition(0, 42);\r\n      this.lblWinCash.runAction(\r\n        cc.sequence(\r\n          cc.delayTime(0.5),\r\n          cc.moveBy(1, cc.v2(0, 140)),\r\n          cc.delayTime(1),\r\n          cc.callFunc(() => {\r\n            this.sprResult.node.active = false;\r\n            this.lblWinCash.active = false;\r\n            this.scheduleOnce(() => {\r\n              this.isSpined = true;\r\n              if (this.toggleAuto.isChecked || this.isBoost) {\r\n                this.actSpin();\r\n              } else {\r\n                for (var i = 0; i < this.buttonBets.length; i++) {\r\n                  this.buttonBets[i].button.interactable = true;\r\n                }\r\n              }\r\n            }, 0.2);\r\n          })\r\n        )\r\n      );\r\n    } else {\r\n      this.scheduleOnce(() => {\r\n        this.isSpined = true;\r\n        if (this.toggleAuto.isChecked || this.isBoost) {\r\n          this.actSpin();\r\n        } else {\r\n          for (var i = 0; i < this.buttonBets.length; i++) {\r\n            this.buttonBets[i].button.interactable = true;\r\n          }\r\n        }\r\n      }, 0.4);\r\n    }\r\n  }\r\n\r\n  dismiss() {\r\n    super.dismiss();\r\n    for (let i = 0; i < this.popups.length; i++) {\r\n      this.popups[i].active = false;\r\n    }\r\n    App.instance.hideGameMini(\"MiniPoker\");\r\n    MiniGameNetworkClient.getInstance().send(new cmd.SendUnScribe(this.betIdx));\r\n  }\r\n  actPopupGuide() {\r\n    if (this.popupGuide == null) {\r\n      BundleControl.loadPrefabGame(\r\n        \"MiniPoker\",\r\n        \"res/prefabs/PopupGuide\",\r\n        (finish, total) => {\r\n          // App.instance.showErrLoading(App.instance.getTextLang('txt_loading1') + parseInt((finish / total) * 100) + \"%\");\r\n        },\r\n        (prefab) => {\r\n          App.instance.showLoading(false);\r\n          this.popupGuide = cc.instantiate(prefab).getComponent(\"Dialog\");\r\n          this.popupGuide.node.parent = this.popupContainer;\r\n          this.popupGuide.show();\r\n          this.popups.push(this.popupGuide.node);\r\n        }\r\n      );\r\n    } else {\r\n      this.popupGuide.show();\r\n    }\r\n  }\r\n  actPopupHistory() {\r\n    if (this.popupHistory == null) {\r\n      BundleControl.loadPrefabGame(\r\n        \"MiniPoker\",\r\n        \"res/prefabs/PopupHistory\",\r\n        (finish, total) => {\r\n          // App.instance.showErrLoading(App.instance.getTextLang('txt_loading1') + parseInt((finish / total) * 100) + \"%\");\r\n        },\r\n        (prefab) => {\r\n          App.instance.showLoading(false);\r\n          this.popupHistory = cc\r\n            .instantiate(prefab)\r\n            .getComponent(\"MiniPoker.PopupHistory\");\r\n          this.popupHistory.node.parent = this.popupContainer;\r\n          this.popupHistory.show();\r\n          this.popups.push(this.popupHistory.node);\r\n        }\r\n      );\r\n    } else {\r\n      this.popupHistory.show();\r\n    }\r\n  }\r\n  actPopupHonor() {\r\n    if (this.popupHonor == null) {\r\n      BundleControl.loadPrefabGame(\r\n        \"MiniPoker\",\r\n        \"res/prefabs/PopupHonors\",\r\n        (finish, total) => {\r\n          // App.instance.showErrLoading(App.instance.getTextLang('txt_loading1') + parseInt((finish / total) * 100) + \"%\");\r\n        },\r\n        (prefab) => {\r\n          App.instance.showLoading(false);\r\n          this.popupHonor = cc\r\n            .instantiate(prefab)\r\n            .getComponent(\"MiniPoker.PopupHonors\");\r\n          this.popupHonor.node.parent = this.popupContainer;\r\n          this.popupHonor.show();\r\n          this.popups.push(this.popupHonor.node);\r\n        }\r\n      );\r\n    } else {\r\n      this.popupHonor.show();\r\n    }\r\n  }\r\n  public reOrder() {\r\n    super.reOrder();\r\n  }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport Http from \"../../Loading/src/Http\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialog\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupHistory extends Dialog {\r\n    @property(cc.Label)\r\n    lblPage: cc.Label = null;\r\n    @property(cc.Node)\r\n    itemTemplate: cc.Node = null;\r\n\r\n    private page: number = 1;\r\n    private maxPage: number = 1;\r\n    private items = new Array<cc.Node>();\r\n\r\n    show() {\r\n        super.show();\r\n        App.instance.showBgMiniGame(\"MiniPoker\");\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n        if (this.itemTemplate != null) this.itemTemplate.active = false;\r\n\r\n\r\n    }\r\n\r\n    dismiss(){\r\n        super.dismiss();\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        this.page = 1;\r\n        this.maxPage = 1;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        this.loadData();\r\n    }\r\n\r\n    actNextPage() {\r\n        if (this.page < this.maxPage) {\r\n            this.page++;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    actPrevPage() {\r\n        if (this.page > 1) {\r\n            this.page--;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    private loadData() {\r\n        App.instance.showLoading(true);\r\n        Http.get(Configs.App.API, { \"c\": 105, \"mt\": Configs.App.MONEY_TYPE, \"p\": this.page , \"un\": Configs.Login.Nickname}, (err, res) => {\r\n            App.instance.showLoading(false);\r\n            if (err != null) return;\r\n            if (res[\"success\"]) {\r\n\r\n                if (this.items.length == 0) {\r\n                    for (var i = 0; i < 7; i++) {\r\n                        let item = cc.instantiate(this.itemTemplate);\r\n                        item.parent = this.itemTemplate.parent;\r\n                        this.items.push(item);\r\n                    }\r\n                    this.itemTemplate.destroy();\r\n                    this.itemTemplate = null;\r\n                }\r\n\r\n                this.maxPage = res[\"totalPages\"];\r\n                this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n                for (let i = 0; i < this.items.length; i++) {\r\n                    let item = this.items[i];\r\n                    if (i < res[\"results\"].length) {\r\n                        let itemData = res[\"results\"][i];\r\n                        item.getChildByName(\"Time\").getComponent(cc.Label).string = itemData[\"timestamp\"];\r\n                        item.getChildByName(\"Bet\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"betValue\"]);\r\n                        item.getChildByName(\"Result\").getComponent(cc.Label).string = itemData[\"cards\"].replace(/,/g, '  ');\r\n                        item.getChildByName(\"Win\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"prize\"]);\r\n                        item.active = true;\r\n                    } else {\r\n                        item.active = false;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport Http from \"../../Loading/src/Http\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialog\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupHonors extends Dialog {\r\n  @property(cc.Label)\r\n  lblPage: cc.Label = null;\r\n  @property(cc.Node)\r\n  itemTemplate: cc.Node = null;\r\n\r\n  private page: number = 1;\r\n  private maxPage: number = 1;\r\n  private items = new Array<cc.Node>();\r\n\r\n  show() {\r\n    super.show();\r\n    App.instance.showBgMiniGame(\"MiniPoker\");\r\n\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      this.items[i].active = false;\r\n    }\r\n    if (this.itemTemplate != null) this.itemTemplate.active = false;\r\n  }\r\n\r\n  dismiss() {\r\n    super.dismiss();\r\n    for (let i = 0; i < this.items.length; i++) {\r\n      this.items[i].active = false;\r\n    }\r\n  }\r\n\r\n  _onShowed() {\r\n    super._onShowed();\r\n    this.page = 1;\r\n    this.maxPage = 1;\r\n    this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n    this.loadData();\r\n  }\r\n\r\n  actNextPage() {\r\n    if (this.page < this.maxPage) {\r\n      this.page++;\r\n      this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  actPrevPage() {\r\n    if (this.page > 1) {\r\n      this.page--;\r\n      this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n      this.loadData();\r\n    }\r\n  }\r\n\r\n  private loadData() {\r\n    App.instance.showLoading(true);\r\n    Http.get(\r\n      Configs.App.API,\r\n      { c: 106, mt: Configs.App.MONEY_TYPE, p: this.page },\r\n      (err, res) => {\r\n        App.instance.showLoading(false);\r\n        if (err != null) return;\r\n        cc.log(\"res==\", JSON.stringify(res));\r\n        if (res[\"success\"]) {\r\n          if (this.items.length == 0) {\r\n            for (var i = 0; i < 7; i++) {\r\n              let item = cc.instantiate(this.itemTemplate);\r\n              item.parent = this.itemTemplate.parent;\r\n              this.items.push(item);\r\n            }\r\n            this.itemTemplate.destroy();\r\n            this.itemTemplate = null;\r\n          }\r\n\r\n          this.maxPage = res[\"totalPages\"];\r\n          this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n          for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n            if (i < res[\"results\"].length) {\r\n              let itemData = res[\"results\"][i];\r\n              item.getChildByName(\"Time\").getComponent(cc.Label).string =\r\n                itemData[\"ts\"];\r\n              item.getChildByName(\"Account\").getComponent(cc.Label).string =\r\n                itemData[\"un\"];\r\n              item.getChildByName(\"Bet\").getComponent(cc.Label).string =\r\n                Utils.formatNumber(itemData[\"bv\"]);\r\n              item.getChildByName(\"Win\").getComponent(cc.Label).string =\r\n                Utils.formatNumber(itemData[\"pz\"]);\r\n              item.getChildByName(\"Result\").getComponent(cc.Label).string =\r\n                App.instance.getTextLang(\"txt_jackpot_win\");\r\n              item.active = true;\r\n            } else {\r\n              item.active = false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"file":"index.js"}