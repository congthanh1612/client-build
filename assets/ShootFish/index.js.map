{"version":3,"sources":["assets/ShootFish/ShootFishScript/ShootFish.Bullet.ts","assets/ShootFish/ShootFishScript/ShootFish.CoinEffect.ts","assets/ShootFish/ShootFishScript/ShootFish.EffectBigWin.ts","assets/ShootFish/ShootFishScript/ShootFish.EffectJackpot.ts","assets/ShootFish/ShootFishScript/ShootFish.Fish.ts","assets/ShootFish/ShootFishScript/ShootFish.Lobby.ts","assets/ShootFish/ShootFishScript/ShootFish.PanelMenu.ts","assets/ShootFish/ShootFishScript/ShootFish.Player.ts","assets/ShootFish/ShootFishScript/ShootFish.Play.ts","assets/ShootFish/ShootFishScript/ShootFish.PopupCoinTransfer.ts","assets/ShootFish/ShootFishScript/ShootFish.PopupGuide.ts"],"names":["Utils_1","require","ShootFish_Play_1","_a","cc","_decorator","ccclass","property","Bullet","_super","_this","apply","this","arguments","bullet","fishNet","id","targetFishId","worldSize","size","exploreDuration","vX","vY","collisionCount","isExplored","isExploring","curExplore","circle","__extends","prototype","run","speed","Number","default","SERVER_CONFIG","isNaN","v","degreesToVec2","node","angle","x","y","active","SAT","Circle","Vector","position","updateRealTime","dt","newPos","Math","abs","width","atan2","Rad2Deg","height","pos","explore","opacity","scale","stopAllActions","runAction","spawn","sequence","scaleTo","delayTime","fadeIn","rotateTo","fadeOut","getCircle","__decorate","Node","Component","exports","CoinEffect","lblCoin","coinExplore","coin0","coin1","coin2","coin","startPos","toPos","clone","add","v2","randomRange","string","formatNumber","moveBy","Vec2","setAnimation","moveTo","callFunc","Label","sp","Skeleton","EffectBigWin","skeleton","lblNickname","show","isShow","nickname","EffectJackpot","skeletons","i","length","ShootFishNetworkClient_1","Fish","anim","lblId","isDie","type","polygon","dataPointsUpdate","currentStep","currentTimeStep","currentVStepX","currentVStepY","setData","fishData","toString","die","removeAllChildren","instantiate","instance","getFishAnimByType","parent","Box","toPolygon","translate","dX","dY","posX","posY","path","time","serverCurrentTimeMillis","dataPoints","dataP","t","mePlayer","serverPos","push","setPosition","isFirstPoint","point","i_1","data1","data2","p1","p2","t1","t2","deltaPos","sub","timeMove","p","a","tms","Deg2Rad","getPolygon","hurt","children","stopActionByTag","action","tintTo","setTag","Configs_1","Lobby_Cmd_1","App_1","BroadcastReceiver_1","MiniGameNetworkClient_1","Network_InPacket_1","ShootFish_PopupCoinTransfer_1","Http_1","SPUtils_1","Lobby","playNode","lblBalance","popupCoinTransfer","play","Lobby_1","onLoad","getComponent","Login","CoinFish","register","USER_UPDATE_COIN","getInstance","checkConnect","isLogined","FishConfigs","send","confirmDialog","show3","isConfirm","alertDialog","showMsgWithOnDismissed","actBack","addOnClose","showErrLoading","addListener","data","getCmdId","Code","GET_MONEY_USE","res","ResGetMoneyUse","Coin","moneyUse","audioEngine","stopAll","loadScene","actHonors","actRoom1","actRoom2","actLogin","username","Username","password","Password","showLoading","get","App","API","c","un","pw","md5","err","parseInt","AccessToken","SessionKey","IsLogin","userInfo","JSON","parse","base64","decode","Nickname","Avatar","LuckyWheel","IpAddress","CreateTime","Birthday","VipPoint","VipPointSave","setUserName","setUserPass","buttonMiniGame","USER_INFO_UPDATED","showMsg","popupUpdateNickname","show2","actRoom3","PanelMenu","arrow","btnSound","sfSoundOn","sfSoundOff","btnMusic","sfMusicOn","sfMusicOff","soundState","musicState","Sprite","spriteFrame","getSound","getMussic","toggleShow","toggleSound","state","settingSound","toggleMusic","settingMusic","soundSave","sys","localStorage","getItem","Button","SpriteFrame","Player","localPos","lblBet","gunRotate","sprGunBar","sprFramesGunBar","guns","avatar","gun","curGunIdx","set","setGun","leave","gunIdx","rotateGun","touchPos","gunWorldPos","convertToWorldSpaceAR","ZERO","d","shoot","addAnimation","ShootFish_Player_1","ShootFish_Bullet_1","ShootFish_Fish_1","ShootFish_CoinEffect_1","ShootFish_EffectJackpot_1","ShootFish_Lobby_1","ShootFish_PanelMenu_1","ShootFish_PopupGuide_1","ShootFish_EffectBigWin_1","Tween_1","Play","lobby","loading","touchPad","sprFramesBullet","bulletTemplate","players","fishsAnim","fishsNode","fishTemplate","coinEffectTemplate","lblJackpot","toggleAuto","target","waveState","btnFastShoot","progressFastShoot","lblFastShootTime","btnTargetFish","progressTargetFish","lblTargetFishTime","effectJackpot","effectBigWin","effectMegaWin","panelMenu","popupGuide","lblPing","lblServerTime","soundShoot","soundCoin","soundBigWin","soundBg","soundOff","musicOff","bullets","fishs","coinEffects","isStateGeted","inited","lastUpdateTime","roomId","listBet","listJackpot","betIdx","mapPlayersIdx","shootInterval","fastShootInterval","curShootInterval","isShoot","isFastShoot","isTargetFish","targetFish","intervalFindTargetFish","curIntervalFindTargetFish","curTimeFastShootCountdown","curTimeTargetFishCountdown","tweens","Array","remoteMusicBackground","Play_1","init","start","on","EventType","TOUCH_START","event","getLocation","TOUCH_MOVE","TOUCH_END","TOUCH_CANCEL","isChecked","findTargetFishInWorld","stopAutoShoot","route","numberTo","playerData","player","formatNumberMin","UsernameFish","back","getPlayerByUsername","fishId","fish","getFishById","scr","playerId","exploreAllBulletWithTargetFishId","getCoinEffect","rad","radByMe","PI","getBullet","convertToNodeSpaceAR","pos_1","value","checkMusicOnStart","checkSoundOnStart","musicSave","setItem","playMusic","stop","onDisable","forEach","element","onDestroy","update","PING","systemCurrentTimeMillis","TIME_DISTANCE","MIN_PING","now","getState","max","round","enabled","updateShoot","listFishPoly","fish_1","cBullet","bulletCircle","j","cFish","testCirclePolygon","resetView","ping","request","PasswordFish","index","removeFromParent","getJackpot","isFirst","playersData","mePlayerData","mePlayerServerPos","objects","concat","rfire","cRfire","progress","snipe","cSpine","fishWorldPos","distance","v2Distance","dAngle","getTextLang","bulletAngle","shootRad","notify","rapidFire","auto","listFishActiveInWorld","fishNode","randomRangeInt","coinEffect","setSiblingIndex","getPlayerById","name","actGetState","actBetUp","actBetDown","actFastShoot","cDuration","tween","to","call","actTargetFish","off","actEffectJackpotTest","actEffectBigWinTest","actEffectMegaWinTest","dismiss","Toggle","ProgressBar","AudioClip","Dialog_1","TabCashIn","edbCoin","quickButtons","popup","values","number","stringToInt","btn","_loop_1","this_1","getComponentInChildren","childrenCount","submit","ccash","reset","ReqGetMoneyUse","EditBox","TabCashOut","_loop_2","this_2","PopupCoinTransfer","tabs","tabContents","tabCashIn","tabCashOut","tabSelectedIdx","_loop_3","this_3","toggleItems","onTabChanged","LabelOutline","color","Color","BLACK","fromHEX","actSubmitCashIn","actSubmitCashOut","actClearCashIn","actClearCashOut","ToggleContainer","PopupGuide","grid","itemTemplate","items","mapFishType","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","_onShowed","fishName","dataConfig","getChildByName"],"mappings":"szCAAA,IAAAA,EAAAC,EAAA,+CACAC,EAAAD,EAAA,oBAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNC,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAI,OAAA,KAEAJ,EAAAK,QAAA,KAEOL,EAAAM,GAAA,GACAN,EAAAO,cAAA,EAEUP,EAAAQ,UAAAd,GAAAe,KAAA,KAAA,KACAT,EAAAU,gBAAA,GAETV,EAAAW,GAAA,EACAX,EAAAY,GAAA,EACAZ,EAAAa,eAAA,EACRb,EAAAc,YAAA,EACAd,EAAAe,aAAA,EACQf,EAAAgB,WAAA,EACAhB,EAAAiB,OAAA,OAmFZ,OAtGoCC,EAAApB,EAAAC,GAqBzBD,EAAAqB,UAAAC,IAAA,WACH,IAAAC,EAAAC,OAAA9B,EAAA+B,QAAAC,cAAA,cACAC,MAAAJ,IAAA,GAAAA,KAA+BA,EAAA,MAC/B,IAAAK,EAAApC,EAAAiC,QAAAI,cAAAzB,KAAA0B,KAAAC,OACA3B,KAAAS,GAAAe,EAAAI,EAAAT,EACAnB,KAAAU,GAAAc,EAAAK,EAAAV,EACAnB,KAAAW,eAAA,EACAX,KAAAY,YAAA,EACAZ,KAAAa,aAAA,EACAb,KAAAE,OAAA4B,QAAA,EACA9B,KAAAG,QAAA2B,QAAA,EAEA9B,KAAAe,OAAA,IAAAgB,IAAAC,OAAA,IAAAD,IAAAE,OAAAjC,KAAA0B,KAAAQ,SAAAN,EAAA5B,KAAA0B,KAAAQ,SAAAL,GAAAT,OAAA9B,EAAA+B,QAAAC,cAAA,gBAGG1B,EAAAqB,UAAAkB,eAAA,SAAAC,GACH,IAAApC,KAAAY,WAAA,CACA,GAAAZ,KAAAa,YAMI,OALAb,KAAAc,YAAAsB,OACApC,KAAAc,YAAA,IACId,KAAAY,YAAA,EACAZ,KAAA0B,KAAAI,QAAA,IAIR,IAAAO,EAAArC,KAAA0B,KAAAQ,SAKA,GAJAG,EAAAT,GAAA5B,KAAAS,GAAA2B,EACAC,EAAAR,GAAA7B,KAAAU,GAAA0B,EACApC,KAAA0B,KAAAQ,SAAAG,EAEAC,KAAAC,IAAAF,EAAAT,GAAA5B,KAAAM,UAAAkC,MAAA,EAAA,CACIxC,KAAAS,KAAA,EAEA,IAAAkB,EAAAW,KAAAG,MAAAzC,KAAAU,GAAAV,KAAAS,IAAArB,EAAAiC,QAAAqB,QACA1C,KAAA0B,KAAAC,MAAAA,EAEAU,EAAAT,GAAAS,EAAAT,EAAA,GAAA,EAAA,GAAA5B,KAAAM,UAAAkC,MAAA,EACAxC,KAAA0B,KAAAQ,SAAAG,EAEArC,KAAAW,sBACG2B,KAAAC,IAAAF,EAAAR,GAAA7B,KAAAM,UAAAqC,OAAA,IACH3C,KAAAU,KAAA,EAEAiB,EAAAW,KAAAG,MAAAzC,KAAAU,GAAAV,KAAAS,IAAArB,EAAAiC,QAAAqB,QACA1C,KAAA0B,KAAAC,MAAAA,EAEAU,EAAAR,GAAAQ,EAAAR,EAAA,GAAA,EAAA,GAAA7B,KAAAM,UAAAqC,OAAA,EACA3C,KAAA0B,KAAAQ,SAAAG,EAEArC,KAAAW,kBAGJX,KAAAe,OAAA6B,IAAA,IAAAb,IAAAE,OAAAjC,KAAA0B,KAAAQ,SAAAN,EAAA5B,KAAA0B,KAAAQ,SAAAL,GAEA7B,KAAAW,eAAA,IACIX,KAAA0B,KAAAI,QAAA,KAIDlC,EAAAqB,UAAA4B,QAAA,WACH7C,KAAAa,aAAA,EACAb,KAAAc,WAAAd,KAAAQ,gBACAR,KAAAE,OAAA4B,QAAA,EACA9B,KAAAG,QAAA2B,QAAA,EACA9B,KAAAG,QAAA2C,QAAA,EACA9C,KAAAG,QAAAwB,MAAA,EACA3B,KAAAG,QAAA4C,MAAA,EAEA/C,KAAAG,QAAA6C,iBAEAhD,KAAAG,QAAA8C,UAAAzD,GAAA0D,MAAA1D,GAAA2D,SAAA3D,GAAA4D,QAAA,GAAA,KAAA5D,GAAA6D,UAAA,KAAA7D,GAAA4D,QAAA,GAAA,IAAA5D,GAAA8D,OAAA,IAAA9D,GAAA2D,SAAA3D,GAAA6D,UAAA,KAAA7D,GAAA+D,SAAA,GAAA,KAAA/D,GAAA2D,SAAA3D,GAAA6D,UAAA,IAAA7D,GAAAgE,QAAA,QAQG5D,EAAAqB,UAAAwC,UAAA,WACH,OAAAzD,KAAAe,QAjGJ2C,EAAA,CADC/D,EAAAH,GAAAmE,OACsB/D,EAAAqB,UAAA,cAAA,GAEvByC,EAAA,CADC/D,EAAAH,GAAAmE,OACuB/D,EAAAqB,UAAA,eAAA,GALPyC,EAAA,CADpBhE,GACoBE,GAArB,CAAAJ,GAAAoE,WAAqBC,EAAAxC,QAAAzB,q9BCNrB,IAAAR,EAAAC,EAAA,+CAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNmE,EAAA,SAAAjE,GAAA,SAAAiE,IAAA,IAAAhE,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAiE,QAAA,KAEAjE,EAAAkE,YAAA,KAEAlE,EAAAmE,MAAA,KAEAnE,EAAAoE,MAAA,KAEApE,EAAAqE,MAAA,OAsEJ,OAjFwCnD,EAAA8C,EAAAjE,GAa7BiE,EAAA7C,UAAAC,IAAA,SAAAkD,EAAAC,EAAAC,GAAP,IAAAxE,EAAAE,KACIA,KAAAgE,YAAAtC,KAAAQ,SAAAmC,EAEArE,KAAAiE,MAAAjB,iBACAhD,KAAAiE,MAAA/B,SAAAmC,EAAAE,QAAAC,IAAAhF,GAAAiF,GAAArF,EAAAiC,QAAAqD,YAAA,IAAA,IAAAtF,EAAAiC,QAAAqD,YAAA,IAAA,MACA1E,KAAAiE,MAAAlB,MAAA,EAEA/C,KAAAkE,MAAAlB,iBACAhD,KAAAkE,MAAAhC,SAAAmC,EAAAE,QAAAC,IAAAhF,GAAAiF,GAAArF,EAAAiC,QAAAqD,YAAA,IAAA,IAAAtF,EAAAiC,QAAAqD,YAAA,IAAA,MACA1E,KAAAkE,MAAAnB,MAAA,EAEA/C,KAAAmE,MAAAnB,iBACAhD,KAAAmE,MAAAjC,SAAAmC,EAAAE,QAAAC,IAAAhF,GAAAiF,GAAArF,EAAAiC,QAAAqD,YAAA,IAAA,IAAAtF,EAAAiC,QAAAqD,YAAA,IAAA,MACA1E,KAAAmE,MAAApB,MAAA,EAEA/C,KAAA+D,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAR,GACApE,KAAA+D,QAAArC,KAAAQ,SAAAmC,EACArE,KAAA+D,QAAArC,KAAAsB,iBACAhD,KAAA+D,QAAArC,KAAAoB,QAAA,EACA9C,KAAA+D,QAAArC,KAAAqB,MAAA,EACA/C,KAAA+D,QAAArC,KAAAuB,UAAAzD,GAAA2D,SAAA3D,GAAA0D,MAAA1D,GAAA8D,OAAA,IAAA9D,GAAA4D,QAAA,GAAA,IAAA5D,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,IAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,IAAAtF,GAAAgE,QAAA,OAaAxD,KAAAgE,YAAAe,aAAA,EAAA,QAAA,GACA/E,KAAAiE,MAAAhB,UAAAzD,GAAA2D,SAAA3D,GAAA4D,QAAA,IAAAhE,EAAAiC,QAAAqD,YAAA,GAAA,IAAAlF,GAAA6D,UAAA,IAAA7D,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAwF,OAAA,GAAAV,GAAA9E,GAAA4D,QAAA,IAAA,KAUApD,KAAAkE,MAAAjB,UAAAzD,GAAA2D,SAAA3D,GAAA4D,QAAA,IAAAhE,EAAAiC,QAAAqD,YAAA,GAAA,IAAAlF,GAAA6D,UAAA,KAAA7D,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAwF,OAAA,GAAAV,GAAA9E,GAAA4D,QAAA,IAAA,KAUApD,KAAAmE,MAAAlB,UAAAzD,GAAA2D,SAAA3D,GAAA4D,QAAA,IAAAhE,EAAAiC,QAAAqD,YAAA,GAAA,IAAAlF,GAAA6D,UAAA,IAAA7D,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,EAAA,KAAAtF,GAAAqF,OAAA,GAAA,IAAArF,GAAAsF,KAAA,GAAA,KAAAtF,GAAAwF,OAAA,GAAAV,GAAA9E,GAAA4D,QAAA,IAAA,GAAA5D,GAAAyF,SAAA,WAUQnF,EAAA4B,KAAAI,QAAA,OA1EZ4B,EAAA,CADC/D,EAAAH,GAAA0F,QACwBpB,EAAA7C,UAAA,eAAA,GAEzByC,EAAA,CADC/D,EAAAwF,GAAAC,WAC+BtB,EAAA7C,UAAA,mBAAA,GAEhCyC,EAAA,CADC/D,EAAAH,GAAAmE,OACqBG,EAAA7C,UAAA,aAAA,GAEtByC,EAAA,CADC/D,EAAAH,GAAAmE,OACqBG,EAAA7C,UAAA,aAAA,GAEtByC,EAAA,CADC/D,EAAAH,GAAAmE,OACqBG,EAAA7C,UAAA,aAAA,GAXLyC,EAAA,CADpBhE,GACoBoE,GAArB,CAAAtE,GAAAoE,WAAqBC,EAAAxC,QAAAyC,q7BCLrB,IAAA1E,EAAAC,EAAA,+CAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN0F,EAAA,SAAAxF,GAAA,SAAAwF,IAAA,IAAAvF,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAwF,SAAA,KAEAxF,EAAAyF,YAAA,KAEAzF,EAAAiE,QAAA,OA4BJ,OAnC0C/C,EAAAqE,EAAAxF,GAS/BwF,EAAApE,UAAAuE,KAAA,SAAAC,EAAAC,EAAAtB,GAAP,IAAAtE,EAAAE,UAA6B,IAAA0F,IAAAA,EAAA,WAAyB,IAAAtB,IAAAA,EAAA,GAClDpE,KAAA0B,KAAAsB,iBACAyC,GACIzF,KAAA+D,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAR,GACApE,KAAA+D,QAAArC,KAAAI,QAAA,EACA9B,KAAAuF,YAAAZ,OAAAe,EACA1F,KAAAuF,YAAA7D,KAAAI,QAAA,EAEA9B,KAAAsF,SAAAP,aAAA,EAAA,aAAA,GAEA/E,KAAA0B,KAAAI,QAAA,EACA9B,KAAA0B,KAAAuB,UAAAzD,GAAA2D,SAAA3D,GAAA6D,UAAA,IAAA7D,GAAAyF,SAAA,WAGQnF,EAAAyF,YAAA7D,KAAAI,QAAA,EACAhC,EAAAiE,QAAArC,KAAAI,QAAA,IACJtC,GAAA6D,UAAA,GAAA7D,GAAAyF,SAAA,WAGInF,EAAA4B,KAAAI,QAAA,OAIR9B,KAAA0B,KAAAI,QAAA,GA7BR4B,EAAA,CADC/D,EAAAwF,GAAAC,WAC4BC,EAAApE,UAAA,gBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAA0F,QAC4BG,EAAApE,UAAA,mBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAA0F,QACwBG,EAAApE,UAAA,eAAA,GAPRyC,EAAA,CADpBhE,GACoB2F,GAArB,CAAA7F,GAAAoE,WAAqBC,EAAAxC,QAAAgE,u7BCLrB,IAAAjG,EAAAC,EAAA,+CAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNgG,EAAA,SAAA9F,GAAA,SAAA8F,IAAA,IAAA7F,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAA8F,UAAA,GAEA9F,EAAAyF,YAAA,KAEAzF,EAAAiE,QAAA,OA8BJ,OArC2C/C,EAAA2E,EAAA9F,GAShC8F,EAAA1E,UAAAuE,KAAA,SAAAC,EAAAC,EAAAtB,GAAP,IAAAtE,EAAAE,KAEI,QAFyB,IAAA0F,IAAAA,EAAA,WAAyB,IAAAtB,IAAAA,EAAA,GAClDpE,KAAA0B,KAAAsB,iBACAyC,EAAA,CACIzF,KAAA+D,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAR,GACApE,KAAA+D,QAAArC,KAAAI,QAAA,EACA9B,KAAAuF,YAAAZ,OAAAe,EACA1F,KAAAuF,YAAA7D,KAAAI,QAAA,EAEA,IAAA,IAAA+D,EAAA,EAAAA,EAAA7F,KAAA4F,UAAAE,OAAAD,IACI7F,KAAA4F,UAAAC,GAAAd,aAAA,EAAA,QAAA,GAGJ/E,KAAA0B,KAAAI,QAAA,EACA9B,KAAA0B,KAAAuB,UAAAzD,GAAA2D,SAAA3D,GAAA6D,UAAA,IAAA7D,GAAAyF,SAAA,WAGQnF,EAAAyF,YAAA7D,KAAAI,QAAA,EACAhC,EAAAiE,QAAArC,KAAAI,QAAA,IACJtC,GAAA6D,UAAA,GAAA7D,GAAAyF,SAAA,WAGInF,EAAA4B,KAAAI,QAAA,WAIR9B,KAAA0B,KAAAI,QAAA,GA/BR4B,EAAA,CADC/D,EAAA,CAAAwF,GAAAC,YAC6BO,EAAA1E,UAAA,iBAAA,GAE9ByC,EAAA,CADC/D,EAAAH,GAAA0F,QAC4BS,EAAA1E,UAAA,mBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAA0F,QACwBS,EAAA1E,UAAA,eAAA,GAPRyC,EAAA,CADpBhE,GACoBiG,GAArB,CAAAnG,GAAAoE,WAAqBC,EAAAxC,QAAAsE,q6BCLrB,IAAAvG,EAAAC,EAAA,+CACA0G,EAAA1G,EAAA,kEACAC,EAAAD,EAAA,oBAGME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNqG,EAAA,SAAAnG,GAAA,SAAAmG,IAAA,IAAAlG,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAmG,KAAA,KAEAnG,EAAAoG,MAAA,KAIOpG,EAAAqG,OAAA,EACArG,EAAAsG,MAAA,EAECtG,EAAAuG,QAAA,KAGAvG,EAAAwG,iBAAA,GACAxG,EAAAyG,YAAA,EACAzG,EAAA0G,iBAAA,EACD1G,EAAA2G,cAAA,EACA3G,EAAA4G,cAAA,IA2KX,OA9LkC1F,EAAAgF,EAAAnG,GAqBvBmG,EAAA/E,UAAA0F,QAAA,SAAAC,GAIH,GAHA5G,KAAAI,GAAAwG,EAAA,GACA5G,KAAAkG,MAAAvB,OAAA3E,KAAAI,GAAAyG,WAEAD,EAAA,GAAA,GAAA,GAAAA,EAAA,KAAAd,OAKI,OAJA9F,KAAA8G,WACAF,EAAA,KAAAd,OAKJ,GAAA9F,KAAAoG,MAAAQ,EAAA,EAAA,CACI5G,KAAAoG,KAAAQ,EAAA,EACA5G,KAAAiG,KAAAc,oBACAvH,GAAAwH,YAAA1H,EAAA+B,QAAA4F,SAAAC,kBAAAlH,KAAAoG,OACAe,OAAAnH,KAAAiG,KAEA,IAAAzD,EAAAoE,EAAA,EACAjE,EAAAiE,EAAA,EACA5G,KAAAqG,QAAA,IAAAtE,IAAAqF,IAAA,IAAArF,IAAAE,OAAA,EAAA,GAAAO,EAAAG,GAAA0E,YACArH,KAAAqG,QAAAiB,WAAA9E,EAAA,GAAAG,EAAA,GAEA3C,KAAA0B,KAAAc,MAAAA,EACAxC,KAAA0B,KAAAiB,OAAAA,EAIJ,IAAA4E,EAAAnG,OAAAwF,EAAA,IACAY,EAAApG,OAAAwF,EAAA,IACAa,EAAArG,OAAAwF,EAAA,IACAc,EAAAtG,OAAAwF,EAAA,IACAe,EAAAf,EAAA,KACAgB,EAAA7B,EAAA1E,QAAAwG,0BAEA7H,KAAA0B,KAAAC,MAAAW,KAAAG,MAAA+E,EAAAD,GAAAnI,EAAAiC,QAAAqB,QAGA,IADA,IAAAoF,EAAA,GACAjC,EAAA,EAAAA,EAAA8B,EAAA7B,OAAAD,IAAA,CACI,IAAAkC,EAAA,CAAAC,EAAA5G,OAAAuG,EAAA9B,GAAA,IAEA,OADAkC,EAAA,EAAAvI,GAAAiF,GAAArD,OAAAuG,EAAA9B,GAAA,GAAAzE,OAAAuG,EAAA9B,GAAA,IACAvG,EAAA+B,QAAA4F,SAAAgB,SAAAC,WACI,KAAA,EACIH,EAAA,EAAAvI,GAAAiF,IAAArD,OAAAuG,EAAA9B,GAAA,GAAAzE,OAAAuG,EAAA9B,GAAA,IACA,MACJ,KAAA,EACIkC,EAAA,EAAAvI,GAAAiF,IAAArD,OAAAuG,EAAA9B,GAAA,IAAAzE,OAAAuG,EAAA9B,GAAA,IACA,MACJ,KAAA,EACIkC,EAAA,EAAAvI,GAAAiF,GAAArD,OAAAuG,EAAA9B,GAAA,IAAAzE,OAAAuG,EAAA9B,GAAA,IAGRiC,EAAAK,KAAAJ,GAIJ,OADA/H,KAAA0B,KAAA0G,YAAAX,EAAAC,GACApI,EAAA+B,QAAA4F,SAAAgB,SAAAC,WACI,KAAA,EACIlI,KAAA0B,KAAA0G,aAAAX,EAAAC,GACA,MACJ,KAAA,EACI1H,KAAA0B,KAAA0G,aAAAX,GAAAC,GACA,MACJ,KAAA,EACI1H,KAAA0B,KAAA0G,YAAAX,GAAAC,GAIR,IAAAW,GAAA,EACAC,GAAA,EACAtI,KAAAsG,iBAAAR,OAAA,EACA,IAAA,IAAAyC,EAAA,EAAAA,EAAAT,EAAAhC,OAAAyC,IAAA,CACI,IAAAC,EAAAV,EAAAS,EAAA,GACAE,EAAAX,EAAAS,GACAG,EAAAF,EAAA,EACAG,EAAAF,EAAA,EACAG,EAAAJ,EAAA,EACAK,EAAAJ,EAAA,EACA,GAAAb,EAAAiB,EAAA,EAAA,CACIP,EAAA,IAAeA,EAAAC,GACf,IAAAO,EAAAH,EAAApE,QAAAwE,IAAAL,GACA/G,EAAAW,KAAAG,MAAAqG,EAAAjH,EAAAiH,EAAAlH,GAAAxC,EAAAiC,QAAAqB,QACAsG,EAAA,EACAX,GACIW,GAAAH,EAAAjB,GAAA,IACAS,GAAA,GAEAW,GAAAH,EAAAD,GAAA,IAEJ5I,KAAAsG,iBAAA6B,KAAA,CAAAc,EAAAN,EAAAX,EAAAgB,EAAAE,EAAAvH,EAAAwH,IAAAN,KAIR7I,KAAAwG,iBAAA,EACAxG,KAAAuG,YAAA,EACAvG,KAAAyG,cAAA,EACAzG,KAAA0G,cAAA,EAEA1G,KAAAsG,iBAAAR,OAAA,IACI9F,KAAAwG,gBAAAxG,KAAAsG,iBAAAtG,KAAAuG,aAAA,EAEAuC,EADA9I,KAAAsG,iBAAAtG,KAAAuG,aAAA,EACAwC,IAAA,IAAAvJ,GAAAsF,KAAA9E,KAAA0B,KAAAQ,SAAAN,EAAA5B,KAAA0B,KAAAQ,SAAAL,IACA7B,KAAAyG,cAAAqC,EAAAlH,EAAA5B,KAAAwG,gBACAxG,KAAA0G,cAAAoC,EAAAjH,EAAA7B,KAAAwG,gBACAxG,KAAA0B,KAAAC,MAAA3B,KAAAsG,iBAAAtG,KAAAuG,aAAA,GAIJvG,KAAAmG,OAAA,EACAnG,KAAA0B,KAAAI,QAAA,GAGGkE,EAAA/E,UAAAkB,eAAA,SAAAC,GACH,GAAApC,KAAA0B,KAAAI,SAAA9B,KAAAmG,OAGAnG,KAAAsG,iBAAAR,OAAA,GACI9F,KAAAwG,iBAAA,EAAA,CACI,IAAA5D,EAAA5C,KAAA0B,KAAAQ,SAEA,GADAlC,KAAAwG,iBAAApE,EACApC,KAAAwG,gBAAA,IACIxG,KAAAuG,cACAvG,KAAAuG,YAAAvG,KAAAsG,iBAAAR,QAAA,CACI9F,KAAAwG,gBAAAxG,KAAAsG,iBAAAtG,KAAAuG,aAAA,EAAAjE,KAAAC,IAAAvC,KAAAwG,iBAEAxG,KAAA0B,KAAAC,MAAA3B,KAAAsG,iBAAAtG,KAAAuG,aAAA,EACAvG,KAAAqG,QAAA1E,MAAA3B,KAAA0B,KAAAC,MAAAvC,EAAAiC,QAAA+H,QAEA,IACAN,EADA9I,KAAAsG,iBAAAtG,KAAAuG,aAAA,EACAwC,IAAA,IAAAvJ,GAAAsF,KAAAlC,EAAAhB,EAAAgB,EAAAf,IACA7B,KAAAyG,cAAAqC,EAAAlH,EAAA5B,KAAAwG,gBACAxG,KAAA0G,cAAAoC,EAAAjH,EAAA7B,KAAAwG,gBAOR5D,EAAAhB,GAAA5B,KAAAyG,cAAArE,EACAQ,EAAAf,GAAA7B,KAAA0G,cAAAtE,EACApC,KAAA0B,KAAAQ,SAAAU,IAKLoD,EAAA/E,UAAA6F,IAAA,WACH9G,KAAAmG,OAAA,EACAnG,KAAA0B,KAAAI,QAAA,GAGGkE,EAAA/E,UAAAoI,WAAA,WAMH,OADArJ,KAAAqG,QAAAzD,IAAA,IAAAb,IAAAE,OAAAjC,KAAA0B,KAAAQ,SAAAN,EAAA5B,KAAA0B,KAAAQ,SAAAL,GACA7B,KAAAqG,SAGGL,EAAA/E,UAAAqI,KAAA,WACH,GAAA,GAAAtJ,KAAAiG,KAAAsD,SAAAzD,QAAA,GAAA9F,KAAAiG,KAAAsD,SAAA,GAAAA,SAAAzD,OAAA,CACA9F,KAAAiG,KAAAsD,SAAA,GAAAA,SAAA,GAAAC,gBAAA,IACA,IAAAC,EAAAjK,GAAA2D,SAAA3D,GAAAkK,OAAA,IAAA,IAAA,GAAA,IAAAlK,GAAA6D,UAAA,IAAA7D,GAAAkK,OAAA,IAAA,IAAA,IAAA,MAKAD,EAAAE,OAAA,IACA3J,KAAAiG,KAAAsD,SAAA,GAAAA,SAAA,GAAAtG,UAAAwG,KAzLJ/F,EAAA,CADC/D,EAAAH,GAAAmE,OACoBqC,EAAA/E,UAAA,YAAA,GAErByC,EAAA,CADC/D,EAAAH,GAAA0F,QACsBc,EAAA/E,UAAA,aAAA,GALNyC,EAAA,CADpBhE,GACoBsG,GAArB,CAAAxG,GAAAoE,WAAqBC,EAAAxC,QAAA2E,mhCCRrB,IAAA4D,EAAAvK,EAAA,6BACAwK,EAAAxK,EAAA,qCACAyK,EAAAzK,EAAA,6CACA0K,EAAA1K,EAAA,2DACAD,EAAAC,EAAA,+CACA2K,EAAA3K,EAAA,iEACA4K,EAAA5K,EAAA,4DACA0G,EAAA1G,EAAA,kEACAC,EAAAD,EAAA,oBACA6K,EAAA7K,EAAA,iCACA8K,EAAA9K,EAAA,0BACA+K,EAAA/K,EAAA,iDACME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN0K,EAAA,SAAAxK,GAAA,SAAAwK,IAAA,IAAAvK,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAAwK,SAAA,KAEAxK,EAAAyK,WAAA,KAEAzK,EAAA0K,kBAAA,KAEQ1K,EAAA2K,KAAA,aAsJZ,OAjKmCzJ,EAAAqJ,EAAAxK,GAAd6K,EAAAL,EAejBA,EAAApJ,UAAA0J,OAAA,WAAA,IAAA7K,EAAAE,KACI0K,EAAAzD,SAAAjH,KAEAA,KAAAyK,KAAAzK,KAAAsK,SAAAM,aAAAtL,EAAA+B,SACArB,KAAAyK,KAAA/I,KAAAI,QAAA,EAEA9B,KAAAuK,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAC,UAEAf,EAAA1I,QAAA0J,SAAAhB,EAAA1I,QAAA2J,iBAAA,WACIlL,EAAAyK,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAC,WACJ9K,MAEA+F,EAAA1E,QAAA4J,cAAAC,aAAA,SAAAC,GACIA,GAMA7L,EAAA+B,QAAAC,cAAAsI,EAAAvI,QAAAwJ,MAAAO,YACArB,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA2J,kBAEAlL,GAAAA,EAAA4B,MAAA5B,EAAA4B,KAAAyF,QACIyC,EAAAvI,QAAAwJ,MAAAC,UAAA,GACIhB,EAAAzI,QAAA4F,SAAAqE,cAAAC,MAAA,wIAAA,QAAA,SAAAC,GACIA,GACI1L,EAAA0K,kBAAAhF,UAZZsE,EAAAzI,QAAA4F,SAAAwE,YAAAC,uBAAA,8EAAA,WACI5L,EAAA6L,cAkBZ5F,EAAA1E,QAAA4J,cAAAW,WAAA,WACI9B,EAAAzI,QAAA4F,SAAA4E,eAAA,iFACJ7L,MAEAgK,EAAA3I,QAAA4J,cAAAa,YAAA,SAAAC,GAEI,OADA,IAAA9B,EAAA5I,QAAA0K,GACAC,YACI,KAAAnC,EAAAxI,QAAA4K,KAAAC,cACI,IAAAC,EAAA,IAAAtC,EAAAxI,QAAA+K,eAAAL,GACAnC,EAAAvI,QAAAwJ,MAAAwB,KAAAF,EAAAG,SACAvC,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA2J,oBAIZhL,OAGJqK,EAAApJ,UAAA0K,QAAA,WAEInM,GAAA+M,YAAAC,UACA1C,EAAAzI,QAAA4F,SAAAwF,UAAA,UAGJpC,EAAApJ,UAAAyL,UAAA,aAIArC,EAAApJ,UAAA0L,SAAA,WACI3M,KAAAwF,MAAA,GACAxF,KAAAyK,KAAAjF,MAAA,EAAA,IAGJ6E,EAAApJ,UAAA2L,SAAA,WACI5M,KAAAwF,MAAA,GACAxF,KAAAyK,KAAAjF,MAAA,EAAA,IAEJ6E,EAAApJ,UAAA4L,SAAA,WAAA,IAAA/M,EAAAE,KACI8M,EAAAlD,EAAAvI,QAAAwJ,MAAAkC,SACAC,EAAApD,EAAAvI,QAAAwJ,MAAAoC,SAEAnD,EAAAzI,QAAA4F,SAAAiG,aAAA,GACA/C,EAAA9I,QAAA8L,IAAAvD,EAAAvI,QAAA+L,IAAAC,IAAA,CAAAC,EAAA,EAAAC,GAAAT,EAAAU,GAAAC,IAAAT,IAAA,SAAAU,EAAAvB,GAEI,GADArC,EAAAzI,QAAA4F,SAAAiG,aAAA,GACA,MAAAQ,EAKA,OAAAC,SAAAxB,EAAA,YACI,KAAA,EAEIvC,EAAAvI,QAAAwJ,MAAA+C,YAAAzB,EAAA,YACAvC,EAAAvI,QAAAwJ,MAAAgD,WAAA1B,EAAA,WACAvC,EAAAvI,QAAAwJ,MAAAkC,SAAAD,EACAlD,EAAAvI,QAAAwJ,MAAAoC,SAAAD,EACApD,EAAAvI,QAAAwJ,MAAAiD,SAAA,EACA,IAAAC,EAAAC,KAAAC,MAAAC,OAAAC,OAAAvE,EAAAvI,QAAAwJ,MAAAgD,aACAjE,EAAAvI,QAAAwJ,MAAAuD,SAAAL,EAAA,SACAnE,EAAAvI,QAAAwJ,MAAAwD,OAAAN,EAAA,OACAnE,EAAAvI,QAAAwJ,MAAAwB,KAAA0B,EAAA,SACAnE,EAAAvI,QAAAwJ,MAAAyD,WAAAP,EAAA,YACAnE,EAAAvI,QAAAwJ,MAAA0D,UAAAR,EAAA,UACAnE,EAAAvI,QAAAwJ,MAAA2D,WAAAT,EAAA,WACAnE,EAAAvI,QAAAwJ,MAAA4D,SAAAV,EAAA,SACAnE,EAAAvI,QAAAwJ,MAAA4D,SAAAV,EAAA,SACAnE,EAAAvI,QAAAwJ,MAAA6D,SAAAX,EAAA,SACAnE,EAAAvI,QAAAwJ,MAAA8D,aAAAZ,EAAA,aAYA3D,EAAA/I,QAAAuN,YAAAhF,EAAAvI,QAAAwJ,MAAAkC,UACA3C,EAAA/I,QAAAwN,YAAAjF,EAAAvI,QAAAwJ,MAAAoC,UAEAnD,EAAAzI,QAAA4F,SAAA6H,eAAAtJ,OAGAuE,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA0N,mBAOA,MACJ,KAAA,KACIjF,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,oEACA,MACJ,KAAA,KACIlP,EAAAmP,oBAAAC,MAAApC,EAAAE,GACA,MACJ,QACIlD,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,6FAKhB3E,EAAApJ,UAAAkO,SAAA,WACInP,KAAAwF,MAAA,GACAxF,KAAAyK,KAAAjF,MAAA,EAAA,IAGG6E,EAAApJ,UAAAuE,KAAA,SAAAC,GACHzF,KAAA0B,KAAAI,OAAA2D,EACAsE,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA2J,mBA7JUX,EAAApD,SAAA,KAGdvD,EAAA,CADC/D,EAAAH,GAAAmE,OACwB0G,EAAApJ,UAAA,gBAAA,GAEzByC,EAAA,CADC/D,EAAAH,GAAA0F,QAC2BmF,EAAApJ,UAAA,kBAAA,GAE5ByC,EAAA,CADC/D,EAAAuK,EAAA7I,UAC2CgJ,EAAApJ,UAAA,yBAAA,GAT3ByJ,EAAAhH,EAAA,CADpBhE,GACoB2K,GAArB,CAAA7K,GAAAoE,WAAqBC,EAAAxC,QAAAgJ,2/CCfrB,IAAA/K,EAAAD,EAAA,oBAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNyP,EAAA,SAAAvP,GAAA,SAAAuP,IAAA,IAAAtP,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAuP,MAAA,KAGAvP,EAAAwP,SAAA,KAEAxP,EAAAyP,UAAA,KAEAzP,EAAA0P,WAAA,KAGA1P,EAAA2P,SAAA,KAEA3P,EAAA4P,UAAA,KAEA5P,EAAA6P,WAAA,KAEQ7P,EAAA2F,QAAA,EAEA3F,EAAA8P,WAAA,EACA9P,EAAA+P,WAAA,IAyDZ,OA/EuC7O,EAAAoO,EAAAvP,GAwBnCuP,EAAAnO,UAAAuE,KAAA,SAAAC,GACIzF,KAAAyF,OAAAA,EACAzF,KAAAyF,QACIzF,KAAA0B,KAAAuB,UAAAzD,GAAAwF,OAAA,GAAAxF,GAAAiF,IAAA,IAAA,KACAzE,KAAAqP,MAAApM,UAAAzD,GAAA+D,SAAA,GAAA,MAEAvD,KAAA0B,KAAAuB,UAAAzD,GAAAwF,OAAA,GAAAxF,GAAAiF,GAAA,EAAA,KACAzE,KAAAqP,MAAApM,UAAAzD,GAAA+D,SAAA,GAAA,OAGJvD,KAAAsP,SAAA1E,aAAApL,GAAAsQ,QAAAC,YAAA/P,KAAAgQ,WAAA,EAAAhQ,KAAAuP,UAAAvP,KAAAwP,WACAxP,KAAAyP,SAAA7E,aAAApL,GAAAsQ,QAAAC,YAAA/P,KAAAiQ,YAAA,EAAAjQ,KAAA0P,UAAA1P,KAAA2P,YAGJP,EAAAnO,UAAAiP,WAAA,WACIlQ,KAAAwF,MAAAxF,KAAAyF,SAGJ2J,EAAAnO,UAAAkP,YAAA,WAEI,IAAAC,EAAApQ,KAAAgQ,WAAA,EAAA,EAAA,EAEAhQ,KAAAsP,SAAA1E,aAAApL,GAAAsQ,QAAAC,YAAAK,EAAA,EAAApQ,KAAAuP,UAAAvP,KAAAwP,WACAlQ,EAAA+B,QAAA4F,SAAAoJ,gBAIJjB,EAAAnO,UAAAqP,YAAA,WAGI,IAAAF,EAAApQ,KAAAiQ,YAAA,EAAA,EAAA,EAIAjQ,KAAAyP,SAAA7E,aAAApL,GAAAsQ,QAAAC,YAAAK,EAAA,EAAApQ,KAAA0P,UAAA1P,KAAA2P,WACArQ,EAAA+B,QAAA4F,SAAAsJ,gBAEJnB,EAAAnO,UAAA+O,SAAA,WAEI,IAAAQ,EAAAhR,GAAAiR,IAAAC,aAAAC,QAAA,mBAIA,OAHA,MAAAH,IACIxQ,KAAA4P,WAAAjC,SAAA6C,IAEJxQ,KAAA4P,YAIJR,EAAAnO,UAAAgP,UAAA,WACI,IAAAO,EAAAhR,GAAAiR,IAAAC,aAAAC,QAAA,mBAIA,OAHA,MAAAH,IACIxQ,KAAA6P,WAAAlC,SAAA6C,IAEJxQ,KAAA6P,YAzEJnM,EAAA,CADC/D,EAAAH,GAAAmE,OACqByL,EAAAnO,UAAA,aAAA,GAGtByC,EAAA,CADC/D,EAAAH,GAAAoR,SAC0BxB,EAAAnO,UAAA,gBAAA,GAE3ByC,EAAA,CADC/D,EAAAH,GAAAqR,cACgCzB,EAAAnO,UAAA,iBAAA,GAEjCyC,EAAA,CADC/D,EAAAH,GAAAqR,cACiCzB,EAAAnO,UAAA,kBAAA,GAGlCyC,EAAA,CAFC/D,EAAAH,GAAAoR,SAE0BxB,EAAAnO,UAAA,gBAAA,GAE3ByC,EAAA,CADC/D,EAAAH,GAAAqR,cACgCzB,EAAAnO,UAAA,iBAAA,GAEjCyC,EAAA,CADC/D,EAAAH,GAAAqR,cACiCzB,EAAAnO,UAAA,kBAAA,GAjBjByC,EAAA,CADpBhE,GACoB0P,GAArB,CAAA5P,GAAAoE,WAAqBC,EAAAxC,QAAA+N,w5BCLrB,IAAAhQ,EAAAC,EAAA,+CAGME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNmR,EAAA,SAAAjR,GAAA,SAAAiR,IAAA,IAAAhR,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAiR,SAAA,EAEAjR,EAAAyF,YAAA,KAEAzF,EAAAiE,QAAA,KAEAjE,EAAAkR,OAAA,KAEAlR,EAAAmR,UAAA,KAEAnR,EAAAoR,UAAA,KAEApR,EAAAqR,gBAAA,GAEArR,EAAAsR,KAAA,GAEOtR,EAAAM,GAAA,EACAN,EAAAgN,SAAA,GACAhN,EAAA4F,SAAA,GACA5F,EAAAsE,KAAA,EACAtE,EAAAuR,OAAA,GACAvR,EAAAoI,WAAA,EAECpI,EAAAwR,IAAA,KACAxR,EAAAyR,WAAA,IA+DZ,OA1FoCvQ,EAAA8P,EAAAjR,GA6BhCiR,EAAA7P,UAAAuQ,IAAA,SAAApR,EAAA0M,EAAApH,EAAAtB,EAAAiN,GAWI,OAVArR,KAAAI,GAAAA,EACAJ,KAAA8M,SAAAA,EACA9M,KAAA0F,SAAAA,EACA1F,KAAAoE,KAAAA,EACApE,KAAAqR,OAAAA,EACArR,KAAAiR,UAAAtP,MAAA,EACA3B,KAAA0B,KAAAI,QAAA,EAEA9B,KAAAuF,YAAAZ,OAAA3E,KAAA0F,SACA1F,KAAA+D,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAR,GACApE,KAAA+Q,UACI,KAAA,EACA,KAAA,EACI/Q,KAAAiR,UAAAtP,MAAA,GACA,MACJ,KAAA,EACA,KAAA,EACI3B,KAAAiR,UAAAtP,OAAA,GAGR3B,KAAAyR,OAAA,IAGJX,EAAA7P,UAAAyQ,MAAA,WACI1R,KAAAI,IAAA,EACAJ,KAAA0F,SAAA,GACA1F,KAAAoE,KAAA,EACApE,KAAAqR,OAAA,GACArR,KAAA0B,KAAAI,QAAA,GAGJgP,EAAA7P,UAAAwQ,OAAA,SAAAE,GAEI,GADAA,GAAA3R,KAAAoR,KAAAtL,SAAgC6L,EAAA,GAChC3R,KAAAuR,WAAAI,EAAA,CAEA3R,KAAAuR,UAAAI,EAEA,IAAA,IAAA9L,EAAA,EAAAA,EAAA7F,KAAAoR,KAAAtL,OAAAD,IACI7F,KAAAoR,KAAAvL,GAAAnE,KAAAI,OAAA+D,GAAA8L,EAEJ3R,KAAAkR,UAAAnB,YAAA/P,KAAAmR,gBAAAQ,GACA3R,KAAAsR,IAAAtR,KAAAoR,KAAAO,KAGJb,EAAA7P,UAAA2Q,UAAA,SAAAC,GACI,IAAAC,EAAA9R,KAAAiR,UAAAc,sBAAAvS,GAAAsF,KAAAkN,MACAC,EAAAJ,EAAA9I,IAAA+I,GACAnQ,EAAAW,KAAAG,MAAAwP,EAAApQ,EAAAoQ,EAAArQ,GAAAxC,EAAAiC,QAAAqB,QACAf,GAAA,GACIA,EAAA,IACGA,EAAA,GAAAA,GAAA,KACHA,EAAA,GAEJ3B,KAAAiR,UAAAtP,MAAAA,GAGJmP,EAAA7P,UAAAiR,MAAA,WACIlS,KAAAsR,IAAAvM,aAAA,EAAA,KAAA,GACA/E,KAAAsR,IAAAa,aAAA,EAAA,KAAA,IArFJzO,EAAA,CADC/D,GACoBmR,EAAA7P,UAAA,gBAAA,GAErByC,EAAA,CADC/D,EAAAH,GAAA0F,QAC4B4L,EAAA7P,UAAA,mBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAA0F,QACwB4L,EAAA7P,UAAA,eAAA,GAEzByC,EAAA,CADC/D,EAAAH,GAAA0F,QACuB4L,EAAA7P,UAAA,cAAA,GAExByC,EAAA,CADC/D,EAAAH,GAAAmE,OACyBmN,EAAA7P,UAAA,iBAAA,GAE1ByC,EAAA,CADC/D,EAAAH,GAAAsQ,SAC2BgB,EAAA7P,UAAA,iBAAA,GAE5ByC,EAAA,CADC/D,EAAA,CAAAH,GAAAqR,eACsCC,EAAA7P,UAAA,uBAAA,GAEvCyC,EAAA,CADC/D,EAAA,CAAAwF,GAAAC,YACwB0L,EAAA7P,UAAA,YAAA,GAjBRyC,EAAA,CADpBhE,GACoBoR,GAArB,CAAAtR,GAAAoE,WAAqBC,EAAAxC,QAAAyP,q6BCNrB,IAAAsB,EAAA/S,EAAA,sBACAgT,EAAAhT,EAAA,sBACAiT,EAAAjT,EAAA,oBACAuK,EAAAvK,EAAA,6BACAkT,EAAAlT,EAAA,0BACAmT,EAAAnT,EAAA,6BACAoT,EAAApT,EAAA,qBACAqT,EAAArT,EAAA,yBACAsT,EAAAtT,EAAA,0BACAuT,EAAAvT,EAAA,4BACAyK,EAAAzK,EAAA,6CACAwT,EAAAxT,EAAA,+CACAD,EAAAC,EAAA,+CACA0G,EAAA1G,EAAA,kEAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNmT,EAAA,SAAAjT,GAAA,SAAAiT,IAAA,IAAAhT,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAMIF,EAAAiT,MAAA,KAEAjT,EAAAkT,QAAA,KAEAlT,EAAAmT,SAAA,KAEAnT,EAAAoT,gBAAA,GAEApT,EAAAqT,eAAA,KAEArT,EAAAsT,QAAA,GAEAtT,EAAAuT,UAAA,GAEAvT,EAAAwT,UAAA,KAEAxT,EAAAyT,aAAA,KAEAzT,EAAA0T,mBAAA,KAEA1T,EAAA2T,WAAA,KAEA3T,EAAA4T,WAAA,KAEA5T,EAAA6T,OAAA,KAEA7T,EAAA8T,UAAA,KAGA9T,EAAA+T,aAAA,KAEA/T,EAAAgU,kBAAA,KAEAhU,EAAAiU,iBAAA,KAGAjU,EAAAkU,cAAA,KAEAlU,EAAAmU,mBAAA,KAEAnU,EAAAoU,kBAAA,KAIApU,EAAAqU,cAAA,KAEArU,EAAAsU,aAAA,KAEAtU,EAAAuU,cAAA,KAEAvU,EAAAwU,UAAA,KAEAxU,EAAAyU,WAAA,KAEAzU,EAAA0U,QAAA,KAEA1U,EAAA2U,cAAA,KAKA3U,EAAA4U,WAAA,KAGA5U,EAAA6U,UAAA,KAGA7U,EAAA8U,YAAA,KAGA9U,EAAA+U,QAAA,KAGA/U,EAAAgV,SAAA,KAEAhV,EAAAiV,SAAA,KAGOjV,EAAAmI,SAAA,KACCnI,EAAAkV,QAAA,GACAlV,EAAAmV,MAAA,GACAnV,EAAAoV,YAAA,GACApV,EAAAqV,cAAA,EACArV,EAAAsV,QAAA,EACAtV,EAAAuV,gBAAA,EAEAvV,EAAAwV,OAAA,EACAxV,EAAAyV,QAAA,GACAzV,EAAA0V,YAAA,GACA1V,EAAA2V,OAAA,EACS3V,EAAA4V,cAAA,CACb,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,IAGI5V,EAAA6V,cAAA,IACA7V,EAAA8V,kBAAA,IACA9V,EAAA+V,iBAAA,EACA/V,EAAAgW,SAAA,EACAhW,EAAAiW,aAAA,EACAjW,EAAAkW,cAAA,EAEAlW,EAAAmW,WAAA,KACSnW,EAAAoW,uBAAA,EACTpW,EAAAqW,0BAAA,EAEArW,EAAAsW,0BAAA,EACAtW,EAAAuW,2BAAA,EACAvW,EAAAwW,OAAA,IAAAC,MAEAzW,EAAA0W,sBAAA,KACA1W,EAAA+P,WAAA,EACA/P,EAAA8P,WAAA,UAu9BZ,OA/kCkC5O,EAAA8R,EAAAjT,GAAb4W,EAAA3D,EA0HTA,EAAA7R,UAAAyV,KAAA,WACJ1W,KAAAoV,SAEApV,KAAAiI,SAAAjI,KAAAoT,QAAA,KAGJN,EAAA7R,UAAA0J,OAAA,WACI8L,EAAAxP,SAAAjH,MAGJ8S,EAAA7R,UAAA0V,MAAA,WAAA,IAAA7W,EAAAE,KACIA,KAAAmT,eAAArR,QAAA,EAEA9B,KAAAiT,SAAA2D,GAAApX,GAAAmE,KAAAkT,UAAAC,YAAA,SAAAC,GACI,IAAAlF,EAAAkF,EAAAC,cACAlX,EAAAmI,SAAA2J,UAAAC,GACA/R,EAAAgW,SAAA,GACJ9V,KAAAiT,UAEAjT,KAAAiT,SAAA2D,GAAApX,GAAAmE,KAAAkT,UAAAI,WAAA,SAAAF,GACI,IAAAlF,EAAAkF,EAAAC,cACAlX,EAAAmI,SAAA2J,UAAAC,IACJ7R,KAAAiT,UAEAjT,KAAAiT,SAAA2D,GAAApX,GAAAmE,KAAAkT,UAAAK,UAAA,WACIpX,EAAAgW,SAAA,GACJ9V,KAAAiT,UAEAjT,KAAAiT,SAAA2D,GAAApX,GAAAmE,KAAAkT,UAAAM,aAAA,WACIrX,EAAAgW,SAAA,GACJ9V,KAAAiT,UAEAjT,KAAA0T,WAAAhS,KAAAkV,GAAA,SAAA,WACI9W,EAAA4T,WAAA0D,WACItX,EAAAmT,SAAAnR,QAAA,EACAhC,EAAAqW,0BAAArW,EAAAoW,uBACApW,EAAAgW,SAAA,EACAhW,EAAAuX,yBAEAvX,EAAAwX,kBAIRvR,EAAA1E,QAAA4J,cAAAa,YAAA,SAAAyL,EAAAxL,GACI,GAAAjM,EAAA4B,KAAAI,QAAAhC,EAAAqV,aACA,OAAAoC,GACI,IAAA,kBAEIzX,EAAA0V,YAAA1P,OAAA,EACAhG,EAAA0V,YAAArN,KAAA4D,EAAAjM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAA4D,EAAAjM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAA4D,EAAAjM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAA4D,EAAAjM,EAAAwV,OAAA,MAEAzC,EAAAxR,QAAAmW,SAAA1X,EAAA2T,WAAA3T,EAAA0V,YAAA1V,EAAA2V,QAAA,IACA,MAEJ,IAAA,gBAEI,IAAAgC,EAAA1L,EAAA,KACAgF,EAAAjR,EAAA4V,cAAA5V,EAAAmI,SAAAC,WAAAuP,EAAA,WACAC,EAAA5X,EAAAsT,QAAArC,IACAS,IAAAiG,EAAA,GAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,KAAAA,EAAA,QACAC,EAAAxP,UAAAuP,EAAA,SACAC,EAAA1G,OAAArM,OAAAvF,EAAAiC,QAAAsW,gBAAA7X,EAAAyV,QAAAzV,EAAA2V,SACA,MAEJ,IAAA,gBAUI,IARA3I,EAAAf,EAAA,WACAnC,EAAAvI,QAAAwJ,MAAA+M,eACI,GAAA7L,EAAA,QACIjC,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,oHAEJlP,EAAA+X,QAGJ,OADAH,EAAA5X,EAAAgY,oBAAAhL,IACoB,MACpB4K,EAAAhG,QACA,MAEJ,IAAA,iBAEI,IAAAqG,EAAAhM,EAAA,GAEA,GAAA,OADAiM,EAAAlY,EAAAmY,YAAAF,IAGI,MAEJC,EAAArR,QAAAoF,GAEA,MAEJ,IAAA,eAEI,IAAAe,EAAAf,EAAA,SACA3H,EAAAhD,OAAA2K,EAAA,MACAmM,EAAAnM,EAAA,IAKA,GAJAe,GAAAlD,EAAAvI,QAAAwJ,MAAA+M,eACIhO,EAAAvI,QAAAwJ,MAAAC,SAAA1G,GAGJ,OADAsT,EAAA5X,EAAAgY,oBAAAhL,IACoB,MAIpB,OAHA4K,EAAAtT,KAAAA,EACAsT,EAAA3T,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAR,GAEA8T,GACI,KAAA,EAEIpY,EAAAsU,aAAA5O,MAAA,GACA1F,EAAAuU,cAAA7O,MAAA,GACA1F,EAAAqU,cAAA3O,MAAA,EAAAkS,EAAAhS,SAAAtB,GAMR,MAEJ,IAAA,cAEI2T,EAAAhM,EAAA,GACA3H,EAAA2H,EAAA,MADA,IAIAiM,EAFAG,EAAApM,EAAA,SAGA,GAAA,OADAiM,EAAAlY,EAAAmY,YAAAF,IACkB,MAYlB,GAXAC,EAAAlR,MAGAkR,GAAAlY,EAAAmW,aACInW,EAAAsY,iCAAAtY,EAAAmW,WAAA7V,IACAN,EAAA6T,OAAA7R,QAAA,EACAhC,EAAAmW,WAAA,KACAnW,EAAAqW,0BAAA,GAIJ,OADAuB,EAAA5X,EAAAgY,oBAAAK,IACoB,MASpB,OAPArY,EAAAuY,gBACAnX,IAAAkD,EAAA,IAAA5E,GAAAsF,KAAAkT,EAAAtW,KAAAQ,SAAAN,EAAAoW,EAAAtW,KAAAQ,SAAAL,GAAA,IAAArC,GAAAsF,KAAA4S,EAAAhW,KAAAQ,SAAAN,EAAA8V,EAAAhW,KAAAQ,SAAAL,IACA,GAAA/B,EAAA8P,YACIpQ,GAAA+M,YAAA9B,KAAA3K,EAAA6U,WAAA,EAAA,GAIJqD,EAAA5R,MACI,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACA,KAAA,GACItG,EAAAqU,cAAAzS,KAAAI,QACIhC,EAAAuU,cAAA7O,MAAA,EAAAkS,EAAAhS,SAAAtB,GACJ,MACJ,KAAA,GACA,KAAA,GACA,KAAA,GACItE,EAAAqU,cAAAzS,KAAAI,QACIhC,EAAAsU,aAAA5O,MAAA,EAAAkS,EAAAhS,SAAAtB,GAMZ,MAEJ,IAAA,UAEI0I,EAAAf,EAAA,SAAA,IAOA2L,EANAjC,EAAArU,OAAA2K,EAAA,MAAA,EACAuM,EAAAvM,EAAA,IACA4H,EAAAvS,OAAA2K,EAAA,QAEA,GAAAe,GAAAlD,EAAAvI,QAAAwJ,MAAA+M,aAA4C,MAG5C,GAAA,OADAF,EAAA5X,EAAAgY,oBAAAhL,IACoB,MACpB,IAAAyL,EAAAD,EACA,OAAAxY,EAAAmI,SAAAC,WACI,KAAA,EACIqQ,EAAAD,EACA,MACJ,KAAA,EACIC,EAAAjW,KAAAkW,GAAAF,EACA,MACJ,KAAA,EACIC,EAAAD,EAAAhW,KAAAkW,GACA,MACJ,KAAA,EACID,GAAAD,EAGRZ,EAAA1G,OAAArM,OAAAvF,EAAAiC,QAAAsW,gBAAA7X,EAAAyV,QAAAE,IACAiC,EAAAzG,UAAAtP,MAAA4W,EAAAnZ,EAAAiC,QAAAqB,QACAgV,EAAAjG,OAAAgE,GACAiC,EAAAxF,QAEA,IAAAhS,EAAAJ,EAAA2Y,YACAvY,EAAAG,aAAAsT,EACAzT,EAAAA,OAAA0K,aAAApL,GAAAsQ,QAAAC,YAAAjQ,EAAAoT,gBAAAuC,GACAvV,EAAAwB,KAAAC,MAAA+V,EAAAzG,UAAAtP,MACA,IAAAiB,EAAA1C,EAAAwB,KAAAyF,OAAAuR,qBAAAhB,EAAAzG,UAAAc,sBAAAvS,GAAAsF,KAAAkN,OACApP,EAAAhB,GAAA,GAAAxC,EAAAiC,QAAAI,cAAAvB,EAAAwB,KAAAC,OAAAC,EACAgB,EAAAf,GAAA,GAAAzC,EAAAiC,QAAAI,cAAAvB,EAAAwB,KAAAC,OAAAE,EACA3B,EAAAwB,KAAA0G,YAAAxF,GACA1C,EAAAgB,MACA,MAEJ,IAAA,SAEI,MAEJ,IAAA,aAEI,OAAA6K,EAAA,OACI,KAAA,EAEIjM,EAAA8T,UAAA5Q,iBACAlD,EAAA8T,UAAA9R,QAAA,EACA,IAAA6W,EAAA7Y,EAAA8T,UAAA1R,SACAyW,EAAA/W,EAAA,KACA9B,EAAA8T,UAAA1R,SAAAyW,EACAA,EAAA/W,GAAA,KACA9B,EAAA8T,UAAA3Q,UAAAzD,GAAA2D,SAAA3D,GAAAwF,OAAA,EAAA,IAAAxF,GAAAsF,KAAA6T,EAAA/W,EAAA+W,EAAA9W,IAAArC,GAAAyF,SAAA,WACInF,EAAA8T,UAAA9R,QAAA,MAKZ,MAEJ,IAAA,YAEIiK,EAAA,SAAA,IACA6M,EAAA7M,EAAA,MAIA,OAHAA,EAAA,YAII,KAAA,EACI,aACA,MACJ,KAAA,EACI,aAGR3M,EAAAiC,QAAAuD,aAAAgU,KAOZ5Y,MAEAA,KAAA0W,OAGA1W,KAAA6Y,oBACA7Y,KAAA8Y,qBAGJhG,EAAA7R,UAAA4X,kBAAA,WACI,IAAAE,EAAAvZ,GAAAiR,IAAAC,aAAAC,QAAA,mBACA,MAAAoI,EACI/Y,KAAA6P,WAAAlC,SAAAoL,IAEA/Y,KAAA6P,WAAA,EACArQ,GAAAiR,IAAAC,aAAAsI,QAAA,kBAAA,MAGJ,GAAAhZ,KAAA6P,WACI7P,KAAA+U,SAAAjT,QAAA,EAEA9B,KAAA+U,SAAAjT,QAAA,EAEJ,GAAA9B,KAAA6P,aAEI7P,KAAAwW,sBAAAhX,GAAA+M,YAAA0M,UAAAjZ,KAAA6U,SAAA,KAGR/B,EAAA7R,UAAA6X,kBAAA,WACI,IAAAtI,EAAAhR,GAAAiR,IAAAC,aAAAC,QAAA,mBACA,MAAAH,EACIxQ,KAAA4P,WAAAjC,SAAA6C,IAEAxQ,KAAA4P,WAAA,EACApQ,GAAAiR,IAAAC,aAAAsI,QAAA,kBAAA,MAGJ,GAAAhZ,KAAA4P,WACI5P,KAAA8U,SAAAhT,QAAA,EAEA9B,KAAA8U,SAAAhT,QAAA,GAKRgR,EAAA7R,UAAAsP,aAAA,WAEIvQ,KAAA+U,SAAAjT,QAAA9B,KAAA+U,SAAAjT,OACA9B,KAAA+U,SAAAjT,QACItC,GAAA+M,YAAA2M,KAAAlZ,KAAAwW,uBACAxW,KAAA6P,WAAA,IAGA7P,KAAAwW,sBAAAhX,GAAA+M,YAAA0M,UAAAjZ,KAAA6U,SAAA,GACA7U,KAAA6P,WAAA,GAGJrQ,GAAAiR,IAAAC,aAAAsI,QAAA,kBAAA,GAAAhZ,KAAA6P,aAGJiD,EAAA7R,UAAAoP,aAAA,WAEIrQ,KAAA8U,SAAAhT,QAAA9B,KAAA8U,SAAAhT,OACA9B,KAAA8U,SAAAhT,OAEI9B,KAAA4P,WAAA,EAGA5P,KAAA4P,WAAA,EAGJpQ,GAAAiR,IAAAC,aAAAsI,QAAA,kBAAA,GAAAhZ,KAAA4P,aAGJkD,EAAA7R,UAAAkY,UAAA,WACInZ,KAAAsW,OAAA8C,QAAA,SAAAC,GACIA,EAAAH,UAIRpG,EAAA7R,UAAAqY,UAAA,WACItZ,KAAAsW,OAAA8C,QAAA,SAAAC,GACIA,EAAAH,UAIRpG,EAAA7R,UAAAsY,OAAA,SAAAnX,GACI,MAAApC,KAAAwU,UACIxU,KAAAwU,QAAA7P,OAAAoB,EAAA1E,QAAAmY,KAAA,MAEJ,MAAAxZ,KAAAyU,eAAAzU,KAAAyU,cAAA/S,KAAAI,SACI9B,KAAAyU,cAAA9P,OAAA,MAAAoB,EAAA1E,QAAAoY,0BAAA,OAAA1T,EAAA1E,QAAAqY,cAAA,QAAA3T,EAAA1E,QAAAsY,UAGJ,IAAAC,EAAA7T,EAAA1E,QAAAoY,0BACAzZ,KAAAmV,cAAAnV,KAAAqV,eAAA,GAAAuE,EAAA5Z,KAAAqV,eAAA,KAEIrV,KAAA6Z,UAAA,GAEJ7Z,KAAAqV,eAAAuE,EAEA5Z,KAAAoW,0BAAA,IACIpW,KAAAoW,0BAAA9T,KAAAwX,IAAA,EAAA9Z,KAAAoW,0BAAAhU,GACApC,KAAA+T,iBAAApP,OAAArC,KAAAyX,MAAA/Z,KAAAoW,2BAAA,IACA,GAAApW,KAAAoW,4BACIpW,KAAA+T,iBAAArS,KAAAI,QAAA,EACA9B,KAAA6T,aAAAmG,SAAA,IAIRha,KAAAqW,2BAAA,IACIrW,KAAAqW,2BAAA/T,KAAAwX,IAAA,EAAA9Z,KAAAqW,2BAAAjU,GACApC,KAAAkU,kBAAAvP,OAAArC,KAAAyX,MAAA/Z,KAAAqW,4BAAA,IACA,GAAArW,KAAAqW,6BACIrW,KAAAkU,kBAAAxS,KAAAI,QAAA,EACA9B,KAAAgU,cAAAgG,SAAA,IAIRha,KAAAia,YAAA7X,GAGA,IAAA,IAAAyD,EAAA,EAAAyH,EAAAtN,KAAAgV,QAAAlP,OAAAD,EAAAyH,EAAAzH,IACI7F,KAAAgV,QAAAnP,GACA1D,eAAAC,GAIJ,IAAA8X,EAAA,IAAA3D,MACA,IAAA1Q,EAAA,EAAAyH,EAAAtN,KAAAiV,MAAAnP,OAAAD,EAAAyH,EAAAzH,IAAA,CACI,IAAAsU,EAAAna,KAAAiV,MAAApP,GACAsU,EAAAhY,eAAAC,GACA+X,EAAAzY,KAAAI,QAAAQ,KAAAC,IAAA4X,EAAAzY,KAAAE,GAAA,KAAAU,KAAAC,IAAA4X,EAAAzY,KAAAG,GAAA,IAAA,IACIqY,EAAA/R,KAAAgS,EAAA9Q,cAEA6Q,EAAA/R,KAAA,MAKRtC,EAAA,EAAA,IAAA,IAAAuU,EAAApa,KAAAgV,QAAAlP,OAAAD,EAAAuU,EAAAvU,IAAA,CACI,IAAA3F,EAAAF,KAAAgV,QAAAnP,GACA,GAAA3F,EAAAwB,KAAAI,SAAA5B,EAAAW,cAAAX,EAAAU,WAEA,IADA,IAAAyZ,EAAAna,EAAAuD,YACA6W,EAAA,EAAAC,EAAAva,KAAAiV,MAAAnP,OAAAwU,EAAAC,EAAAD,IAAA,CACI,IAAAtC,EAAAhY,KAAAiV,MAAAqF,GACA,GAAA,MAAAJ,EAAAI,MACApa,EAAAG,aAAA,GAAAH,EAAAG,cAAA2X,EAAA5X,KACA2B,IAAAyY,kBAAAH,EAAAH,EAAAI,IACA,CACIpa,EAAA2C,UACAmV,EAAA1O,OACA,QAIZ4Q,EAAApU,OAAA,GAGIgN,EAAA7R,UAAAwJ,KAAA,WAAR,IAAA3K,EAAAE,KACIA,KAAAmV,cAAA,EACAnV,KAAAya,YACA1U,EAAA1E,QAAA4J,cAAAyP,KAAA,WACI3U,EAAA1E,QAAA4J,cAAAyP,KAAA,WACI3U,EAAA1E,QAAA4J,cAAAyP,KAAA,WAEI3U,EAAA1E,QAAA4J,cAAA0P,QAAA,OAAA,CACIxC,SAAAvO,EAAAvI,QAAAwJ,MAAA+M,aACA5K,SAAApD,EAAAvI,QAAAwJ,MAAA+P,aACAC,MAAA/a,EAAAwV,QACH,SAAAnJ,GAEG,IAAAA,EAAA,GAAA,CACI,OAAAA,EAAA,KACI,KAAA,EACIrC,EAAAzI,QAAA4F,SAAAqE,cAAA4D,MAAA,sEAAA,SAAA1D,GACIA,GACIiH,EAAApR,QAAA4F,SAAAuD,kBAAAhF,SAGR,MACJ,KAAA,EACIO,EAAA1E,QAAA4J,cAAA0P,QAAA,OAAA,KAAA,aACA7a,GACAgK,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,YAAA7C,EAAA,IAAA,oCACA,MACJ,QACIrC,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,YAAA7C,EAAA,IAAA,qCAKR,OAFArM,EAAA0F,MAAA,QACA1F,EAAAiT,MAAAnI,aAAA6H,EAAApR,SAAAmE,MAAA,GAGJ1F,EAAA+Z,UAAA,IACJ/Z,IACJA,IACJA,IACJE,OAGI8S,EAAA7R,UAAAwZ,UAAA,WACJza,KAAAyV,OAAA,EAEA,IAAA,IAAA5P,EAAA,EAAAA,EAAA7F,KAAAoT,QAAAtN,OAAAD,IACI7F,KAAAoT,QAAAvN,GAAA6L,QAGJ,IAAA7L,EAAA,EAAAA,EAAA7F,KAAAiV,MAAAnP,OAAAD,IAA4C7F,KAAAiV,MAAApP,GAAAnE,KAAAoZ,mBAG5C,IAFA9a,KAAAiV,MAAAnP,OAAA,EAEAD,EAAA,EAAAA,EAAA7F,KAAAgV,QAAAlP,OAAAD,IAA8C7F,KAAAgV,QAAAnP,GAAAnE,KAAAI,QAAA,EAC9C,IAAA+D,EAAA,EAAAA,EAAA7F,KAAAkV,YAAApP,OAAAD,IAAkD7F,KAAAkV,YAAArP,GAAAnE,KAAAI,QAAA,EAElD9B,KAAAoU,aAAA5O,MAAA,GACAxF,KAAAqU,cAAA7O,MAAA,GACAxF,KAAAmU,cAAA3O,MAAA,GAEAxF,KAAAuU,WAAAzS,QAAA,EAEA9B,KAAA4T,UAAA5Q,iBACAhD,KAAA4T,UAAA9R,QAAA,GAGIgR,EAAA7R,UAAA8Z,WAAA,WAAR,IAAAjb,EAAAE,KACI+F,EAAA1E,QAAA4J,cAAA0P,QAAA,aAAA,KAAA,SAAAxO,GACIA,EAAA,KACArM,EAAA0V,YAAA1P,OAAA,EACAhG,EAAA0V,YAAArN,KAAAgE,EAAA,KAAArM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAAgE,EAAA,KAAArM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAAgE,EAAA,KAAArM,EAAAwV,OAAA,MACAxV,EAAA0V,YAAArN,KAAAgE,EAAA,KAAArM,EAAAwV,OAAA,MAEAzC,EAAAxR,QAAAmW,SAAA1X,EAAA2T,WAAA3T,EAAA0V,YAAA1V,EAAA2V,QAAA,MACJzV,OAGI8S,EAAA7R,UAAA4Y,SAAA,SAAAmB,GAAR,IAAAlb,EAAAE,KACIgb,GAAclR,EAAAzI,QAAA4F,SAAAiG,aAAA,GACdlN,KAAAmV,cAAA,EAEAnV,KAAAya,YAEA1U,EAAA1E,QAAA4J,cAAA0P,QAAA,QAAA,KAAA,SAAAxO,GACI6O,GAAclR,EAAAzI,QAAA4F,SAAAiG,aAAA,GAMd,IAHA,IAAA+N,EAAA9O,EAAA,QACA+O,EAAA,KACAC,EAAA,EACAtV,EAAA,EAAAA,EAAAoV,EAAAnV,OAAAD,IACI,GAAAoV,EAAApV,GAAA,UAAA+D,EAAAvI,QAAAwJ,MAAA+M,aAAA,CACIuD,EAAAF,EAAApV,GAAA,SACAqV,EAAAD,EAAApV,GACA+D,EAAAvI,QAAAwJ,MAAAC,SAAAmQ,EAAApV,GAAA,KACA,MAIR,IAAAA,EAAA,EAAAA,EAAAoV,EAAAnV,OAAAD,IAAA,CACI,IAAAkL,EAAAjR,EAAA4V,cAAAyF,GAAAF,EAAApV,GAAA,UACA4R,EAAAwD,EAAApV,GACA6R,EAAA5X,EAAAsT,QAAArC,GACA2G,EAAAlG,IAAAiG,EAAA,GAAAA,EAAA,SAAAA,EAAA,SAAAA,EAAA,KAAAA,EAAA,QACAC,EAAAxP,UAAAuP,EAAA,SACAC,EAAA1G,OAAArM,OAAAvF,EAAAiC,QAAAsW,gBAAA7X,EAAAyV,QAAAzV,EAAA2V,SAKJ,IAAA2F,EAAAjP,EAAA,QAAAkP,OAAAlP,EAAA,UACA,IAAAtG,EAAA,EAAAA,EAAAuV,EAAAtV,OAAAD,IAAA,CACI,IACAmS,EADAxY,GAAAwH,YAAAlH,EAAAyT,cACA3I,aAAA0H,EAAAjR,SACA2W,EAAAtW,KAAAyF,OAAArH,EAAAwT,UACA0E,EAAArR,QAAAyU,EAAAvV,IACA/F,EAAAmV,MAAA9M,KAAA6P,GAMJ,IAAAsD,EAAAnP,EAAA,KAAA+O,EAAA,MACAK,EAAA9E,EAAAnV,cAAA,kBACAxB,EAAAgU,kBAAA0H,SAAA,EACAF,EAAAC,GACIzb,EAAA+T,aAAAmG,SAAA,EACAla,EAAAiU,iBAAArS,KAAAI,QAAA,IAEAhC,EAAA+T,aAAAmG,SAAA,EACAla,EAAAsW,0BAAAkF,EACAxb,EAAAiU,iBAAApP,OAAA7E,EAAAsW,0BAAA,IACAtW,EAAAiU,iBAAArS,KAAAI,QAAA,GAGJ,IAAA2Z,EAAAtP,EAAA,KAAA+O,EAAA,MACAQ,EAAAjF,EAAAnV,cAAA,eACAxB,EAAAmU,mBAAAuH,SAAA,EACAC,EAAAC,GACI5b,EAAAkU,cAAAgG,SAAA,EACAla,EAAAiU,iBAAArS,KAAAI,QAAA,IAEAhC,EAAAkU,cAAAgG,SAAA,EACAla,EAAAuW,2BAAAoF,EACA3b,EAAAoU,kBAAAvP,OAAA7E,EAAAuW,2BAAA,IACAvW,EAAAoU,kBAAAxS,KAAAI,QAAA,GAGJhC,EAAAqV,cAAA,EAEArV,EAAAib,aAEAC,IAAalb,EAAAkT,QAAAlR,QAAA,IACjB9B,OAGI8S,EAAA7R,UAAAgZ,YAAA,SAAA7X,GACJ,GAAApC,KAAA0T,WAAA0D,WAAApX,KAAAgW,aACI,GAAA,MAAAhW,KAAAiW,WAAA,CACI,IAAAnE,EAAA9R,KAAAiI,SAAAgJ,UAAAc,sBAAAvS,GAAAsF,KAAAkN,MACA2J,EAAA3b,KAAAiW,WAAAvU,KAAAqQ,sBAAAvS,GAAAiF,GAAAzE,KAAAiW,WAAAvU,KAAAc,MAAA,EAAA,IACAoZ,EAAAxc,EAAAiC,QAAAwa,WAAAF,EAAA7J,GAEA,GAAAxP,KAAAC,IAAAvC,KAAAiW,WAAAvU,KAAAE,GAAA,KAAAU,KAAAC,IAAAvC,KAAAiW,WAAAvU,KAAAG,GAAA,KAAA+Z,EAAA,IACI5b,KAAAoY,iCAAApY,KAAAiW,WAAA7V,IACAJ,KAAA2T,OAAA7R,QAAA,EACA9B,KAAAiW,WAAA,KACAjW,KAAAmW,0BAAA,MAEC,CACD,IAAA2F,EAAAH,EAAA5S,IAAA+I,GACAnQ,EAAAW,KAAAG,MAAAqZ,EAAAja,EAAAia,EAAAla,GAAAxC,EAAAiC,QAAAqB,QACA1C,KAAAiI,SAAAgJ,UAAAtP,MAAAA,EAEA3B,KAAA2T,OAAAvL,YAAApI,KAAA2T,OAAAxM,OAAAuR,qBAAAiD,UAED3b,KAAAgW,eACHhW,KAAAmW,0BAAA7T,KAAAwX,IAAA,EAAA9Z,KAAAmW,0BAAA/T,GACA,GAAApC,KAAAmW,2BACInW,KAAAqX,yBAKZ,GAAArX,KAAA6V,iBAAA,EACI7V,KAAA6V,iBAAAvT,KAAAwX,IAAA,EAAA9Z,KAAA6V,iBAAAzT,QACG,GAAApC,KAAA8V,QAAA,CAGH,GAFA9V,KAAA6V,iBAAA7V,KAAA+V,YAAA/V,KAAA4V,kBAAA5V,KAAA2V,cAEA/L,EAAAvI,QAAAwJ,MAAAC,SAAA9K,KAAAuV,QAAAvV,KAAAyV,QAII,OAHA3L,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAAlF,EAAAzI,QAAA4F,SAAA8U,YAAA,mBACA/b,KAAA8V,SAAA,OACA9V,KAAA0T,WAAA0D,WAA+BpX,KAAAsX,iBAInC,IAAAtX,KAAA0T,WAAA0D,WAAApX,KAAAgW,eAAA,MAAAhW,KAAAiW,WAAiF,OAEjFrM,EAAAvI,QAAAwJ,MAAAC,SAAAxI,KAAAwX,IAAA,EAAAlQ,EAAAvI,QAAAwJ,MAAAC,SAAA9K,KAAAuV,QAAAvV,KAAAyV,SACAzV,KAAAiI,SAAA7D,KAAAwF,EAAAvI,QAAAwJ,MAAAC,SACA9K,KAAAiI,SAAAlE,QAAAY,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAC,UAEA9K,KAAAiI,SAAAiK,QAGA,GAAAlS,KAAA4P,YACIpQ,GAAA+M,YAAA9B,KAAAzK,KAAA0U,YAAA,EAAA,GAIJ,IAAAsH,EAAAhc,KAAAiI,SAAAgJ,UAAAtP,MACAzB,EAAAF,KAAAyY,YACAvY,EAAAA,OAAA0K,aAAApL,GAAAsQ,QAAAC,YAAA/P,KAAAkT,gBAAAlT,KAAAyV,QACAvV,EAAAG,aAAA,MAAAL,KAAAiW,WAAAjW,KAAAiW,WAAA7V,IAAA,EACAF,EAAAwB,KAAAC,MAAAqa,EACA,IAAApZ,EAAA1C,EAAAwB,KAAAyF,OAAAuR,qBAAA1Y,KAAAiI,SAAAgJ,UAAAc,sBAAAvS,GAAAsF,KAAAkN,OACApP,EAAAhB,GAAA,GAAAxC,EAAAiC,QAAAI,cAAAvB,EAAAwB,KAAAC,OAAAC,EACAgB,EAAAf,GAAA,GAAAzC,EAAAiC,QAAAI,cAAAvB,EAAAwB,KAAAC,OAAAE,EACA3B,EAAAwB,KAAA0G,YAAAxF,GACA1C,EAAAgB,MAEA,IAAA+a,EAAAD,EAAA5c,EAAAiC,QAAA+H,QACA,OAAApJ,KAAAiI,SAAAC,WACI,KAAA,EACI+T,EAAAA,EACA,MACJ,KAAA,EACIA,EAAA3Z,KAAAkW,GAAAyD,EACA,MACJ,KAAA,EACIA,GAAA3Z,KAAAkW,GACA,MACJ,KAAA,EACIyD,GAAAA,EAGRlW,EAAA1E,QAAA4J,cAAAiR,OAAA,QAAA,CACI5D,IAAA2D,EACA7V,KAAApG,KAAAyV,OAAA,EACA9B,OAAA,MAAA3T,KAAAiW,WAAAjW,KAAAiW,WAAA7V,IAAA,EACA+b,UAAAnc,KAAA+V,YACAqG,MAAA,MAKJtJ,EAAA7R,UAAAoW,sBAAA,WACJrX,KAAAmW,0BAAAnW,KAAAkW,uBAKA,IAHA,IAAAmG,EAAA,GAEAvK,EAAA9R,KAAAiI,SAAAgJ,UAAAc,sBAAAvS,GAAAsF,KAAAkN,MACAnM,EAAA,EAAAA,EAAA7F,KAAAiV,MAAAnP,OAAAD,IAAA,CACI,IAAAyW,EAAAtc,KAAAiV,MAAApP,GAAAnE,KACA,GAAA4a,EAAAxa,QAAAQ,KAAAC,IAAA+Z,EAAApa,SAAAN,IAAA,KAAAU,KAAAC,IAAA+Z,EAAApa,SAAAL,IAAA,IAAA,CACI,IAAA8Z,EAAAW,EAAAvK,sBAAAvS,GAAAsF,KAAAkN,MACA4J,EAAAxc,EAAAiC,QAAAwa,WAAA/J,EAAA6J,GACAC,GAAA,KACIS,EAAAlU,KAAA,CACI6P,KAAAhY,KAAAiV,MAAApP,GACA+V,SAAAA,KAKhBS,EAAAvW,OAAA,IACI9F,KAAAiW,WAAAoG,EAAAjd,EAAAiC,QAAAkb,eAAA,EAAAF,EAAAvW,SAAA,KACA9F,KAAA2T,OAAA7R,QAAA,EACA9B,KAAA2T,OAAAzR,SAAAlC,KAAAiW,WAAAvU,KAAAQ,WAIA4Q,EAAA7R,UAAAqW,cAAA,WACJtX,KAAA8V,SAAA,EACA9V,KAAA0T,WAAA0D,WAAA,EACApX,KAAA2T,OAAA7R,QAAA,EACA9B,KAAAiT,SAAAnR,QAAA,EACA9B,KAAAmW,0BAAA,EACAnW,KAAAiW,WAAA,MAGInD,EAAA7R,UAAAwX,UAAA,WAEJ,IADA,IAAAvY,EAAA,KACA2F,EAAA,EAAAA,EAAA7F,KAAAgV,QAAAlP,OAAAD,IACI,IAAA7F,KAAAgV,QAAAnP,GAAAnE,KAAAI,OAAA,CACI5B,EAAAF,KAAAgV,QAAAnP,GACA,MAGR,GAAA,MAAA3F,EAAA,CACI,IAAAwB,EAAAlC,GAAAwH,YAAAhH,KAAAmT,gBACAzR,EAAAyF,OAAAnH,KAAAmT,eAAAhM,OACAjH,EAAAwB,EAAAkJ,aAAAyH,EAAAhR,SACArB,KAAAgV,QAAA7M,KAAAjI,GAIJ,OAFAA,EAAAwB,KAAAI,QAAA,EACA5B,EAAAG,cAAA,EACAH,GAGI4S,EAAA7R,UAAAmX,iCAAA,SAAAL,GACJ,IAAA,IAAAlS,EAAA,EAAAA,EAAA7F,KAAAgV,QAAAlP,OAAAD,IACI7F,KAAAgV,QAAAnP,GAAAnE,KAAAI,QAAA9B,KAAAgV,QAAAnP,GAAAxF,cAAA,GAAAL,KAAAgV,QAAAnP,GAAAxF,cAAA0X,IACI/X,KAAAgV,QAAAnP,GAAAxF,cAAA,IAKLyS,EAAA7R,UAAAoX,cAAA,WAEH,IADA,IAAAmE,EAAA,KACA3W,EAAA,EAAAA,EAAA7F,KAAAkV,YAAApP,OAAAD,IACI,IAAA7F,KAAAkV,YAAArP,GAAAnE,KAAAI,OAAA,CACI0a,EAAAxc,KAAAkV,YAAArP,GACA,MAGR,GAAA,MAAA2W,EAAA,CACI,IAAA9a,EAAAlC,GAAAwH,YAAAhH,KAAAwT,oBACA9R,EAAAyF,OAAAnH,KAAAwT,mBAAArM,OACAqV,EAAA9a,EAAAkJ,aAAA2H,EAAAlR,SACArB,KAAAkV,YAAA/M,KAAAqU,GAIJ,OAFAA,EAAA9a,KAAAI,QAAA,EACA0a,EAAA9a,KAAA+a,gBAAAD,EAAA9a,KAAAyF,OAAAoC,SAAAzD,OAAA,GACA0W,GAGI1J,EAAA7R,UAAAgX,YAAA,SAAA7X,GACJ,IAAA,IAAAyF,EAAA,EAAAA,EAAA7F,KAAAiV,MAAAnP,OAAAD,IACI,GAAA7F,KAAAiV,MAAApP,GAAAzF,IAAAA,EAA4B,OAAAJ,KAAAiV,MAAApP,GAEhC,OAAA,MAGIiN,EAAA7R,UAAAyb,cAAA,SAAAtc,GACJ,GAAAA,GAAA,EAAa,OAAA,KACb,IAAA,IAAAyF,EAAA,EAAAA,EAAA7F,KAAAoT,QAAAtN,OAAAD,IACI,GAAA7F,KAAAoT,QAAAvN,GAAAzF,GAAA,GAAAJ,KAAAoT,QAAAvN,GAAAzF,IAAAA,EAAwD,OAAAJ,KAAAoT,QAAAvN,GAE5D,OAAA,MAGIiN,EAAA7R,UAAA6W,oBAAA,SAAAhL,GACJ,GAAA,MAAAA,GAAA,IAAAA,EAAwC,OAAA,KACxC,IAAA,IAAAjH,EAAA,EAAAA,EAAA7F,KAAAoT,QAAAtN,OAAAD,IACI,GAAA,MAAA7F,KAAAoT,QAAAvN,GAAAiH,UAAA,IAAA9M,KAAAoT,QAAAvN,GAAAiH,UAAA9M,KAAAoT,QAAAvN,GAAAiH,UAAAA,EAAgH,OAAA9M,KAAAoT,QAAAvN,GAEpH,OAAA,MAGGiN,EAAA7R,UAAAiG,kBAAA,SAAAd,GACH,IAAAuW,EAAA,GACA,OAAAvW,GACI,KAAA,EACIuW,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,EAGA,KAAA,EACIA,EAAA,QACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SACA,MACJ,KAAA,GACIA,EAAA,SAGR,IAAA,IAAA9W,EAAA,EAAAA,EAAA7F,KAAAqT,UAAAvN,OAAAD,IACI,GAAA,MAAA7F,KAAAqT,UAAAxN,GAAA8W,MAAA,IAAA3c,KAAAqT,UAAAxN,GAAA8W,MAAA3c,KAAAqT,UAAAxN,GAAA8W,MAAAA,EACI,OAAA3c,KAAAqT,UAAAxN,GAGR,OAAA7F,KAAAqT,UAAA,IAGGP,EAAA7R,UAAA2b,YAAA,WACH5c,KAAA6Z,UAAA,IAGG/G,EAAA7R,UAAA4b,SAAA,WACH7c,KAAAyV,OAAAzV,KAAAuV,QAAAzP,OAAA,IACI9F,KAAAyV,SACAzV,KAAAiI,SAAA+I,OAAArM,OAAAvF,EAAAiC,QAAAsW,gBAAA3X,KAAAuV,QAAAvV,KAAAyV,SACAzV,KAAAiI,SAAAwJ,OAAAzR,KAAAyV,QACA5C,EAAAxR,QAAAmW,SAAAxX,KAAAyT,WAAAzT,KAAAwV,YAAAxV,KAAAyV,QAAA,MAID3C,EAAA7R,UAAA6b,WAAA,WACH9c,KAAAyV,OAAA,IACIzV,KAAAyV,SACAzV,KAAAiI,SAAA+I,OAAArM,OAAAvF,EAAAiC,QAAAsW,gBAAA3X,KAAAuV,QAAAvV,KAAAyV,SACAzV,KAAAiI,SAAAwJ,OAAAzR,KAAAyV,QACA5C,EAAAxR,QAAAmW,SAAAxX,KAAAyT,WAAAzT,KAAAwV,YAAAxV,KAAAyV,QAAA,MAID3C,EAAA7R,UAAA0K,QAAA,WAAP,IAAA7L,EAAAE,KACI8J,EAAAzI,QAAA4F,SAAAqE,cAAA4D,MAAA,8DAAA,SAAA1D,GACIA,GACI1L,EAAA+X,UAKL/E,EAAA7R,UAAA8b,aAAA,WAAP,IAAAjd,EAAAE,KACIA,KAAA+V,aAAA,EACA/V,KAAA6T,aAAAmG,SAAA,EACA,IAAAgD,EAAAvG,EAAAnV,cAAA,iBACAtB,KAAA8T,kBAAA0H,SAAA,EACAxb,KAAAsW,OAAAnO,KAAA3I,GAAAyd,MAAAjd,KAAA8T,mBAAAoJ,GAAAF,EAAA,CAAAxB,SAAA,IAAA2B,KAAA,WACIrd,EAAAiW,aAAA,EACAjW,EAAAsW,0BAAAK,EAAAnV,cAAA,kBACAxB,EAAAiU,iBAAApP,OAAA7E,EAAAsW,0BAAA,IACAtW,EAAAiU,iBAAArS,KAAAI,QAAA,IACJ6U,UAGG7D,EAAA7R,UAAAmc,cAAA,WAAP,IAAAtd,EAAAE,KACIA,KAAA8V,SAAA,EACA9V,KAAAgW,cAAA,EACAhW,KAAAgU,cAAAgG,SAAA,EACA,IAAAgD,EAAAvG,EAAAnV,cAAA,eACAtB,KAAAiU,mBAAAuH,SAAA,EACAxb,KAAAsW,OAAAnO,KAAA3I,GAAAyd,MAAAjd,KAAAiU,oBAAAiJ,GAAAF,EAAA,CAAAxB,SAAA,IAAA2B,KAAA,WACIrd,EAAAkW,cAAA,EACAlW,EAAAmW,WAAA,KACAnW,EAAA6T,OAAA7R,QAAA,EACAhC,EAAAuW,2BAAAI,EAAAnV,cAAA,eACAxB,EAAAoU,kBAAAvP,OAAA7E,EAAAuW,2BAAA,IACAvW,EAAAoU,kBAAAxS,KAAAI,QAAA,EACAhC,EAAAmV,MAAAmE,QAAA,SAAAxX,GACIA,EAAAgJ,aAAApL,GAAAoR,QAAAoJ,SAAA,IAEJla,EAAAgW,QAAAhW,EAAA4T,WAAA0D,UACAtX,EAAAmT,SAAAnR,QAAAhC,EAAA4T,WAAA0D,YACJT,SAEA3W,KAAAiT,SAAAnR,QAAA,EACA9B,KAAAiV,MAAAmE,QAAA,SAAAxX,GACIA,EAAAgJ,aAAApL,GAAAoR,QAAAoJ,SAAA,EACApY,EAAAF,KAAA2b,IAAA,SACAzb,EAAAF,KAAAkV,GAAA,QAAA,WACI9W,EAAAmW,WAAArU,EACA9B,EAAA6T,OAAA7R,QAAA,OAKJgR,EAAA7R,UAAA4W,KAAA,WAAR,IAAA/X,EAAAE,KACIA,KAAAmV,cAAA,EACAnV,KAAAsX,gBACAxN,EAAAzI,QAAA4F,SAAAiG,aAAA,GACAnH,EAAA1E,QAAA4J,cAAA0P,QAAA,OAAA,KAAA,WACI7Q,EAAAzI,QAAA4F,SAAAiG,aAAA,GACApN,EAAA2a,YACA3a,EAAA0F,MAAA,GACA1F,EAAAiT,MAAAnI,aAAA6H,EAAApR,SAAAmE,MAAA,IACJxF,OAGG8S,EAAA7R,UAAAqc,qBAAA,WACHtd,KAAAmU,cAAA3O,MAAA,EAAA,gBAAA,WAGGsN,EAAA7R,UAAAsc,oBAAA,WACHvd,KAAAoU,aAAA5O,MAAA,EAAA,gBAAA,WAGGsN,EAAA7R,UAAAuc,qBAAA,WACHxd,KAAAqU,cAAA7O,MAAA,EAAA,gBAAA,WAGGsN,EAAA7R,UAAAuE,KAAA,SAAAC,EAAA6P,GACH,QADyB,IAAAA,IAAAA,EAAA,GACzB7P,EAAA,CACI,GAAA,MAAAgR,EAAAnV,cAGI,OAFAtB,KAAA+S,MAAAnI,aAAA6H,EAAApR,SAAAmE,MAAA,QACAsE,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,gDAGJhP,KAAA0B,KAAAI,QAAA,EACA9B,KAAAgT,QAAAlR,QAAA,EACA9B,KAAAsV,OAAAA,EAEAtV,KAAAsX,gBACAtX,KAAAsU,UAAA9O,MAAA,GAEAxF,KAAAuV,QAAAzP,OAAA,EACA9F,KAAAuV,QAAApN,KAAAsO,EAAAnV,cAAA,YAAA,QAAAmV,EAAAnV,cAAA,qBAAAtB,KAAAsV,SACAtV,KAAAuV,QAAApN,KAAAsO,EAAAnV,cAAA,YAAA,QAAAmV,EAAAnV,cAAA,qBAAAtB,KAAAsV,SACAtV,KAAAuV,QAAApN,KAAAsO,EAAAnV,cAAA,YAAA,QAAAmV,EAAAnV,cAAA,qBAAAtB,KAAAsV,SACAtV,KAAAuV,QAAApN,KAAAsO,EAAAnV,cAAA,YAAA,QAAAmV,EAAAnV,cAAA,qBAAAtB,KAAAsV,SACAtV,KAAA2V,cAAA,EAAAc,EAAAnV,cAAA,UACAtB,KAAA4V,kBAAA5V,KAAA2V,cAAAc,EAAAnV,cAAA,aACAtB,KAAAyK,YAEAzK,KAAAuU,WAAAzS,QACI9B,KAAAuU,WAAA3J,aAAA+H,EAAAtR,SAAAoc,UAEJzd,KAAA0B,KAAAI,QAAA,GA1kCMgR,EAAA7L,SAAA,KACA6L,EAAAxR,cAAA,KAGdoC,EAAA,CADC/D,EAAAH,GAAAmE,OACqBmP,EAAA7R,UAAA,aAAA,GAEtByC,EAAA,CADC/D,EAAAH,GAAAmE,OACuBmP,EAAA7R,UAAA,eAAA,GAExByC,EAAA,CADC/D,EAAAH,GAAAmE,OACwBmP,EAAA7R,UAAA,gBAAA,GAEzByC,EAAA,CADC/D,EAAA,CAAAH,GAAAqR,eACsCiC,EAAA7R,UAAA,uBAAA,GAEvCyC,EAAA,CADC/D,EAAAH,GAAAmE,OAC8BmP,EAAA7R,UAAA,sBAAA,GAE/ByC,EAAA,CADC/D,EAAA,CAAAyS,EAAA/Q,WACsByR,EAAA7R,UAAA,eAAA,GAEvByC,EAAA,CADC/D,EAAA,CAAAH,GAAAmE,QACyBmP,EAAA7R,UAAA,iBAAA,GAE1ByC,EAAA,CADC/D,EAAAH,GAAAmE,OACyBmP,EAAA7R,UAAA,iBAAA,GAE1ByC,EAAA,CADC/D,EAAAH,GAAAmE,OAC4BmP,EAAA7R,UAAA,oBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAAmE,OACkCmP,EAAA7R,UAAA,0BAAA,GAEnCyC,EAAA,CADC/D,EAAAH,GAAA0F,QAC2B4N,EAAA7R,UAAA,kBAAA,GAE5ByC,EAAA,CADC/D,EAAAH,GAAAke,SAC4B5K,EAAA7R,UAAA,kBAAA,GAE7ByC,EAAA,CADC/D,EAAAH,GAAAmE,OACsBmP,EAAA7R,UAAA,cAAA,GAEvByC,EAAA,CADC/D,EAAAH,GAAAmE,OACyBmP,EAAA7R,UAAA,iBAAA,GAG1ByC,EAAA,CADC/D,EAAAH,GAAAoR,SAC8BkC,EAAA7R,UAAA,oBAAA,GAE/ByC,EAAA,CADC/D,EAAAH,GAAAme,cACwC7K,EAAA7R,UAAA,yBAAA,GAEzCyC,EAAA,CADC/D,EAAAH,GAAA0F,QACiC4N,EAAA7R,UAAA,wBAAA,GAGlCyC,EAAA,CADC/D,EAAAH,GAAAoR,SAC+BkC,EAAA7R,UAAA,qBAAA,GAEhCyC,EAAA,CADC/D,EAAAH,GAAAme,cACyC7K,EAAA7R,UAAA,0BAAA,GAE1CyC,EAAA,CADC/D,EAAAH,GAAA0F,QACkC4N,EAAA7R,UAAA,yBAAA,GAInCyC,EAAA,CADC/D,EAAA6S,EAAAnR,UACmCyR,EAAA7R,UAAA,qBAAA,GAEpCyC,EAAA,CADC/D,EAAAiT,EAAAvR,UACiCyR,EAAA7R,UAAA,oBAAA,GAElCyC,EAAA,CADC/D,EAAAiT,EAAAvR,UACkCyR,EAAA7R,UAAA,qBAAA,GAEnCyC,EAAA,CADC/D,EAAA+S,EAAArR,UAC2ByR,EAAA7R,UAAA,iBAAA,GAE5ByC,EAAA,CADC/D,EAAAH,GAAAmE,OAC0BmP,EAAA7R,UAAA,kBAAA,GAE3ByC,EAAA,CADC/D,EAAAH,GAAA0F,QACwB4N,EAAA7R,UAAA,eAAA,GAEzByC,EAAA,CADC/D,EAAAH,GAAA0F,QAC8B4N,EAAA7R,UAAA,qBAAA,GAK/ByC,EAAA,CADC/D,EAAA,CAAAyG,KAAA5G,GAAAoe,aAC+B9K,EAAA7R,UAAA,kBAAA,GAGhCyC,EAAA,CADC/D,EAAA,CAAAyG,KAAA5G,GAAAoe,aAC8B9K,EAAA7R,UAAA,iBAAA,GAG/ByC,EAAA,CADC/D,EAAA,CAAAyG,KAAA5G,GAAAoe,aACgC9K,EAAA7R,UAAA,mBAAA,GAGjCyC,EAAA,CADC/D,EAAA,CAAAyG,KAAA5G,GAAAoe,aAC4B9K,EAAA7R,UAAA,eAAA,GAG7ByC,EAAA,CADC/D,EAAAH,GAAAmE,OACwBmP,EAAA7R,UAAA,gBAAA,GAEzByC,EAAA,CADC/D,EAAAH,GAAAmE,OACwBmP,EAAA7R,UAAA,gBAAA,GAjFRwV,EAAA/S,EAAA,CADpBhE,GACoBoT,GAArB,CAAAtT,GAAAoE,WAAqBC,EAAAxC,QAAAyR,okDClBrB,IAAAlJ,EAAAvK,EAAA,6BACAwK,EAAAxK,EAAA,qCACAyK,EAAAzK,EAAA,6CACA0K,EAAA1K,EAAA,2DACAwe,EAAAxe,EAAA,gDACAD,EAAAC,EAAA,+CACA2K,EAAA3K,EAAA,iEACA0G,EAAA1G,EAAA,kEAGME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNme,EAAA,WAAA,SAAAA,IAEI9d,KAAAuK,WAAA,KAEAvK,KAAA+d,QAAA,KAEA/d,KAAAge,aAAA,KAEQhe,KAAAie,MAAA,KAESje,KAAAke,OAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KA6CrB,OA3CWJ,EAAA7c,UAAA0V,MAAA,SAAAsH,GAAP,IAAAne,EAAAE,KACIA,KAAAie,MAAAA,EACAje,KAAA+d,QAAArc,KAAAkV,GAAA,oBAAA,WACI,IAAAuH,EAAA/e,EAAAiC,QAAA+c,YAAAte,EAAAie,QAAApZ,QACA7E,EAAAie,QAAApZ,OAAAvF,EAAAiC,QAAAuD,aAAAuZ,KAEJ,IAAS,IACDE,EADCC,EAAA,SAAAzY,GACDwY,EAAAE,EAAAP,aAAAzU,SAAA1D,GACJ,IAAA+S,EAAA2F,EAAAL,OAAArY,GACAwY,EAAAG,uBAAAhf,GAAA0F,OAAAP,OAAAvF,EAAAiC,QAAAuD,aAAAgU,GACAyF,EAAAzH,GAAA,QAAA,WACI9W,EAAAie,QAAApZ,OAAAvF,EAAAiC,QAAAuD,aAAAgU,MAJA2F,EAAAve,KADR6F,EAAA,EAAAA,EAAA7F,KAAAge,aAAAS,cAAA5Y,IAASyY,EAAAzY,IAUNiY,EAAA7c,UAAAyd,OAAA,WAAP,IAAA5e,EAAAE,KACIoE,EAAAhF,EAAAiC,QAAA+c,YAAApe,KAAA+d,QAAApZ,QACAP,GAAA,EACI0F,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,sEAGJlF,EAAAzI,QAAA4F,SAAAiG,aAAA,GACAnH,EAAA1E,QAAA4J,cAAA0P,QAAA,cAAA,CAAAgE,MAAAva,GAAA,SAAA+H,GACIrC,EAAAzI,QAAA4F,SAAAiG,aAAA,GAEAf,EAAA,IAIAvC,EAAAvI,QAAAwJ,MAAAC,SAAAqB,EAAA,QACApC,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA2J,kBACAlB,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,iCACAlP,EAAA8e,QAEA5U,EAAA3I,QAAA4J,cAAAI,KAAA,IAAAxB,EAAAxI,QAAAwd,iBARI/U,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,uEASRhP,KAAAie,SAGGH,EAAA7c,UAAA2d,MAAA,WACH5e,KAAA+d,QAAApZ,OAAA,GACA3E,KAAAuK,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAwB,OAnDJ3I,EAAA,CADC/D,EAAAH,GAAA0F,QAC2B4Y,EAAA7c,UAAA,kBAAA,GAE5ByC,EAAA,CADC/D,EAAAH,GAAAsf,UAC0BhB,EAAA7c,UAAA,eAAA,GAE3ByC,EAAA,CADC/D,EAAAH,GAAAmE,OAC4Bma,EAAA7c,UAAA,oBAAA,GANpByC,EAAA,CADZhE,EAAA,gCACYoe,GAAb,GAAaja,EAAAia,UAAAA,EA0Db,IAAAiB,EAAA,WAAA,SAAAA,IAEI/e,KAAAuK,WAAA,KAEAvK,KAAA+d,QAAA,KAEA/d,KAAAge,aAAA,KAEQhe,KAAAie,MAAA,KAESje,KAAAke,OAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KA6CrB,OA3CWa,EAAA9d,UAAA0V,MAAA,SAAAsH,GAAP,IAAAne,EAAAE,KACIA,KAAAie,MAAAA,EACAje,KAAA+d,QAAArc,KAAAkV,GAAA,oBAAA,WACI,IAAAuH,EAAA/e,EAAAiC,QAAA+c,YAAAte,EAAAie,QAAApZ,QACA7E,EAAAie,QAAApZ,OAAAvF,EAAAiC,QAAAuD,aAAAuZ,KAEJ,IAAS,IACDE,EADCW,EAAA,SAAAnZ,GACDwY,EAAAY,EAAAjB,aAAAzU,SAAA1D,GACJ,IAAA+S,EAAAqG,EAAAf,OAAArY,GACAwY,EAAAG,uBAAAhf,GAAA0F,OAAAP,OAAAvF,EAAAiC,QAAAuD,aAAAgU,GACAyF,EAAAzH,GAAA,QAAA,WACI9W,EAAAie,QAAApZ,OAAAvF,EAAAiC,QAAAuD,aAAAgU,MAJAqG,EAAAjf,KADR6F,EAAA,EAAAA,EAAA7F,KAAAge,aAAAS,cAAA5Y,IAASmZ,EAAAnZ,IAUNkZ,EAAA9d,UAAAyd,OAAA,WAAP,IAAA5e,EAAAE,KACIoE,EAAAhF,EAAAiC,QAAA+c,YAAApe,KAAA+d,QAAApZ,QACAP,GAAA,EACI0F,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,sEAGJlF,EAAAzI,QAAA4F,SAAAiG,aAAA,GACAnH,EAAA1E,QAAA4J,cAAA0P,QAAA,cAAA,CAAAgE,OAAAva,GAAA,SAAA+H,GACIrC,EAAAzI,QAAA4F,SAAAiG,aAAA,GAEAf,EAAA,IAIAvC,EAAAvI,QAAAwJ,MAAAC,SAAAqB,EAAA,QACApC,EAAA1I,QAAAgK,KAAAtB,EAAA1I,QAAA2J,kBACAlB,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,iCACAlP,EAAA8e,QAEA5U,EAAA3I,QAAA4J,cAAAI,KAAA,IAAAxB,EAAAxI,QAAAwd,iBARI/U,EAAAzI,QAAA4F,SAAAwE,YAAAuD,QAAA,uEASRhP,KAAAie,SAGGc,EAAA9d,UAAA2d,MAAA,WACH5e,KAAA+d,QAAApZ,OAAA,GACA3E,KAAAuK,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAC,WAnDJpH,EAAA,CADC/D,EAAAH,GAAA0F,QAC2B6Z,EAAA9d,UAAA,kBAAA,GAE5ByC,EAAA,CADC/D,EAAAH,GAAAsf,UAC0BC,EAAA9d,UAAA,eAAA,GAE3ByC,EAAA,CADC/D,EAAAH,GAAAmE,OAC4Bob,EAAA9d,UAAA,oBAAA,GANpByC,EAAA,CADZhE,EAAA,iCACYqf,GAAb,GAAalb,EAAAkb,WAAAA,EA0Db,IAAAG,EAAA,SAAArf,GAAA,SAAAqf,IAAA,IAAApf,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEIF,EAAAqf,KAAA,KAEArf,EAAAsf,YAAA,KAEAtf,EAAAuf,UAAA,KAEAvf,EAAAwf,WAAA,KAEQxf,EAAAyf,eAAA,IA0DZ,OApE+Cve,EAAAke,EAAArf,GAY3Cqf,EAAAje,UAAA0V,MAAA,WACI,IADJ,IAAA7W,EAAAE,KACawf,EAAA,SAAA3Z,GACL4Z,EAAAN,KAAAO,YAAA7Z,GAAAnE,KAAAkV,GAAA,SAAA,WACI9W,EAAAyf,eAAA1Z,EACA/F,EAAA6f,yBAHR9Z,EAAA,EAAAA,EAAA7F,KAAAmf,KAAAO,YAAA5Z,OAAAD,IAAS2Z,EAAA3Z,GAOTkE,EAAA1I,QAAA0J,SAAAhB,EAAA1I,QAAA2J,iBAAA,WACIlL,EAAAuf,UAAA9U,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAwB,MACAvM,EAAAwf,WAAA/U,WAAA5F,OAAAvF,EAAAiC,QAAAuD,aAAAgF,EAAAvI,QAAAwJ,MAAAC,WACJ9K,MAEAA,KAAAqf,UAAA1I,MAAA3W,MACAA,KAAAsf,WAAA3I,MAAA3W,OAGJkf,EAAAje,UAAAuE,KAAA,WACI3F,EAAAoB,UAAAuE,KAAA2X,KAAAnd,MACAA,KAAAuf,eAAA,EACAvf,KAAAmf,KAAAO,YAAA1f,KAAAuf,gBAAAnI,WAAA,EACApX,KAAA2f,gBAGIT,EAAAje,UAAA0e,aAAA,WACJ,IAAA,IAAA9Z,EAAA,EAAAA,EAAA7F,KAAAof,YAAAX,cAAA5Y,IACI7F,KAAAof,YAAA7V,SAAA1D,GAAA/D,OAAA+D,GAAA7F,KAAAuf,eAEJ,IAAA,IAAAjF,EAAA,EAAAA,EAAAta,KAAAmf,KAAAO,YAAA5Z,OAAAwU,IACIta,KAAAmf,KAAAO,YAAApF,GAAA5Y,KAAA8c,uBAAAhf,GAAAogB,cAAAC,MAAAvF,GAAAta,KAAAuf,eAAA/f,GAAAsgB,MAAAC,MAAAC,QAAA,WAAAxgB,GAAAsgB,MAAAC,MAAAC,QAAA,WAEJ,OAAAhgB,KAAAuf,gBACI,KAAA,EACIvf,KAAAqf,UAAAT,QACA,MACJ,KAAA,EACI5e,KAAAsf,WAAAV,UAKLM,EAAAje,UAAAgf,gBAAA,WACHjgB,KAAAqf,UAAAX,UAGGQ,EAAAje,UAAAif,iBAAA,WACHlgB,KAAAsf,WAAAZ,UAGGQ,EAAAje,UAAAkf,eAAA,WACHngB,KAAAqf,UAAAtB,QAAApZ,OAAA,KAGGua,EAAAje,UAAAmf,gBAAA,WACHpgB,KAAAsf,WAAAvB,QAAApZ,OAAA,KAhEJjB,EAAA,CADC/D,EAAAH,GAAA6gB,kBAC+BnB,EAAAje,UAAA,YAAA,GAEhCyC,EAAA,CADC/D,EAAAH,GAAAmE,OAC2Bub,EAAAje,UAAA,mBAAA,GAE5ByC,EAAA,CADC/D,EAAAme,IAC2BoB,EAAAje,UAAA,iBAAA,GAE5ByC,EAAA,CADC/D,EAAAof,IAC6BG,EAAAje,UAAA,kBAAA,GARbyC,EAAA,CADpBhE,GACoBwf,GAArB,CAAArB,EAAAxc,SAAqBwC,EAAAxC,QAAA6d,wzCCjIrB,IAAArB,EAAAxe,EAAA,gDACAC,EAAAD,EAAA,oBAEME,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN2gB,EAAA,SAAAzgB,GAAA,SAAAygB,IAAA,IAAAxgB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEIF,EAAAygB,KAAA,KAEAzgB,EAAA0gB,aAAA,KAEQ1gB,EAAA2gB,MAAA,GAEA3gB,EAAA4gB,YAAA,CACJC,EAAA,CAAA,SAAA,GACAC,EAAA,CAAA,WAAA,GACAC,EAAA,CAAA,cAAA,GACAC,EAAA,CAAA,UAAA,GACAC,EAAA,CAAA,UAAA,GACAC,EAAA,CAAA,aAAA,GACAC,EAAA,CAAA,UAAA,GACAC,EAAA,CAAA,QAAA,GACAC,EAAA,CAAA,YAAA,GACAC,EAAA,CAAA,SAAA,GACAC,GAAA,CAAA,YAAA,GACAC,GAAA,CAAA,aAAA,GACAC,GAAA,CAAA,aAAA,IACAC,GAAA,CAAA,YAAA,GACAC,GAAA,CAAA,SAAA,GACAC,GAAA,CAAA,UAAA,IACAC,GAAA,CAAA,aAAA,IACAC,GAAA,CAAA,eAAA,IACAC,GAAA,CAAA,WAAA,IACAC,GAAA,CAAA,SAAA,IACAC,GAAA,CAAA,SAAA,IACAC,GAAA,CAAA,SAAA,IACAC,GAAA,CAAA,SAAA,IACAC,GAAA,CAAA,SAAA,IACAC,GAAA,CAAA,SAAA,OAoCR,OArEwCnhB,EAAAsf,EAAAzgB,GAoCpCygB,EAAArf,UAAAuE,KAAA,WACI3F,EAAAoB,UAAAuE,KAAA2X,KAAAnd,MACAA,KAAAwgB,aAAA1e,QAAA,GAGJwe,EAAArf,UAAAmhB,UAAA,WAEI,GADAviB,EAAAoB,UAAAmhB,UAAAjF,KAAAnd,MACA,MAAAV,EAAA+B,QAAAC,cACA,IAAA,IAAAyW,KAAA/X,KAAA0gB,YAAA,CACI,IAAA2B,EAAAriB,KAAA0gB,YAAA3I,GAAA,GACAhV,EAAA/C,KAAA0gB,YAAA3I,GAAA,GACAuK,EAAAhjB,EAAA+B,QAAAC,cAAA,iBAAA+gB,GAEA3gB,EAAAlC,GAAAwH,YAAAhH,KAAAwgB,cACA9e,EAAAyF,OAAAnH,KAAAugB,KACA7e,EAAAI,QAAA,EAEA,IAAAkW,EAAAxY,GAAAwH,YAAA1H,EAAA+B,QAAA4F,SAAAC,kBAAA9F,OAAA2W,KACAC,EAAA7Q,OAAAzF,EAAA6gB,eAAA,cACAvK,EAAAjV,MAAAA,EACAiV,EAAArW,MAAA,GAEAD,EAAA6gB,eAAA,aAAA3X,aAAApL,GAAA0F,OAAAP,QAAA2d,EAAA,OAAA,KAAAzb,WACA7G,KAAAygB,MAAAtY,KAAAzG,KAIR4e,EAAArf,UAAAwc,QAAA,WACIzd,KAAAygB,MAAArH,QAAA,SAAAxX,GACIA,EAAAkZ,qBAEJjb,EAAAoB,UAAAwc,QAAAN,KAAAnd,OAjEJ0D,EAAA,CADC/D,EAAAH,GAAAmE,OACoB2c,EAAArf,UAAA,YAAA,GAErByC,EAAA,CADC/D,EAAAH,GAAAmE,OAC4B2c,EAAArf,UAAA,oBAAA,GAJZyC,EAAA,CADpBhE,GACoB4gB,GAArB,CAAAzC,EAAAxc,SAAqBwC,EAAAxC,QAAAif","sourcesContent":["import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport Play from \"./ShootFish.Play\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Bullet extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    bullet: cc.Node = null;\r\n    @property(cc.Node)\r\n    fishNet: cc.Node = null;\r\n\r\n    public id: string = \"\";\r\n    public targetFishId = -1;\r\n\r\n    private readonly worldSize: cc.Size = cc.size(1280, 720);\r\n    private readonly exploreDuration: number = 0.8;\r\n\r\n    private vX = 0;\r\n    private vY = 0;\r\n    private collisionCount = 4;\r\n    isExplored = false;\r\n    isExploring = false;\r\n    private curExplore = 0;\r\n    private circle: SAT.Circle = null;\r\n\r\n    public run() {\r\n        let speed = Number(Play.SERVER_CONFIG['BulletSpeed']);\r\n        if(isNaN(speed) || speed == 0) speed = 1400;\r\n        let v = Utils.degreesToVec2(this.node.angle);\r\n        this.vX = v.x * speed;\r\n        this.vY = v.y * speed;\r\n        this.collisionCount = 4;\r\n        this.isExplored = false;\r\n        this.isExploring = false;\r\n        this.bullet.active = true;\r\n        this.fishNet.active = false;\r\n\r\n        this.circle = new SAT.Circle(new SAT.Vector(this.node.position.x, this.node.position.y), Number(Play.SERVER_CONFIG['BulletRadius']));\r\n    }\r\n\r\n    public updateRealTime(dt: number) {\r\n        if (this.isExplored) return;\r\n        if (this.isExploring) {\r\n            this.curExplore -= dt;\r\n            if (this.curExplore <= 0) {\r\n                this.isExplored = true;\r\n                this.node.active = false;\r\n            }\r\n            return;\r\n        }\r\n        var newPos = this.node.position;\r\n        newPos.x += this.vX * dt;\r\n        newPos.y += this.vY * dt;\r\n        this.node.position = newPos;\r\n\r\n        if (Math.abs(newPos.x) > this.worldSize.width / 2) {\r\n            this.vX *= -1;\r\n\r\n            var angle = Math.atan2(this.vY, this.vX) * Utils.Rad2Deg;\r\n            this.node.angle = angle;\r\n\r\n            newPos.x = (newPos.x < 0 ? -1 : 1) * this.worldSize.width / 2;\r\n            this.node.position = newPos;\r\n\r\n            this.collisionCount--;\r\n        } else if (Math.abs(newPos.y) > this.worldSize.height / 2) {\r\n            this.vY *= -1;\r\n\r\n            var angle = Math.atan2(this.vY, this.vX) * Utils.Rad2Deg;\r\n            this.node.angle = angle;\r\n\r\n            newPos.y = (newPos.y < 0 ? -1 : 1) * this.worldSize.height / 2;\r\n            this.node.position = newPos;\r\n\r\n            this.collisionCount--;\r\n        }\r\n\r\n        this.circle.pos = new SAT.Vector(this.node.position.x, this.node.position.y);\r\n\r\n        if (this.collisionCount < 0) {\r\n            this.node.active = false;\r\n        }\r\n    }\r\n\r\n    public explore() {\r\n        this.isExploring = true;\r\n        this.curExplore = this.exploreDuration;\r\n        this.bullet.active = false;\r\n        this.fishNet.active = true;\r\n        this.fishNet.opacity = 0;\r\n        this.fishNet.angle = 0;\r\n        this.fishNet.scale = 0;\r\n\r\n        this.fishNet.stopAllActions();\r\n\r\n        this.fishNet.runAction(cc.spawn(\r\n            cc.sequence(cc.scaleTo(0.3, 1.1), cc.delayTime(0.07), cc.scaleTo(0.3, 1)),\r\n            cc.fadeIn(0.1),\r\n            cc.sequence(cc.delayTime(0.25), cc.rotateTo(0.5, 35)),\r\n            cc.sequence(cc.delayTime(0.4), cc.fadeOut(0.3))\r\n        ));\r\n    }\r\n\r\n    public getCircle(): SAT.Circle {\r\n        return this.circle;\r\n    }\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CoinEffect extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n    @property(sp.Skeleton)\r\n    coinExplore: sp.Skeleton = null;\r\n    @property(cc.Node)\r\n    coin0: cc.Node = null;\r\n    @property(cc.Node)\r\n    coin1: cc.Node = null;\r\n    @property(cc.Node)\r\n    coin2: cc.Node = null;\r\n\r\n    public run(coin: number, startPos: cc.Vec2, toPos: cc.Vec2) {\r\n        this.coinExplore.node.position = startPos;\r\n\r\n        this.coin0.stopAllActions();\r\n        this.coin0.position = startPos.clone().add(cc.v2(Utils.randomRange(80, -80), Utils.randomRange(80, -80)));\r\n        this.coin0.scale = 0;\r\n\r\n        this.coin1.stopAllActions();\r\n        this.coin1.position = startPos.clone().add(cc.v2(Utils.randomRange(80, -80), Utils.randomRange(80, -80)));\r\n        this.coin1.scale = 0;\r\n\r\n        this.coin2.stopAllActions();\r\n        this.coin2.position = startPos.clone().add(cc.v2(Utils.randomRange(80, -80), Utils.randomRange(80, -80)));\r\n        this.coin2.scale = 0;\r\n\r\n        this.lblCoin.string = Utils.formatNumber(coin);\r\n        this.lblCoin.node.position = startPos;\r\n        this.lblCoin.node.stopAllActions();\r\n        this.lblCoin.node.opacity = 0;\r\n        this.lblCoin.node.scale = 0;\r\n        this.lblCoin.node.runAction(cc.sequence(\r\n            cc.spawn(cc.fadeIn(0.2), cc.scaleTo(0.2, 1)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 5)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -5)),\r\n            cc.fadeOut(0.15)\r\n        ));\r\n\r\n        this.coinExplore.setAnimation(0, \"Idle\", false);\r\n        this.coin0.runAction(cc.sequence(\r\n            cc.scaleTo(0.15, Utils.randomRange(0.7, 1)),\r\n            cc.delayTime(0.4),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveTo(0.7, toPos),\r\n            cc.scaleTo(0.15, 0)\r\n        ));\r\n        this.coin1.runAction(cc.sequence(\r\n            cc.scaleTo(0.15, Utils.randomRange(0.7, 1)),\r\n            cc.delayTime(0.55),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveTo(0.7, toPos),\r\n            cc.scaleTo(0.15, 0)\r\n        ));\r\n        this.coin2.runAction(cc.sequence(\r\n            cc.scaleTo(0.15, Utils.randomRange(0.7, 1)),\r\n            cc.delayTime(0.7),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, 50)),\r\n            cc.moveBy(0.1, new cc.Vec2(0, -50)),\r\n            cc.moveTo(0.7, toPos),\r\n            cc.scaleTo(0.15, 0),\r\n            cc.callFunc(() => {\r\n                this.node.active = false;\r\n            })\r\n        ));\r\n    }\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EffectBigWin extends cc.Component {\r\n\r\n    @property(sp.Skeleton)\r\n    skeleton: sp.Skeleton = null;\r\n    @property(cc.Label)\r\n    lblNickname: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n\r\n    public show(isShow: boolean, nickname: string = null, coin: number = 0){\r\n        this.node.stopAllActions();\r\n        if(isShow){\r\n            this.lblCoin.string = Utils.formatNumber(coin);\r\n            this.lblCoin.node.active = false;\r\n            this.lblNickname.string = nickname;\r\n            this.lblNickname.node.active = false;\r\n    \r\n            this.skeleton.setAnimation(0, \"animation\", false);\r\n    \r\n            this.node.active = true;\r\n            this.node.runAction(cc.sequence(\r\n                cc.delayTime(0.7),\r\n                cc.callFunc(()=>{\r\n                    this.lblNickname.node.active = true;\r\n                    this.lblCoin.node.active = true;\r\n                }),\r\n                cc.delayTime(3),\r\n                cc.callFunc(()=>{\r\n                    this.node.active = false;\r\n                })\r\n            ))\r\n        }else{\r\n            this.node.active = false;\r\n        }\r\n    }\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class EffectJackpot extends cc.Component {\r\n\r\n    @property([sp.Skeleton])\r\n    skeletons: sp.Skeleton[] = [];\r\n    @property(cc.Label)\r\n    lblNickname: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n\r\n    public show(isShow: boolean, nickname: string = null, coin: number = 0){\r\n        this.node.stopAllActions();\r\n        if(isShow){\r\n            this.lblCoin.string = Utils.formatNumber(coin);\r\n            this.lblCoin.node.active = false;\r\n            this.lblNickname.string = nickname;\r\n            this.lblNickname.node.active = false;\r\n    \r\n            for(let i = 0; i<this.skeletons.length; i++){\r\n                this.skeletons[i].setAnimation(0, \"Idle\", false);\r\n            }\r\n    \r\n            this.node.active = true;\r\n            this.node.runAction(cc.sequence(\r\n                cc.delayTime(0.7),\r\n                cc.callFunc(()=>{\r\n                    this.lblNickname.node.active = true;\r\n                    this.lblCoin.node.active = true;\r\n                }),\r\n                cc.delayTime(5),\r\n                cc.callFunc(()=>{\r\n                    this.node.active = false;\r\n                })\r\n            ))\r\n        }else{\r\n            this.node.active = false;\r\n        }\r\n    }\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\nimport Play from \"./ShootFish.Play\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Fish extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    anim: cc.Node = null;\r\n    @property(cc.Label)\r\n    lblId: cc.Label = null;\r\n\r\n    id: number;\r\n\r\n    public isDie = false;\r\n    public type = -1;\r\n\r\n    private polygon: SAT.Polygon = null;\r\n    // private lastPolygonAngle = 0;\r\n\r\n    private dataPointsUpdate = [];\r\n    private currentStep = 0;\r\n    private currentTimeStep = -1;\r\n    public currentVStepX = 0;\r\n    public currentVStepY = 0;\r\n\r\n    public setData(fishData: any) {\r\n        this.id = fishData['id'];\r\n        this.lblId.string = this.id.toString();\r\n\r\n        if (fishData[\"h\"] <= 0 || fishData['path'].length == 0) {\r\n            this.die();\r\n            if (fishData['path'].length == 0) {\r\n                //  cc.log(\"fishData path length = 0\");\r\n            }\r\n            return;\r\n        }\r\n        if (this.type != fishData[\"t\"]) {\r\n            this.type = fishData[\"t\"];\r\n            this.anim.removeAllChildren();\r\n            let animNode = cc.instantiate(Play.instance.getFishAnimByType(this.type));\r\n            animNode.parent = this.anim;\r\n\r\n            let width = fishData['H'];\r\n            let height = fishData['w'];\r\n            this.polygon = new SAT.Box(new SAT.Vector(0, 0), width, height).toPolygon();\r\n            this.polygon.translate(- width / 2, - height / 2);\r\n\r\n            this.node.width = width;\r\n            this.node.height = height;\r\n        }\r\n        // //  cc.log(\"setfishdata \" + this.id)\r\n\r\n        let dX = Number(fishData['dx']);\r\n        let dY = Number(fishData['dy']);\r\n        let posX = Number(fishData['px']);\r\n        let posY = Number(fishData['py']);\r\n        let path = fishData['path'];\r\n        let time = ShootFishNetworkClient.serverCurrentTimeMillis();\r\n\r\n        this.node.angle = Math.atan2(dY, dX) * Utils.Rad2Deg;\r\n\r\n        let dataPoints = [];\r\n        for (var i = 0; i < path.length; i++) {\r\n            var dataP = { 't': Number(path[i]['t']) };\r\n            dataP['p'] = cc.v2(Number(path[i]['x']), Number(path[i]['y']));\r\n            switch (Play.instance.mePlayer.serverPos) {\r\n                case 1:\r\n                    dataP['p'] = cc.v2(-Number(path[i]['x']), Number(path[i]['y']));\r\n                    break;\r\n                case 2:\r\n                    dataP['p'] = cc.v2(-Number(path[i]['x']), -Number(path[i]['y']));\r\n                    break;\r\n                case 3:\r\n                    dataP['p'] = cc.v2(Number(path[i]['x']), -Number(path[i]['y']));\r\n                    break;\r\n            }\r\n            dataPoints.push(dataP);\r\n        }\r\n\r\n        this.node.setPosition(posX, posY);\r\n        switch (Play.instance.mePlayer.serverPos) {\r\n            case 1:\r\n                this.node.setPosition(-posX, posY);\r\n                break;\r\n            case 2:\r\n                this.node.setPosition(-posX, -posY);\r\n                break;\r\n            case 3:\r\n                this.node.setPosition(posX, -posY);\r\n                break;\r\n        }\r\n\r\n        let isFirstPoint = true;\r\n        let point = -1;\r\n        this.dataPointsUpdate.length = 0;\r\n        for (let i = 1; i < dataPoints.length; i++) {\r\n            let data1 = dataPoints[i - 1];\r\n            let data2 = dataPoints[i];\r\n            let p1: cc.Vec2 = data1['p'];\r\n            let p2: cc.Vec2 = data2['p'];\r\n            let t1: number = data1['t'];\r\n            let t2: number = data2['t'];\r\n            if (time - t2 < 0) {\r\n                if (point < 0) point = i;\r\n                let deltaPos = p2.clone().sub(p1);\r\n                let angle = Math.atan2(deltaPos.y, deltaPos.x) * Utils.Rad2Deg;\r\n                let timeMove = 0;\r\n                if (isFirstPoint) {\r\n                    timeMove = (t2 - time) / 1000;\r\n                    isFirstPoint = false;\r\n                } else {\r\n                    timeMove = (t2 - t1) / 1000;\r\n                }\r\n                this.dataPointsUpdate.push({ 'p': p2, 't': timeMove, 'a': angle, \"tms\": t2});\r\n            }\r\n        }\r\n\r\n        this.currentTimeStep = -1;\r\n        this.currentStep = 0;\r\n        this.currentVStepX = 0;\r\n        this.currentVStepY = 0;\r\n\r\n        if (this.dataPointsUpdate.length > 0) {\r\n            this.currentTimeStep = this.dataPointsUpdate[this.currentStep]['t'];\r\n            let moveToPos: cc.Vec2 = this.dataPointsUpdate[this.currentStep]['p'];\r\n            let deltaPos = moveToPos.sub(new cc.Vec2(this.node.position.x,this.node.position.y));\r\n            this.currentVStepX = deltaPos.x / this.currentTimeStep;\r\n            this.currentVStepY = deltaPos.y / this.currentTimeStep;\r\n            this.node.angle = this.dataPointsUpdate[this.currentStep]['a'];\r\n        } else {\r\n            //  cc.log(\"can't find path: \" + this.id);\r\n        }\r\n        this.isDie = false;\r\n        this.node.active = true;\r\n    }\r\n\r\n    public updateRealTime(dt: number) {\r\n        if (!this.node.active || this.isDie) {\r\n            return;\r\n        }\r\n        if (this.dataPointsUpdate.length > 0) {\r\n            if (this.currentTimeStep >= 0) {\r\n                let pos = this.node.position;\r\n                this.currentTimeStep -= dt;\r\n                if (this.currentTimeStep < 0) {\r\n                    this.currentStep++;\r\n                    if (this.currentStep < this.dataPointsUpdate.length) {\r\n                        this.currentTimeStep = this.dataPointsUpdate[this.currentStep]['t'] + Math.abs(this.currentTimeStep);\r\n\r\n                        this.node.angle = this.dataPointsUpdate[this.currentStep]['a'];\r\n                        this.polygon.angle = this.node.angle * Utils.Deg2Rad;\r\n\r\n                        let moveToPos: cc.Vec2 = this.dataPointsUpdate[this.currentStep]['p'];\r\n                        let deltaPos = moveToPos.sub(new cc.Vec2(pos.x,pos.y));\r\n                        this.currentVStepX = deltaPos.x / this.currentTimeStep;\r\n                        this.currentVStepY = deltaPos.y / this.currentTimeStep;\r\n\r\n                        ////  cc.log(\"fish \" + this.id + \" cstep: \" + this._currentStep + \" maxStep: \" + this._dataPointsUpdate.length + \" moveToPos: \" + moveToPos.x + \", \" + moveToPos.y);\r\n                    } else {\r\n                        ////  cc.log(\"this._current \" + this.id + \" PrepareStop _dataPointsUpdatel: \" + this._dataPointsUpdate.length + \"  _currentStep: \" + this._currentStep);\r\n                    }\r\n                }\r\n                pos.x += this.currentVStepX * dt;\r\n                pos.y += this.currentVStepY * dt;\r\n                this.node.position = pos;\r\n            }\r\n        }\r\n    }\r\n\r\n    public die() {\r\n        this.isDie = true;\r\n        this.node.active = false;\r\n    }\r\n\r\n    public getPolygon(): SAT.Polygon {\r\n        // if (Math.abs(this.lastPolygonAngle - this.node.angle) >= 3) {\r\n        //     this.lastPolygonAngle = this.node.angle;\r\n        //     this.polygon.setAngle(this.node.angle * Utils.Deg2Rad);\r\n        // }\r\n        this.polygon.pos = new SAT.Vector(this.node.position.x, this.node.position.y);\r\n        return this.polygon;\r\n    }\r\n\r\n    public hurt() {\r\n        if (this.anim.children.length == 0 || this.anim.children[0].children.length == 0) return;\r\n        this.anim.children[0].children[0].stopActionByTag(99);\r\n        var action = cc.sequence(\r\n            cc.tintTo(0.05, 255, 54, 54),\r\n            cc.delayTime(0.1),\r\n            cc.tintTo(0.05, 255, 255, 255)\r\n        );\r\n        action.setTag(99);\r\n        this.anim.children[0].children[0].runAction(action);\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport cmd from \"../../Lobby/LobbyScript/Lobby.Cmd\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport MiniGameNetworkClient from \"../../Lobby/LobbyScript/Script/networks/MiniGameNetworkClient\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\nimport Play from \"./ShootFish.Play\";\r\nimport PopupCoinTransfer from \"./ShootFish.PopupCoinTransfer\";\r\nimport Http from \"../../Loading/src/Http\";\r\nimport SPUtils from \"../../Lobby/LobbyScript/Script/common/SPUtils\";\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Lobby extends cc.Component {\r\n\r\n    public static instance: Lobby = null;\r\n\r\n    @property(cc.Node)\r\n    playNode: cc.Node = null;\r\n    @property(cc.Label)\r\n    lblBalance: cc.Label = null;\r\n    @property(PopupCoinTransfer)\r\n    popupCoinTransfer: PopupCoinTransfer = null;\r\n\r\n    private play: Play = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        Lobby.instance = this;\r\n\r\n        this.play = this.playNode.getComponent(Play);\r\n        this.play.node.active = false;\r\n\r\n        this.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            this.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n        }, this);\r\n\r\n        ShootFishNetworkClient.getInstance().checkConnect((isLogined) => {\r\n            if (!isLogined) {\r\n                App.instance.alertDialog.showMsgWithOnDismissed(\"Đăng nhập thất bại, vui lòng thử lại.\", () => {\r\n                    this.actBack();\r\n                });\r\n                return;\r\n            }\r\n            Play.SERVER_CONFIG = Configs.Login.FishConfigs;\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n\r\n            if (this && this.node && this.node.parent) {\r\n                if (Configs.Login.CoinFish <= 0) {\r\n                    App.instance.confirmDialog.show3(\"Tiền trong Bắn Cá của bạn đã hết, bạn có muốn chuyển tiền vào không?\", \"Có\", (isConfirm) => {\r\n                        if (isConfirm) {\r\n                            this.popupCoinTransfer.show();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        ShootFishNetworkClient.getInstance().addOnClose(() => {\r\n            App.instance.showErrLoading(\"Mất kết nối, đang thử kết nối lại...\");\r\n        }, this);\r\n\r\n        MiniGameNetworkClient.getInstance().addListener((data) => {\r\n            let inPacket = new InPacket(data);\r\n            switch (inPacket.getCmdId()) {\r\n                case cmd.Code.GET_MONEY_USE: {\r\n                    let res = new cmd.ResGetMoneyUse(data);\r\n                    Configs.Login.Coin = res.moneyUse;\r\n                    BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                    break;\r\n                }\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    actBack() {\r\n        // NetworkClient.getInstance().close();\r\n        cc.audioEngine.stopAll();\r\n        App.instance.loadScene(\"Lobby\");\r\n    }\r\n\r\n    actHonors() {\r\n\r\n    }\r\n\r\n    actRoom1() {\r\n        this.show(false);\r\n        this.play.show(true, 1);\r\n    }\r\n\r\n    actRoom2() {\r\n        this.show(false);\r\n        this.play.show(true, 2);\r\n    }\r\n    actLogin(): void {\r\n        let username = Configs.Login.Username;\r\n        let password = Configs.Login.Password;\r\n\r\n        App.instance.showLoading(true);\r\n        Http.get(Configs.App.API, { c: 3, un: username, pw: md5(password) }, (err, res) => {\r\n            App.instance.showLoading(false);\r\n            if (err != null) {\r\n                //    App.instance.alertDialog.showMsg(\"Đăng nhập không thành công, vui lòng kiểm tra lại kết nối.\");\r\n                return;\r\n            }\r\n            // console.log(res);\r\n            switch (parseInt(res[\"errorCode\"])) {\r\n                case 0:\r\n                    //    console.log(\"Đăng nhập thành công.\");\r\n                    Configs.Login.AccessToken = res[\"accessToken\"];\r\n                    Configs.Login.SessionKey = res[\"sessionKey\"];\r\n                    Configs.Login.Username = username;\r\n                    Configs.Login.Password = password;\r\n                    Configs.Login.IsLogin = true;\r\n                    var userInfo = JSON.parse(base64.decode(Configs.Login.SessionKey));\r\n                    Configs.Login.Nickname = userInfo[\"nickname\"];\r\n                    Configs.Login.Avatar = userInfo[\"avatar\"];\r\n                    Configs.Login.Coin = userInfo[\"vinTotal\"];\r\n                    Configs.Login.LuckyWheel = userInfo[\"luckyRotate\"];\r\n                    Configs.Login.IpAddress = userInfo[\"ipAddress\"];\r\n                    Configs.Login.CreateTime = userInfo[\"createTime\"];\r\n                    Configs.Login.Birthday = userInfo[\"birthday\"];\r\n                    Configs.Login.Birthday = userInfo[\"birthday\"];\r\n                    Configs.Login.VipPoint = userInfo[\"vippoint\"];\r\n                    Configs.Login.VipPointSave = userInfo[\"vippointSave\"];\r\n\r\n                    // MiniGameNetworkClient.getInstance().checkConnect();\r\n                    //    MiniGameNetworkClient.getInstance().sendCheck(new cmd.ReqSubcribeJackpots());\r\n                    //    SlotNetworkClient.getInstance().sendCheck(new cmd.ReqSubcribeHallSlot());\r\n                    //    ShootFishNetworkClient.getInstance().checkConnect(() => {\r\n                    //        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                    //    });\r\n\r\n                    //     this.panelNotLogin.active = false;\r\n                    //    this.panelLogined.active = true;\r\n\r\n                    SPUtils.setUserName(Configs.Login.Username);\r\n                    SPUtils.setUserPass(Configs.Login.Password);\r\n\r\n                    App.instance.buttonMiniGame.show();\r\n                    //     this.getMailNotRead();\r\n\r\n                    BroadcastReceiver.send(BroadcastReceiver.USER_INFO_UPDATED);\r\n\r\n                    /* switch (VersionConfig.CPName) {\r\n                        default:\r\n                            this.popupBoomTan.show();\r\n                            break;\r\n                    } */\r\n                    break;\r\n                case 1007:\r\n                    App.instance.alertDialog.showMsg(\"Thông tin đăng nhập không hợp lệ.\");\r\n                    break;\r\n                case 2001:\r\n                    this.popupUpdateNickname.show2(username, password);\r\n                    break;\r\n                default:\r\n                    App.instance.alertDialog.showMsg(\"Đăng nhập không thành công vui lòng thử lại sau.\");\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n    actRoom3() {\r\n        this.show(false);\r\n        this.play.show(true, 3);\r\n    }\r\n\r\n    public show(isShow: boolean) {\r\n        this.node.active = isShow;\r\n        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n    }\r\n}\r\n","import Play from \"./ShootFish.Play\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PanelMenu extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    arrow: cc.Node = null;\r\n\r\n    @property(cc.Button)\r\n    btnSound: cc.Button = null;\r\n    @property(cc.SpriteFrame)\r\n    sfSoundOn: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    sfSoundOff: cc.SpriteFrame = null;\r\n    @property(cc.Button)\r\n\r\n    btnMusic: cc.Button = null;\r\n    @property(cc.SpriteFrame)\r\n    sfMusicOn: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    sfMusicOff: cc.SpriteFrame = null;\r\n\r\n    private isShow = false;\r\n\r\n    private soundState = 1;\r\n    private musicState = 1;\r\n\r\n    show(isShow: boolean) {\r\n        this.isShow = isShow;\r\n        if (this.isShow) {\r\n            this.node.runAction(cc.moveTo(0.3, cc.v2(-115, 0)));\r\n            this.arrow.runAction(cc.rotateTo(0.3, 0));\r\n        } else {\r\n            this.node.runAction(cc.moveTo(0.3, cc.v2(0, 0)));\r\n            this.arrow.runAction(cc.rotateTo(0.3, 180));\r\n        }\r\n        \r\n        this.btnSound.getComponent(cc.Sprite).spriteFrame = this.getSound() > 0 ? this.sfSoundOn : this.sfSoundOff;\r\n        this.btnMusic.getComponent(cc.Sprite).spriteFrame = this.getMussic() > 0 ? this.sfMusicOn : this.sfMusicOff;\r\n    }\r\n\r\n    toggleShow() {\r\n        this.show(!this.isShow);\r\n    }\r\n\r\n    toggleSound() {\r\n        //SPUtils.setSoundVolumn(SPUtils.getSoundVolumn() > 0 ? 0 : 1);\r\n        var state = this.getSound() > 0 ? 0 : 1;\r\n        \r\n        this.btnSound.getComponent(cc.Sprite).spriteFrame = state > 0 ? this.sfSoundOn : this.sfSoundOff;\r\n        Play.instance.settingSound();\r\n        \r\n    }\r\n\r\n    toggleMusic() {\r\n        //SPUtils.setMusicVolumn(SPUtils.getMusicVolumn() > 0 ? 0 : 1);\r\n        \r\n        var state = this.getMussic() > 0 ? 0 : 1;\r\n        //  cc.log(\"toggle music result \"+state);\r\n        \r\n\r\n        this.btnMusic.getComponent(cc.Sprite).spriteFrame = state > 0 ? this.sfMusicOn : this.sfMusicOff;\r\n        Play.instance.settingMusic();\r\n    }\r\n    getSound(){\r\n        \r\n        var soundSave = cc.sys.localStorage.getItem(\"sound_fish_shot\");\r\n        if (soundSave != null) {\r\n            this.soundState = parseInt(soundSave);\r\n        }\r\n        return this.soundState;\r\n    }\r\n    \r\n    \r\n    getMussic(){\r\n        var soundSave = cc.sys.localStorage.getItem(\"music_fish_shot\");\r\n        if (soundSave != null) {\r\n            this.musicState = parseInt(soundSave);\r\n        }\r\n        return this.musicState;\r\n    }\r\n    \r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n\r\n    @property\r\n    localPos: number = 0;\r\n    @property(cc.Label)\r\n    lblNickname: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblBet: cc.Label = null;\r\n    @property(cc.Node)\r\n    gunRotate: cc.Node = null;\r\n    @property(cc.Sprite)\r\n    sprGunBar: cc.Sprite = null;\r\n    @property([cc.SpriteFrame])\r\n    sprFramesGunBar: cc.SpriteFrame[] = [];\r\n    @property([sp.Skeleton])\r\n    guns: sp.Skeleton[] = [];\r\n\r\n    public id = 0;\r\n    public username = \"\";\r\n    public nickname = \"\";\r\n    public coin = 0;\r\n    public avatar = \"\";\r\n    public serverPos = -1;\r\n\r\n    private gun: sp.Skeleton = null;\r\n    private curGunIdx = -1;\r\n\r\n    set(id: number, username: string, nickname: string, coin: number, avatar: string) {\r\n        this.id = id;\r\n        this.username = username;\r\n        this.nickname = nickname;\r\n        this.coin = coin;\r\n        this.avatar = avatar;\r\n        this.gunRotate.angle = 0;\r\n        this.node.active = true;\r\n\r\n        this.lblNickname.string = this.nickname;\r\n        this.lblCoin.string = Utils.formatNumber(coin);\r\n        switch (this.localPos) {\r\n            case 0:\r\n            case 1:\r\n                this.gunRotate.angle = 90;\r\n                break;\r\n            case 2:\r\n            case 3:\r\n                this.gunRotate.angle = -90;\r\n                break;\r\n        }\r\n        this.setGun(0);\r\n    }\r\n\r\n    leave() {\r\n        this.id = -1;\r\n        this.nickname = \"\";\r\n        this.coin = 0;\r\n        this.avatar = \"\";\r\n        this.node.active = false;\r\n    }\r\n\r\n    setGun(gunIdx: number) {\r\n        if (gunIdx >= this.guns.length) gunIdx = 0;\r\n        if (this.curGunIdx == gunIdx) return;\r\n\r\n        this.curGunIdx = gunIdx;\r\n\r\n        for (let i = 0; i < this.guns.length; i++) {\r\n            this.guns[i].node.active = i == gunIdx;\r\n        }\r\n        this.sprGunBar.spriteFrame = this.sprFramesGunBar[gunIdx];\r\n        this.gun = this.guns[gunIdx];\r\n    }\r\n\r\n    rotateGun(touchPos: cc.Vec2) {\r\n        var gunWorldPos = this.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        var d = touchPos.sub(gunWorldPos);\r\n        var angle = Math.atan2(d.y, d.x) * Utils.Rad2Deg;\r\n        if (angle < -90) {\r\n            angle = 180;\r\n        } else if (angle < 0 && angle > -90) {\r\n            angle = 0;\r\n        }\r\n        this.gunRotate.angle = angle;\r\n    }\r\n\r\n    shoot() {\r\n        this.gun.setAnimation(0, \"2\", false);\r\n        this.gun.addAnimation(0, \"1\", true);\r\n    }\r\n}\r\n","import Player from \"./ShootFish.Player\";\r\nimport Bullet from \"./ShootFish.Bullet\";\r\nimport Fish from \"./ShootFish.Fish\";\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport CoinEffect from \"./ShootFish.CoinEffect\";\r\nimport EffectJackpot from \"./ShootFish.EffectJackpot\";\r\nimport Lobby from \"./ShootFish.Lobby\";\r\nimport PanelMenu from \"./ShootFish.PanelMenu\";\r\nimport PopupGuide from \"./ShootFish.PopupGuide\";\r\nimport EffectBigWin from \"./ShootFish.EffectBigWin\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Tween from \"../../Lobby/LobbyScript/Script/common/Tween\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Play extends cc.Component {\r\n\r\n    public static instance: Play = null;\r\n    public static SERVER_CONFIG = null;\r\n\r\n    @property(cc.Node)\r\n    lobby: cc.Node = null;\r\n    @property(cc.Node)\r\n    loading: cc.Node = null;\r\n    @property(cc.Node)\r\n    touchPad: cc.Node = null;\r\n    @property([cc.SpriteFrame])\r\n    sprFramesBullet: cc.SpriteFrame[] = [];\r\n    @property(cc.Node)\r\n    bulletTemplate: cc.Node = null;\r\n    @property([Player])\r\n    players: Player[] = [];\r\n    @property([cc.Node])\r\n    fishsAnim: cc.Node[] = [];\r\n    @property(cc.Node)\r\n    fishsNode: cc.Node = null;\r\n    @property(cc.Node)\r\n    fishTemplate: cc.Node = null;\r\n    @property(cc.Node)\r\n    coinEffectTemplate: cc.Node = null;\r\n    @property(cc.Label)\r\n    lblJackpot: cc.Label = null;\r\n    @property(cc.Toggle)\r\n    toggleAuto: cc.Toggle = null;\r\n    @property(cc.Node)\r\n    target: cc.Node = null;\r\n    @property(cc.Node)\r\n    waveState: cc.Node = null;\r\n\r\n    @property(cc.Button)\r\n    btnFastShoot: cc.Button = null;\r\n    @property(cc.ProgressBar)\r\n    progressFastShoot: cc.ProgressBar = null;\r\n    @property(cc.Label)\r\n    lblFastShootTime: cc.Label = null;\r\n\r\n    @property(cc.Button)\r\n    btnTargetFish: cc.Button = null;\r\n    @property(cc.ProgressBar)\r\n    progressTargetFish: cc.ProgressBar = null;\r\n    @property(cc.Label)\r\n    lblTargetFishTime: cc.Label = null;\r\n\r\n    //effect\r\n    @property(EffectJackpot)\r\n    effectJackpot: EffectJackpot = null;\r\n    @property(EffectBigWin)\r\n    effectBigWin: EffectBigWin = null;\r\n    @property(EffectBigWin)\r\n    effectMegaWin: EffectBigWin = null;\r\n    @property(PanelMenu)\r\n    panelMenu: PanelMenu = null;\r\n    @property(cc.Node)\r\n    popupGuide: cc.Node = null;\r\n    @property(cc.Label)\r\n    lblPing: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblServerTime: cc.Label = null;\r\n\r\n    //sound\r\n\r\n    @property({ type: cc.AudioClip })\r\n    soundShoot: cc.AudioClip = null;\r\n\r\n    @property({ type: cc.AudioClip })\r\n    soundCoin: cc.AudioClip = null;\r\n\r\n    @property({ type: cc.AudioClip })\r\n    soundBigWin: cc.AudioClip = null;\r\n\r\n    @property({ type: cc.AudioClip })\r\n    soundBg: cc.AudioClip = null;\r\n\r\n    @property(cc.Node)\r\n    soundOff: cc.Node = null;\r\n    @property(cc.Node)\r\n    musicOff: cc.Node = null;\r\n\r\n\r\n    public mePlayer: Player = null;\r\n    private bullets: Bullet[] = [];\r\n    private fishs: Fish[] = [];\r\n    private coinEffects: CoinEffect[] = [];\r\n    private isStateGeted = false;\r\n    private inited = false;\r\n    private lastUpdateTime = -1;\r\n\r\n    private roomId = 0;\r\n    private listBet: Array<number> = [];\r\n    private listJackpot: Array<number> = [];\r\n    private betIdx = 0;\r\n    private readonly mapPlayersIdx = [\r\n        [0, 1, 2, 3],\r\n        [1, 0, 3, 2],\r\n        [2, 3, 0, 1],\r\n        [3, 2, 1, 0]\r\n    ];\r\n\r\n    private shootInterval = 0.25;\r\n    private fastShootInterval = 0.13;\r\n    private curShootInterval = 0;\r\n    private isShoot = false;\r\n    private isFastShoot = false;\r\n    private isTargetFish = false;\r\n\r\n    private targetFish: Fish = null;\r\n    private readonly intervalFindTargetFish = 2;\r\n    private curIntervalFindTargetFish = 0;\r\n\r\n    private curTimeFastShootCountdown = 0;\r\n    private curTimeTargetFishCountdown = 0;\r\n    private tweens = new Array<cc.Tween>();\r\n\r\n    private remoteMusicBackground = null;\r\n    private musicState = 1;\r\n    private soundState = 1;\r\n    \r\n    private init() {\r\n        if (this.inited) return;\r\n\r\n        this.mePlayer = this.players[0];\r\n    }\r\n\r\n    onLoad() {\r\n        Play.instance = this;\r\n    }\r\n\r\n    start() {\r\n        this.bulletTemplate.active = false;\r\n\r\n        this.touchPad.on(cc.Node.EventType.TOUCH_START, (event: cc.Event.EventTouch) => {\r\n            var touchPos = event.getLocation();\r\n            this.mePlayer.rotateGun(touchPos);\r\n            this.isShoot = true;\r\n        }, this.touchPad);\r\n\r\n        this.touchPad.on(cc.Node.EventType.TOUCH_MOVE, (event: cc.Event.EventTouch) => {\r\n            var touchPos = event.getLocation();\r\n            this.mePlayer.rotateGun(touchPos);\r\n        }, this.touchPad);\r\n\r\n        this.touchPad.on(cc.Node.EventType.TOUCH_END, (event: cc.Event.EventTouch) => {\r\n            this.isShoot = false;\r\n        }, this.touchPad);\r\n\r\n        this.touchPad.on(cc.Node.EventType.TOUCH_CANCEL, (event: cc.Event.EventTouch) => {\r\n            this.isShoot = false;\r\n        }, this.touchPad);\r\n\r\n        this.toggleAuto.node.on(\"toggle\", () => {\r\n            if (this.toggleAuto.isChecked) {\r\n                this.touchPad.active = false;\r\n                this.curIntervalFindTargetFish = this.intervalFindTargetFish;\r\n                this.isShoot = true;\r\n                this.findTargetFishInWorld();\r\n            } else {\r\n                this.stopAutoShoot();\r\n            }\r\n        });\r\n\r\n        ShootFishNetworkClient.getInstance().addListener((route, data) => {\r\n            if (!this.node.active || !this.isStateGeted) return;\r\n            switch (route) {\r\n                case \"OnUpdateJackpot\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    this.listJackpot.length = 0;\r\n                    this.listJackpot.push(data[this.roomId + \"1\"]);\r\n                    this.listJackpot.push(data[this.roomId + \"2\"]);\r\n                    this.listJackpot.push(data[this.roomId + \"3\"]);\r\n                    this.listJackpot.push(data[this.roomId + \"4\"]);\r\n\r\n                    Tween.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], 0.3);\r\n                    break;\r\n                }\r\n                case \"OnEnterPlayer\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    let playerData = data[\"data\"];\r\n                    let localPos = this.mapPlayersIdx[this.mePlayer.serverPos][playerData[\"posIndex\"]];\r\n                    let player = this.players[localPos];\r\n                    player.set(playerData[\"id\"], playerData[\"playerId\"], playerData[\"nickname\"], playerData[\"cash\"], playerData[\"avatar\"]);\r\n                    player.serverPos = playerData[\"posIndex\"];\r\n                    player.lblBet.string = Utils.formatNumberMin(this.listBet[this.betIdx]);\r\n                    break;\r\n                }\r\n                case \"OnLeavePlayer\": {\r\n                    // //  cc.log(\"route: \" + route + \" data: \" + JSON.stringify(data));\r\n                    let username = data[\"playerId\"];\r\n                    if (username == Configs.Login.UsernameFish) {\r\n                        if (data[\"reason\"] == 1) {\r\n                            App.instance.alertDialog.showMsg(\"Bạn được mời ra khỏi phòng do không thao tác trong thời gian dài.\");\r\n                        }\r\n                        this.back();\r\n                    }\r\n                    let player = this.getPlayerByUsername(username);\r\n                    if (player == null) break;\r\n                    player.leave();\r\n                    break;\r\n                }\r\n                case \"OnUpdateObject\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    let fishId = data[\"id\"];\r\n                    let fish = this.getFishById(fishId);\r\n                    if (fish == null) {\r\n                        //  //  cc.log(\"can't find fish \" + fishId);\r\n                        break;\r\n                    }\r\n                    fish.setData(data);\r\n\r\n                    break;\r\n                }\r\n                case \"OnUpdateCash\": {\r\n                    // //  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    let username = data['playerId'];\r\n                    let coin = Number(data['cash']);\r\n                    let scr = data['scr'];\r\n                    if (username == Configs.Login.UsernameFish) {\r\n                        Configs.Login.CoinFish = coin;\r\n                    }\r\n                    let player = this.getPlayerByUsername(username);\r\n                    if (player == null) break;\r\n                    player.coin = coin;\r\n                    player.lblCoin.string = Utils.formatNumber(coin);\r\n\r\n                    switch (scr) {\r\n                        case 2:\r\n                            //jackpot\r\n                            this.effectBigWin.show(false);\r\n                            this.effectMegaWin.show(false);\r\n                            this.effectJackpot.show(true, player.nickname, coin);\r\n                            break;\r\n                        case 3:\r\n                            //ech ngam vang\r\n                            break;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"OnObjectDie\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    let fishId = data[\"id\"];\r\n                    let coin = data[\"value\"];\r\n                    let playerId = data[\"playerId\"];\r\n\r\n                    let fish = this.getFishById(fishId);\r\n                    if (fish == null) break;\r\n                    fish.die();\r\n\r\n                    //reset targetFish\r\n                    if (fish == this.targetFish) {\r\n                        this.exploreAllBulletWithTargetFishId(this.targetFish.id);\r\n                        this.target.active = false;\r\n                        this.targetFish = null;\r\n                        this.curIntervalFindTargetFish = 0;\r\n                    }\r\n\r\n                    let player = this.getPlayerByUsername(playerId);\r\n                    if (player == null) break;\r\n                    //coin effect\r\n                    let coinEffect = this.getCoinEffect();\r\n                    coinEffect.run(coin, new cc.Vec2(fish.node.position.x,fish.node.position.y), new cc.Vec2(player.node.position.x,player.node.position.y));\r\n                    if(this.soundState == 1){\r\n                        cc.audioEngine.play(this.soundCoin, false, 1);\r\n                    }\r\n                    \r\n\r\n                    switch (fish.type) {\r\n                        case 15:\r\n                        case 16:\r\n                        case 17:\r\n                        case 18:\r\n                        case 19:\r\n                        case 20:\r\n                        case 21:\r\n                            if (!this.effectJackpot.node.active)\r\n                                this.effectMegaWin.show(true, player.nickname, coin);\r\n                            break;\r\n                        case 22:\r\n                        case 23:\r\n                        case 24:\r\n                            if (!this.effectJackpot.node.active)\r\n                                this.effectBigWin.show(true, player.nickname, coin);\r\n                            break;\r\n                        case 10:\r\n                            //an than tai\r\n                            break;\r\n                    }\r\n                    break;\r\n                }\r\n                case \"OnShoot\": {\r\n                    // //  cc.log(\"route: \" + route + \" data: \" + JSON.stringify(data));\r\n                    let username = data[\"playerId\"];\r\n                    let betIdx = Number(data['type']) - 1;\r\n                    let rad = data['rad'];\r\n                    let target = Number(data[\"target\"]);\r\n\r\n                    if (username == Configs.Login.UsernameFish) break;\r\n\r\n                    let player = this.getPlayerByUsername(username);\r\n                    if (player == null) break;\r\n                    let radByMe = rad;\r\n                    switch (this.mePlayer.serverPos) {\r\n                        case 0:\r\n                            radByMe = rad;\r\n                            break;\r\n                        case 1:\r\n                            radByMe = Math.PI - rad;\r\n                            break;\r\n                        case 2:\r\n                            radByMe = rad - Math.PI;\r\n                            break;\r\n                        case 3:\r\n                            radByMe = -rad;\r\n                            break;\r\n                    }\r\n                    player.lblBet.string = Utils.formatNumberMin(this.listBet[betIdx]);\r\n                    player.gunRotate.angle = radByMe * Utils.Rad2Deg;\r\n                    player.setGun(betIdx);\r\n                    player.shoot();\r\n\r\n                    var bullet = this.getBullet();\r\n                    bullet.targetFishId = target;\r\n                    bullet.bullet.getComponent(cc.Sprite).spriteFrame = this.sprFramesBullet[betIdx];\r\n                    bullet.node.angle = player.gunRotate.angle;\r\n                    var pos = bullet.node.parent.convertToNodeSpaceAR(player.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO));\r\n                    pos.x += Utils.degreesToVec2(bullet.node.angle).x * 90;\r\n                    pos.y += Utils.degreesToVec2(bullet.node.angle).y * 90;\r\n                    bullet.node.setPosition(pos);\r\n                    bullet.run();\r\n                    break;\r\n                }\r\n                case \"OnChat\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    break;\r\n                }\r\n                case \"OnNewState\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    switch (data['state']) {\r\n                        case 3: {\r\n                            //ca tran\r\n                            this.waveState.stopAllActions();\r\n                            this.waveState.active = true;\r\n                            let pos = this.waveState.position;\r\n                            pos.x = 1400;\r\n                            this.waveState.position = pos;\r\n                            pos.x = -1400;\r\n                            this.waveState.runAction(cc.sequence(cc.moveTo(1, new cc.Vec2(pos.x,pos.y)), cc.callFunc(() => {\r\n                                this.waveState.active = false;\r\n                            })));\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n                case \"OnJackpot\": {\r\n                    ////  cc.log(\"route: \" + route + \" data: \"+ JSON.stringify(data));\r\n                    let nickname = data['nickname'];\r\n                    let value = data['value'];\r\n                    let roomIdx = data['tableIndex'];\r\n\r\n                    var roomName = \"Phòng 1\";\r\n                    switch (roomIdx) {\r\n                        case 2:\r\n                            roomName = \"Phòng 2\";\r\n                            break;\r\n                        case 3:\r\n                            roomName = \"Phòng 3\";\r\n                            break;\r\n                    }\r\n                    let msg = \"Chúc mừng \\\"\" + nickname + \"\\\" đã săn được \" + Utils.formatNumber(value) + \" Xu trong \" + roomName + \".\"\r\n                    break;\r\n                }\r\n                default:\r\n                    // //  cc.log(\"====route: \" + route);\r\n                    break;\r\n            }\r\n        }, this);\r\n\r\n        this.init();\r\n\r\n        //setting music\r\n        this.checkMusicOnStart();\r\n        this.checkSoundOnStart();\r\n    }\r\n\r\n    checkMusicOnStart(){\r\n        var musicSave = cc.sys.localStorage.getItem(\"music_fish_shot\");\r\n        if (musicSave != null) {\r\n            this.musicState = parseInt(musicSave);\r\n        } else {\r\n            this.musicState = 1;\r\n            cc.sys.localStorage.setItem(\"music_fish_shot\", \"1\");\r\n        }\r\n\r\n        if (this.musicState == 0) {\r\n            this.musicOff.active = true;\r\n        } else {\r\n            this.musicOff.active = false;\r\n        }\r\n        if (this.musicState == 1) {\r\n           \r\n            this.remoteMusicBackground = cc.audioEngine.playMusic(this.soundBg, true);\r\n        }\r\n    }\r\n    checkSoundOnStart(){\r\n        var soundSave = cc.sys.localStorage.getItem(\"sound_fish_shot\");\r\n        if (soundSave != null) {\r\n            this.soundState = parseInt(soundSave);\r\n        } else {\r\n            this.soundState = 1;\r\n            cc.sys.localStorage.setItem(\"sound_fish_shot\", \"1\");\r\n        }\r\n\r\n        if (this.soundState == 0) {\r\n            this.soundOff.active = true;\r\n        } else {\r\n            this.soundOff.active = false;\r\n        }\r\n        \r\n    }\r\n\r\n    settingMusic(){\r\n        //  cc.log(this.musicOff.active);\r\n        this.musicOff.active = !this.musicOff.active;\r\n        if (this.musicOff.active) {\r\n            cc.audioEngine.stop(this.remoteMusicBackground);\r\n            this.musicState = 0;\r\n        } else {\r\n           \r\n            this.remoteMusicBackground = cc.audioEngine.playMusic(this.soundBg, true);\r\n            this.musicState = 1;\r\n        }\r\n        \r\n        cc.sys.localStorage.setItem(\"music_fish_shot\", \"\" + this.musicState);\r\n    }\r\n\r\n    settingSound(){\r\n        //  cc.log(this.soundOff.active);\r\n        this.soundOff.active = !this.soundOff.active;\r\n        if (this.soundOff.active) {\r\n          \r\n            this.soundState = 0;\r\n        } else {\r\n           \r\n            this.soundState = 1;\r\n        }\r\n        \r\n        cc.sys.localStorage.setItem(\"sound_fish_shot\", \"\" + this.soundState);\r\n    }\r\n\r\n    onDisable() {\r\n        this.tweens.forEach(element => {\r\n            element.stop();\r\n        });\r\n    }\r\n\r\n    onDestroy() {\r\n        this.tweens.forEach(element => {\r\n            element.stop();\r\n        });\r\n    }\r\n\r\n    update(dt) {\r\n        if (this.lblPing != null) {\r\n            this.lblPing.string = ShootFishNetworkClient.PING + \"ms\";\r\n        }\r\n        if (this.lblServerTime != null && this.lblServerTime.node.active) {\r\n            this.lblServerTime.string = \"t: \" + ShootFishNetworkClient.systemCurrentTimeMillis() + \" d: \" + ShootFishNetworkClient.TIME_DISTANCE + \" mp: \" + ShootFishNetworkClient.MIN_PING;\r\n        }\r\n\r\n        let now = ShootFishNetworkClient.systemCurrentTimeMillis();\r\n        if (this.isStateGeted && this.lastUpdateTime > 0 && now - this.lastUpdateTime > 500) {\r\n            //  cc.log(\"onresume getstate\");\r\n            this.getState(false);\r\n        }\r\n        this.lastUpdateTime = now;\r\n\r\n        if (this.curTimeFastShootCountdown > 0) {\r\n            this.curTimeFastShootCountdown = Math.max(0, this.curTimeFastShootCountdown - dt);\r\n            this.lblFastShootTime.string = Math.round(this.curTimeFastShootCountdown) + \"s\";\r\n            if (this.curTimeFastShootCountdown == 0) {\r\n                this.lblFastShootTime.node.active = false;\r\n                this.btnFastShoot.enabled = true;\r\n            }\r\n        }\r\n\r\n        if (this.curTimeTargetFishCountdown > 0) {\r\n            this.curTimeTargetFishCountdown = Math.max(0, this.curTimeTargetFishCountdown - dt);\r\n            this.lblTargetFishTime.string = Math.round(this.curTimeTargetFishCountdown) + \"s\";\r\n            if (this.curTimeTargetFishCountdown == 0) {\r\n                this.lblTargetFishTime.node.active = false;\r\n                this.btnTargetFish.enabled = true;\r\n            }\r\n        }\r\n\r\n        this.updateShoot(dt);\r\n\r\n        //update bullets\r\n        for (var i = 0, c = this.bullets.length; i < c; i++) {\r\n            let bulet = this.bullets[i];\r\n            bulet.updateRealTime(dt);\r\n        }\r\n\r\n        //update fishs\r\n        var listFishPoly = new Array<SAT.Polygon>();\r\n        for (var i = 0, c = this.fishs.length; i < c; i++) {\r\n            let fish = this.fishs[i];\r\n            fish.updateRealTime(dt);\r\n            if (fish.node.active && Math.abs(fish.node.x) < 640 * 1.1 && Math.abs(fish.node.y) < 360 * 1.1) {\r\n                listFishPoly.push(fish.getPolygon());\r\n            } else {\r\n                listFishPoly.push(null);\r\n            }\r\n        }\r\n\r\n        //check collision\r\n        for (var i = 0, cBullet = this.bullets.length; i < cBullet; i++) {\r\n            var bullet = this.bullets[i];\r\n            if (!bullet.node.active || bullet.isExploring || bullet.isExplored) continue;\r\n            var bulletCircle = bullet.getCircle();\r\n            for (var j = 0, cFish = this.fishs.length; j < cFish; j++) {\r\n                var fish = this.fishs[j];\r\n                if (listFishPoly[j] == null) continue;\r\n                if (bullet.targetFishId > 0 && bullet.targetFishId != fish.id) continue;\r\n                var isCollision = SAT.testCirclePolygon(bulletCircle, listFishPoly[j]);\r\n                if (isCollision) {\r\n                    bullet.explore();\r\n                    fish.hurt();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        listFishPoly.length = 0;//clear memory\r\n    }\r\n\r\n    private play() {\r\n        this.isStateGeted = false;\r\n        this.resetView();\r\n        ShootFishNetworkClient.getInstance().ping(() => {\r\n            ShootFishNetworkClient.getInstance().ping(() => {\r\n                ShootFishNetworkClient.getInstance().ping(() => {\r\n                    //  cc.log(this.roomId);\r\n                    ShootFishNetworkClient.getInstance().request(\"play\", {\r\n                        \"playerId\": Configs.Login.UsernameFish,\r\n                        \"password\": Configs.Login.PasswordFish,\r\n                        \"index\": this.roomId,//roomId\r\n                    }, (res) => {\r\n                        //  cc.log(res);\r\n                        if (!res[\"ok\"]) {\r\n                            switch (res[\"err\"]) {\r\n                                case 4:\r\n                                    App.instance.confirmDialog.show2(\"Số dư không đủ vui lòng nạp thêm.\", (isConfirm) => {\r\n                                        if (isConfirm) {\r\n                                            Lobby.instance.popupCoinTransfer.show();\r\n                                        }\r\n                                    });\r\n                                    break;\r\n                                case 1:\r\n                                    ShootFishNetworkClient.getInstance().request(\"quit\", null, () => {\r\n                                    }, this);\r\n                                    App.instance.alertDialog.showMsg(\"Lỗi \" + res[\"err\"] + \", vui lòng thử lại.\");\r\n                                    break;\r\n                                default:\r\n                                    App.instance.alertDialog.showMsg(\"Lỗi \" + res[\"err\"] + \", không xác định.\");\r\n                                    break;\r\n                            }\r\n                            this.show(false);\r\n                            this.lobby.getComponent(Lobby).show(true);\r\n                            return;\r\n                        }\r\n                        this.getState(true);\r\n                    }, this);\r\n                }, this);\r\n            }, this);\r\n        }, this);\r\n    }\r\n\r\n    private resetView() {\r\n        this.betIdx = 0;\r\n\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].leave();\r\n        }\r\n\r\n        for (let i = 0; i < this.fishs.length; i++) this.fishs[i].node.removeFromParent();\r\n        this.fishs.length = 0;\r\n\r\n        for (let i = 0; i < this.bullets.length; i++) this.bullets[i].node.active = false;\r\n        for (let i = 0; i < this.coinEffects.length; i++) this.coinEffects[i].node.active = false;\r\n\r\n        this.effectBigWin.show(false);\r\n        this.effectMegaWin.show(false);\r\n        this.effectJackpot.show(false);\r\n\r\n        this.popupGuide.active = false;\r\n\r\n        this.waveState.stopAllActions();\r\n        this.waveState.active = false;\r\n    }\r\n\r\n    private getJackpot() {\r\n        ShootFishNetworkClient.getInstance().request(\"getJackpot\", null, (res) => {\r\n            if (!res[\"ok\"]) return;\r\n            this.listJackpot.length = 0;\r\n            this.listJackpot.push(res[\"data\"][this.roomId + \"1\"]);\r\n            this.listJackpot.push(res[\"data\"][this.roomId + \"2\"]);\r\n            this.listJackpot.push(res[\"data\"][this.roomId + \"3\"]);\r\n            this.listJackpot.push(res[\"data\"][this.roomId + \"4\"]);\r\n\r\n            Tween.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], 0.3);\r\n        }, this);\r\n    }\r\n\r\n    private getState(isFirst: boolean) {\r\n        if (!isFirst) App.instance.showLoading(true);\r\n        this.isStateGeted = false;\r\n\r\n        this.resetView();\r\n\r\n        ShootFishNetworkClient.getInstance().request(\"state\", null, (res) => {\r\n            if (!isFirst) App.instance.showLoading(false);\r\n            // //  cc.log(\"state: \" + JSON.stringify(res));\r\n            //init players\r\n            let playersData: Array<any> = res[\"players\"];\r\n            let mePlayerData = null;\r\n            let mePlayerServerPos = 0;\r\n            for (let i = 0; i < playersData.length; i++) {\r\n                if (playersData[i][\"playerId\"] == Configs.Login.UsernameFish) {\r\n                    mePlayerServerPos = playersData[i][\"posIndex\"];\r\n                    mePlayerData = playersData[i];\r\n                    Configs.Login.CoinFish = playersData[i][\"cash\"];\r\n                    break;\r\n                }\r\n            }\r\n            //  cc.log(\"mePlayerServerPos: \" + mePlayerServerPos);\r\n            for (let i = 0; i < playersData.length; i++) {\r\n                let localPos = this.mapPlayersIdx[mePlayerServerPos][playersData[i][\"posIndex\"]];\r\n                let playerData = playersData[i];\r\n                let player = this.players[localPos];\r\n                player.set(playerData[\"id\"], playerData[\"playerId\"], playerData[\"nickname\"], playerData[\"cash\"], playerData[\"avatar\"]);\r\n                player.serverPos = playerData[\"posIndex\"];\r\n                player.lblBet.string = Utils.formatNumberMin(this.listBet[this.betIdx]);\r\n            }\r\n            //end init players\r\n\r\n            //init fishs\r\n            let objects = res[\"objects\"].concat(res[\"sobjects\"]);\r\n            for (let i = 0; i < objects.length; i++) {\r\n                let fishNode = cc.instantiate(this.fishTemplate);\r\n                let fish = fishNode.getComponent(Fish);\r\n                fish.node.parent = this.fishsNode;\r\n                fish.setData(objects[i]);\r\n                this.fishs.push(fish);\r\n            }\r\n            //end init fish\r\n\r\n            //time skill\r\n            //fast shoot\r\n            var rfire = res['time'] - mePlayerData['rfire'];\r\n            var cRfire = Play.SERVER_CONFIG['FastFireCoolDownS'];\r\n            this.progressFastShoot.progress = 0;\r\n            if (rfire > cRfire) {\r\n                this.btnFastShoot.enabled = true;\r\n                this.lblFastShootTime.node.active = false;\r\n            } else {\r\n                this.btnFastShoot.enabled = false;\r\n                this.curTimeFastShootCountdown = rfire;\r\n                this.lblFastShootTime.string = this.curTimeFastShootCountdown + \"s\";\r\n                this.lblFastShootTime.node.active = true;\r\n            }\r\n            //target \r\n            var snipe = res['time'] - mePlayerData['snipe'];\r\n            var cSpine = Play.SERVER_CONFIG['SnipeCoolDownS'];\r\n            this.progressTargetFish.progress = 0;\r\n            if (snipe > cSpine) {\r\n                this.btnTargetFish.enabled = true;\r\n                this.lblFastShootTime.node.active = false;\r\n            } else {\r\n                this.btnTargetFish.enabled = false;\r\n                this.curTimeTargetFishCountdown = snipe;\r\n                this.lblTargetFishTime.string = this.curTimeTargetFishCountdown + \"s\";\r\n                this.lblTargetFishTime.node.active = true;\r\n            }\r\n\r\n            this.isStateGeted = true;\r\n\r\n            this.getJackpot();\r\n\r\n            if (isFirst) this.loading.active = false;\r\n        }, this);\r\n    }\r\n\r\n    private updateShoot(dt: number) {\r\n        if (this.toggleAuto.isChecked || this.isTargetFish) {\r\n            if (this.targetFish != null) {\r\n                var gunWorldPos = this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n                var fishWorldPos = this.targetFish.node.convertToWorldSpaceAR(cc.v2(this.targetFish.node.width / 2, 0));\r\n                var distance = Utils.v2Distance(fishWorldPos, gunWorldPos);\r\n\r\n                if (Math.abs(this.targetFish.node.x) > 640 * 0.8 || Math.abs(this.targetFish.node.y) > 360 * 0.8 || distance < 135) {\r\n                    this.exploreAllBulletWithTargetFishId(this.targetFish.id);\r\n                    this.target.active = false;\r\n                    this.targetFish = null;\r\n                    this.curIntervalFindTargetFish = 0;\r\n                }\r\n                else {\r\n                    var dAngle = fishWorldPos.sub(gunWorldPos);\r\n                    var angle = Math.atan2(dAngle.y, dAngle.x) * Utils.Rad2Deg;\r\n                    this.mePlayer.gunRotate.angle = angle;\r\n                    // this.target.position = this.targetFish.node.position;\r\n                    this.target.setPosition(this.target.parent.convertToNodeSpaceAR(fishWorldPos));\r\n                }\r\n            } else if (!this.isTargetFish) {\r\n                this.curIntervalFindTargetFish = Math.max(0, this.curIntervalFindTargetFish - dt);\r\n                if (this.curIntervalFindTargetFish == 0) {\r\n                    this.findTargetFishInWorld();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.curShootInterval > 0) {\r\n            this.curShootInterval = Math.max(0, this.curShootInterval - dt);\r\n        } else if (this.isShoot) {\r\n            this.curShootInterval = this.isFastShoot ? this.fastShootInterval : this.shootInterval;\r\n\r\n            if (Configs.Login.CoinFish < this.listBet[this.betIdx]) {\r\n                App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_slot_error'));\r\n                this.isShoot = false;\r\n                if (this.toggleAuto.isChecked) this.stopAutoShoot();\r\n                return;\r\n            }\r\n\r\n            if ((this.toggleAuto.isChecked || this.isTargetFish) && this.targetFish == null) return;\r\n            \r\n            Configs.Login.CoinFish = Math.max(0, Configs.Login.CoinFish - this.listBet[this.betIdx]);\r\n            this.mePlayer.coin = Configs.Login.CoinFish;\r\n            this.mePlayer.lblCoin.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n\r\n            this.mePlayer.shoot();\r\n\r\n            //play audio\r\n            if(this.soundState == 1){\r\n                cc.audioEngine.play(this.soundShoot, false, 1);\r\n            }\r\n            \r\n\r\n            let bulletAngle = this.mePlayer.gunRotate.angle;\r\n            var bullet = this.getBullet();\r\n            bullet.bullet.getComponent(cc.Sprite).spriteFrame = this.sprFramesBullet[this.betIdx];\r\n            bullet.targetFishId = this.targetFish != null ? this.targetFish.id : -1;\r\n            bullet.node.angle = bulletAngle;\r\n            var pos = bullet.node.parent.convertToNodeSpaceAR(this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO));\r\n            pos.x += Utils.degreesToVec2(bullet.node.angle).x * 90;\r\n            pos.y += Utils.degreesToVec2(bullet.node.angle).y * 90;\r\n            bullet.node.setPosition(pos);\r\n            bullet.run();\r\n\r\n            let shootRad = bulletAngle * Utils.Deg2Rad;\r\n            switch (this.mePlayer.serverPos) {\r\n                case 0:\r\n                    shootRad = shootRad;\r\n                    break;\r\n                case 1:\r\n                    shootRad = Math.PI - shootRad;\r\n                    break;\r\n                case 2:\r\n                    shootRad = shootRad - Math.PI;\r\n                    break;\r\n                case 3:\r\n                    shootRad = -shootRad;\r\n                    break;\r\n            }\r\n            ShootFishNetworkClient.getInstance().notify(\"shoot\", {\r\n                'rad': shootRad,//goc ban\r\n                'type': this.betIdx + 1,//loai sung 1->4\r\n                'target': this.targetFish != null ? this.targetFish.id : -1,//id ca target\r\n                'rapidFire': this.isFastShoot, //ban nhanh boolean,\r\n                'auto': false //ban tu dong boolean\r\n            });\r\n        }\r\n    }\r\n\r\n    private findTargetFishInWorld() {\r\n        this.curIntervalFindTargetFish = this.intervalFindTargetFish;\r\n\r\n        let listFishActiveInWorld = [];\r\n\r\n        var gunWorldPos = this.mePlayer.gunRotate.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        for (let i = 0; i < this.fishs.length; i++) {\r\n            var fishNode = this.fishs[i].node;\r\n            if (fishNode.active && Math.abs(fishNode.position.x) <= 640 * 0.8 && Math.abs(fishNode.position.y) <= 360 * 0.8) {\r\n                var fishWorldPos = fishNode.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n                var distance = Utils.v2Distance(gunWorldPos, fishWorldPos);\r\n                if (distance >= 135) {\r\n                    listFishActiveInWorld.push({\r\n                        fish: this.fishs[i],\r\n                        distance: distance\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        if (listFishActiveInWorld.length > 0) {\r\n            this.targetFish = listFishActiveInWorld[Utils.randomRangeInt(0, listFishActiveInWorld.length)][\"fish\"];\r\n            this.target.active = true;\r\n            this.target.position = this.targetFish.node.position;\r\n        }\r\n    }\r\n\r\n    private stopAutoShoot() {\r\n        this.isShoot = false;\r\n        this.toggleAuto.isChecked = false;\r\n        this.target.active = false;\r\n        this.touchPad.active = true;\r\n        this.curIntervalFindTargetFish = 0;\r\n        this.targetFish = null;\r\n    }\r\n\r\n    private getBullet(): Bullet {\r\n        let bullet: Bullet = null;\r\n        for (let i = 0; i < this.bullets.length; i++) {\r\n            if (!this.bullets[i].node.active) {\r\n                bullet = this.bullets[i];\r\n                break;\r\n            }\r\n        }\r\n        if (bullet == null) {\r\n            let node = cc.instantiate(this.bulletTemplate);\r\n            node.parent = this.bulletTemplate.parent;\r\n            bullet = node.getComponent(Bullet);\r\n            this.bullets.push(bullet);\r\n        }\r\n        bullet.node.active = true;\r\n        bullet.targetFishId = -1;\r\n        return bullet;\r\n    }\r\n\r\n    private exploreAllBulletWithTargetFishId(fishId: number) {\r\n        for (let i = 0; i < this.bullets.length; i++) {\r\n            if (this.bullets[i].node.active && this.bullets[i].targetFishId >= 0 && this.bullets[i].targetFishId == fishId) {\r\n                this.bullets[i].targetFishId = -1;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getCoinEffect(): CoinEffect {\r\n        let coinEffect: CoinEffect = null;\r\n        for (let i = 0; i < this.coinEffects.length; i++) {\r\n            if (!this.coinEffects[i].node.active) {\r\n                coinEffect = this.coinEffects[i];\r\n                break;\r\n            }\r\n        }\r\n        if (coinEffect == null) {\r\n            let node = cc.instantiate(this.coinEffectTemplate);\r\n            node.parent = this.coinEffectTemplate.parent;\r\n            coinEffect = node.getComponent(CoinEffect);\r\n            this.coinEffects.push(coinEffect);\r\n        }\r\n        coinEffect.node.active = true;\r\n        coinEffect.node.setSiblingIndex(coinEffect.node.parent.children.length - 1);\r\n        return coinEffect;\r\n    }\r\n\r\n    private getFishById(id: number): Fish {\r\n        for (let i = 0; i < this.fishs.length; i++) {\r\n            if (this.fishs[i].id == id) return this.fishs[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getPlayerById(id: number): Player {\r\n        if (id <= 0) return null;\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            if (this.players[i].id > 0 && this.players[i].id == id) return this.players[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getPlayerByUsername(username: string): Player {\r\n        if (username == null || username == \"\") return null;\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            if (this.players[i].username != null && this.players[i].username != \"\" && this.players[i].username == username) return this.players[i];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getFishAnimByType(type: number): cc.Node {\r\n        let name = \"\";\r\n        switch (type) {\r\n            case 0:\r\n                name = \"fish0\";\r\n                break;\r\n            case 1:\r\n                name = \"fish1\";\r\n                break;\r\n            case 2:\r\n                name = \"fish2\";\r\n                break;\r\n            case 3:\r\n                name = \"fish3\";\r\n                break;\r\n            case 4:\r\n                name = \"fish4\";\r\n                break;\r\n            case 5:\r\n                name = \"fish5\";\r\n                break;\r\n            case 6:\r\n                name = \"fish6\";\r\n                break;\r\n            case 7:\r\n                name = \"fish7\";\r\n                break;\r\n            case 8:\r\n                name = \"fish9\";\r\n                break;\r\n            case 9:\r\n                name = \"fish9\";\r\n                break;\r\n            case 10:\r\n                name = \"fish10\";\r\n                break;\r\n            case 11:\r\n                name = \"fish11\";\r\n                break;\r\n            case 12:\r\n                name = \"fish12\";\r\n                break;\r\n            case 13:\r\n                name = \"fish13\";\r\n                break;\r\n            case 14:\r\n                name = \"fish14\";\r\n                break;\r\n            case 15:\r\n                name = \"fish15\";\r\n                break;\r\n            case 16:\r\n                name = \"fish16\";\r\n                break;\r\n            case 17:\r\n                name = \"fish17\";\r\n                break;\r\n            case 18:\r\n                name = \"fish18\";\r\n                break;\r\n            case 19:\r\n                name = \"fish19\";\r\n                break;\r\n            case 20:\r\n                name = \"fish20\";\r\n                break;\r\n            case 21:\r\n                name = \"fish21\";\r\n                break;\r\n            case 22:\r\n                name = \"fish22\";\r\n                break;\r\n            case 23:\r\n                name = \"fish23\";\r\n                break;\r\n            case 24:\r\n                name = \"fish24\";\r\n                break;\r\n        }\r\n        for (let i = 0; i < this.fishsAnim.length; i++) {\r\n            if (this.fishsAnim[i].name != null && this.fishsAnim[i].name != \"\" && this.fishsAnim[i].name == name) {\r\n                return this.fishsAnim[i];\r\n            }\r\n        }\r\n        return this.fishsAnim[0];\r\n    }\r\n\r\n    public actGetState() {\r\n        this.getState(false);\r\n    }\r\n\r\n    public actBetUp() {\r\n        if (this.betIdx < this.listBet.length - 1) {\r\n            this.betIdx++;\r\n            this.mePlayer.lblBet.string = Utils.formatNumberMin(this.listBet[this.betIdx]);\r\n            this.mePlayer.setGun(this.betIdx);\r\n            Tween.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], 0.3);\r\n        }\r\n    }\r\n\r\n    public actBetDown() {\r\n        if (this.betIdx > 0) {\r\n            this.betIdx--;\r\n            this.mePlayer.lblBet.string = Utils.formatNumberMin(this.listBet[this.betIdx]);\r\n            this.mePlayer.setGun(this.betIdx);\r\n            Tween.numberTo(this.lblJackpot, this.listJackpot[this.betIdx], 0.3);\r\n        }\r\n    }\r\n\r\n    public actBack() {\r\n        App.instance.confirmDialog.show2(\"Bạn có muốn rời khỏi bàn không\", (isConfirm) => {\r\n            if (isConfirm) {\r\n                this.back();\r\n            }\r\n        });\r\n    }\r\n\r\n    public actFastShoot() {\r\n        this.isFastShoot = true;\r\n        this.btnFastShoot.enabled = false;\r\n        var cDuration = Play.SERVER_CONFIG['FastFireDuration'];\r\n        this.progressFastShoot.progress = 1;\r\n        this.tweens.push(cc.tween(this.progressFastShoot).to(cDuration, { progress: 0 }).call(() => {\r\n            this.isFastShoot = false;\r\n            this.curTimeFastShootCountdown = Play.SERVER_CONFIG['FastFireCoolDownS'];\r\n            this.lblFastShootTime.string = this.curTimeFastShootCountdown + \"s\";\r\n            this.lblFastShootTime.node.active = true;\r\n        }).start());\r\n    }\r\n\r\n    public actTargetFish() {\r\n        this.isShoot = true;\r\n        this.isTargetFish = true;\r\n        this.btnTargetFish.enabled = false;\r\n        var cDuration = Play.SERVER_CONFIG['SnipeDurationS'];\r\n        this.progressTargetFish.progress = 1;\r\n        this.tweens.push(cc.tween(this.progressTargetFish).to(cDuration, { progress: 0 }).call(() => {\r\n            this.isTargetFish = false;\r\n            this.targetFish = null;\r\n            this.target.active = false;\r\n            this.curTimeTargetFishCountdown = Play.SERVER_CONFIG['SnipeCoolDownS'];\r\n            this.lblTargetFishTime.string = this.curTimeTargetFishCountdown + \"s\";\r\n            this.lblTargetFishTime.node.active = true;\r\n            this.fishs.forEach(x => {\r\n                x.getComponent(cc.Button).enabled = false;\r\n            });\r\n            this.isShoot = this.toggleAuto.isChecked;\r\n            this.touchPad.active = !this.toggleAuto.isChecked;\r\n        }).start());\r\n\r\n        this.touchPad.active = false;\r\n        this.fishs.forEach(x => {\r\n            x.getComponent(cc.Button).enabled = true;\r\n            x.node.off(\"click\");\r\n            x.node.on(\"click\", () => {\r\n                this.targetFish = x;\r\n                this.target.active = true;\r\n            });\r\n        });\r\n    }\r\n\r\n    private back() {\r\n        this.isStateGeted = false;\r\n        this.stopAutoShoot();\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"quit\", null, () => {\r\n            App.instance.showLoading(false);\r\n            this.resetView();\r\n            this.show(false);\r\n            this.lobby.getComponent(Lobby).show(true);\r\n        }, this);\r\n    }\r\n\r\n    public actEffectJackpotTest() {\r\n        this.effectJackpot.show(true, \"Test nickname\", 54032423);\r\n    }\r\n\r\n    public actEffectBigWinTest() {\r\n        this.effectBigWin.show(true, \"Test nickname\", 54032423);\r\n    }\r\n\r\n    public actEffectMegaWinTest() {\r\n        this.effectMegaWin.show(true, \"Test nickname\", 54032423);\r\n    }\r\n\r\n    public show(isShow: boolean, roomId: number = 0) {\r\n        if (isShow) {\r\n            if (Play.SERVER_CONFIG == null) {\r\n                this.lobby.getComponent(Lobby).show(true);\r\n                App.instance.alertDialog.showMsg(\"Bạn chưa đăng nhập.\");\r\n                return;\r\n            }\r\n            this.node.active = true;\r\n            this.loading.active = true;\r\n            this.roomId = roomId;\r\n\r\n            this.stopAutoShoot();\r\n            this.panelMenu.show(false);\r\n\r\n            this.listBet.length = 0;\r\n            this.listBet.push(Play.SERVER_CONFIG[\"TypeToValue\"][\"Bullet1\"] * Play.SERVER_CONFIG['TableBulletValueRate'][this.roomId]);\r\n            this.listBet.push(Play.SERVER_CONFIG[\"TypeToValue\"][\"Bullet2\"] * Play.SERVER_CONFIG['TableBulletValueRate'][this.roomId]);\r\n            this.listBet.push(Play.SERVER_CONFIG[\"TypeToValue\"][\"Bullet3\"] * Play.SERVER_CONFIG['TableBulletValueRate'][this.roomId]);\r\n            this.listBet.push(Play.SERVER_CONFIG[\"TypeToValue\"][\"Bullet4\"] * Play.SERVER_CONFIG['TableBulletValueRate'][this.roomId]);\r\n            this.shootInterval = 1 / Play.SERVER_CONFIG[\"FIRE_RATE\"];\r\n            this.fastShootInterval = this.shootInterval / Play.SERVER_CONFIG[\"FastFireRate\"];\r\n            this.play();\r\n        } else {\r\n            if (this.popupGuide.active) {\r\n                this.popupGuide.getComponent(PopupGuide).dismiss();\r\n            }\r\n            this.node.active = false;\r\n        }\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport cmd from \"../../Lobby/LobbyScript/Lobby.Cmd\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialog\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport MiniGameNetworkClient from \"../../Lobby/LobbyScript/Script/networks/MiniGameNetworkClient\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass(\"PopupCoinTransfer.TabCashIn\")\r\nexport class TabCashIn {\r\n    @property(cc.Label)\r\n    lblBalance: cc.Label = null;\r\n    @property(cc.EditBox)\r\n    edbCoin: cc.EditBox = null;\r\n    @property(cc.Node)\r\n    quickButtons: cc.Node = null;\r\n\r\n    private popup: PopupCoinTransfer = null;\r\n\r\n    private readonly values = [50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, 20000000];\r\n\r\n    public start(popup: PopupCoinTransfer) {\r\n        this.popup = popup;\r\n        this.edbCoin.node.on(\"editing-did-ended\", () => {\r\n            let number = Utils.stringToInt(this.edbCoin.string);\r\n            this.edbCoin.string = Utils.formatNumber(number);\r\n        });\r\n        for (let i = 0; i < this.quickButtons.childrenCount; i++) {\r\n            var btn = this.quickButtons.children[i];\r\n            let value = this.values[i];\r\n            btn.getComponentInChildren(cc.Label).string = Utils.formatNumber(value);\r\n            btn.on(\"click\", () => {\r\n                this.edbCoin.string = Utils.formatNumber(value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public submit() {\r\n        let coin = Utils.stringToInt(this.edbCoin.string);\r\n        if (coin <= 0) {\r\n            App.instance.alertDialog.showMsg(\"Số tiền đã nhập không hợp lệ.\");\r\n            return;\r\n        }\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"xxengCashin\", { \"ccash\": coin }, (res) => {\r\n            App.instance.showLoading(false);\r\n            // cc.log(res);\r\n            if (!res[\"ok\"]) {\r\n                App.instance.alertDialog.showMsg(\"Thao tác thất bại, vui lòng thử lại sau.\");\r\n                return;\r\n            }\r\n            Configs.Login.CoinFish = res[\"newCash\"];\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            App.instance.alertDialog.showMsg(\"Thao tác thành công.\");\r\n            this.reset();\r\n\r\n            MiniGameNetworkClient.getInstance().send(new cmd.ReqGetMoneyUse());\r\n        }, this.popup);\r\n    }\r\n\r\n    public reset() {\r\n        this.edbCoin.string = \"\";\r\n        this.lblBalance.string = Utils.formatNumber(Configs.Login.Coin);\r\n    }\r\n}\r\n\r\n@ccclass(\"PopupCoinTransfer.TabCashOut\")\r\nexport class TabCashOut {\r\n    @property(cc.Label)\r\n    lblBalance: cc.Label = null;\r\n    @property(cc.EditBox)\r\n    edbCoin: cc.EditBox = null;\r\n    @property(cc.Node)\r\n    quickButtons: cc.Node = null;\r\n\r\n    private popup: PopupCoinTransfer = null;\r\n\r\n    private readonly values = [50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, 20000000];\r\n\r\n    public start(popup: PopupCoinTransfer) {\r\n        this.popup = popup;\r\n        this.edbCoin.node.on(\"editing-did-ended\", () => {\r\n            let number = Utils.stringToInt(this.edbCoin.string);\r\n            this.edbCoin.string = Utils.formatNumber(number);\r\n        });\r\n        for (let i = 0; i < this.quickButtons.childrenCount; i++) {\r\n            var btn = this.quickButtons.children[i];\r\n            let value = this.values[i];\r\n            btn.getComponentInChildren(cc.Label).string = Utils.formatNumber(value);\r\n            btn.on(\"click\", () => {\r\n                this.edbCoin.string = Utils.formatNumber(value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public submit() {\r\n        let coin = Utils.stringToInt(this.edbCoin.string);\r\n        if (coin <= 0) {\r\n            App.instance.alertDialog.showMsg(\"Số tiền đã nhập không hợp lệ.\");\r\n            return;\r\n        }\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"xxengCashin\", { \"ccash\": -coin }, (res) => {\r\n            App.instance.showLoading(false);\r\n            // cc.log(res);\r\n            if (!res[\"ok\"]) {\r\n                App.instance.alertDialog.showMsg(\"Thao tác thất bại, vui lòng thử lại sau.\");\r\n                return;\r\n            }\r\n            Configs.Login.CoinFish = res[\"newCash\"];\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            App.instance.alertDialog.showMsg(\"Thao tác thành công.\");\r\n            this.reset();\r\n\r\n            MiniGameNetworkClient.getInstance().send(new cmd.ReqGetMoneyUse());\r\n        }, this.popup);\r\n    }\r\n\r\n    public reset() {\r\n        this.edbCoin.string = \"\";\r\n        this.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n    }\r\n}\r\n\r\n@ccclass\r\nexport default class PopupCoinTransfer extends Dialog {\r\n    @property(cc.ToggleContainer)\r\n    tabs: cc.ToggleContainer = null;\r\n    @property(cc.Node)\r\n    tabContents: cc.Node = null;\r\n    @property(TabCashIn)\r\n    tabCashIn: TabCashIn = null;\r\n    @property(TabCashOut)\r\n    tabCashOut: TabCashOut = null;\r\n\r\n    private tabSelectedIdx = 0;\r\n\r\n    start() {\r\n        for (let i = 0; i < this.tabs.toggleItems.length; i++) {\r\n            this.tabs.toggleItems[i].node.on(\"toggle\", () => {\r\n                this.tabSelectedIdx = i;\r\n                this.onTabChanged();\r\n            });\r\n        }\r\n\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            this.tabCashIn.lblBalance.string = Utils.formatNumber(Configs.Login.Coin);\r\n            this.tabCashOut.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n        }, this);\r\n\r\n        this.tabCashIn.start(this);\r\n        this.tabCashOut.start(this);\r\n    }\r\n\r\n    show() {\r\n        super.show();\r\n        this.tabSelectedIdx = 0;\r\n        this.tabs.toggleItems[this.tabSelectedIdx].isChecked = true;\r\n        this.onTabChanged();\r\n    }\r\n\r\n    private onTabChanged() {\r\n        for (let i = 0; i < this.tabContents.childrenCount; i++) {\r\n            this.tabContents.children[i].active = i == this.tabSelectedIdx;\r\n        }\r\n        for (let j = 0; j < this.tabs.toggleItems.length; j++) {\r\n            this.tabs.toggleItems[j].node.getComponentInChildren(cc.LabelOutline).color = j == this.tabSelectedIdx ? cc.Color.BLACK.fromHEX(\"#AA5F00\") : cc.Color.BLACK.fromHEX(\"#4677F3\");\r\n        }\r\n        switch (this.tabSelectedIdx) {\r\n            case 0:\r\n                this.tabCashIn.reset();\r\n                break;\r\n            case 1:\r\n                this.tabCashOut.reset();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public actSubmitCashIn() {\r\n        this.tabCashIn.submit();\r\n    }\r\n\r\n    public actSubmitCashOut() {\r\n        this.tabCashOut.submit();\r\n    }\r\n\r\n    public actClearCashIn() {\r\n        this.tabCashIn.edbCoin.string = \"0\";\r\n    }\r\n\r\n    public actClearCashOut() {\r\n        this.tabCashOut.edbCoin.string = \"0\";\r\n    }\r\n}\r\n","import Dialog from \"../../Lobby/LobbyScript/Script/common/Dialog\";\r\nimport Play from \"./ShootFish.Play\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupGuide extends Dialog {\r\n    @property(cc.Node)\r\n    grid: cc.Node = null;\r\n    @property(cc.Node)\r\n    itemTemplate: cc.Node = null;\r\n\r\n    private items: Array<cc.Node> = [];\r\n\r\n    private mapFishType = {\r\n        0: [\"Cuttle\", 1],\r\n        1: ['GoldFish', 1],\r\n        2: ['LightenFish', 1],\r\n        3: ['Mermaid', 1],\r\n        4: ['Octopus', 1],\r\n        5: ['PufferFish', 1],\r\n        6: ['SeaFish', 1],\r\n        7: ['Shark', 1],\r\n        8: ['Stringray', 1],\r\n        9: ['Turtle', 1],\r\n        10: ['CaThanTai', 1],\r\n        11: ['FlyingFish', 1],\r\n        12: ['GoldenFrog', 0.2],\r\n        13: ['SeaTurtle', 1],\r\n        14: ['MerMan', 1],\r\n        15: ['Phoenix', 0.7],\r\n        16: ['MermaidBig', 0.6],\r\n        17: ['MermaidSmall', 0.6],\r\n        18: ['BombFish', 0.6],\r\n        19: ['Fish19', 0.6],\r\n        20: ['Fish20', 0.6],\r\n        21: ['Fish21', 0.4],\r\n        22: ['Fish22', 0.3],\r\n        23: ['Fish23', 0.3],\r\n        24: ['Fish24', 0.3],\r\n    }\r\n\r\n    show(){\r\n        super.show();\r\n        this.itemTemplate.active = false;\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        if(Play.SERVER_CONFIG == null) return;\r\n        for (let fishId in this.mapFishType) {\r\n            let fishName = this.mapFishType[fishId][0];\r\n            let scale = this.mapFishType[fishId][1];\r\n            let dataConfig = Play.SERVER_CONFIG[\"FishPhysicalData\"][fishName];\r\n\r\n            let node = cc.instantiate(this.itemTemplate);\r\n            node.parent = this.grid;\r\n            node.active = true;\r\n\r\n            let fish = cc.instantiate(Play.instance.getFishAnimByType(Number(fishId)));\r\n            fish.parent = node.getChildByName(\"fishParent\");\r\n            fish.scale = scale;\r\n            fish.angle = 35;\r\n\r\n            node.getChildByName(\"lblFactor\").getComponent(cc.Label).string = (dataConfig[\"Health\"] / 100).toString();\r\n            this.items.push(node);\r\n        }\r\n    }\r\n\r\n    dismiss() {\r\n        this.items.forEach(x => {\r\n            x.removeFromParent();\r\n        });\r\n        super.dismiss();\r\n    }\r\n}\r\n"],"file":"index.js"}