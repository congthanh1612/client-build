{"version":3,"sources":["assets/OanTuTi/OanTuTiScript/OanTuTi.OanTuTiController.ts","assets/OanTuTi/OanTuTiScript/OanTuTi.PopupCoinTransfer.ts","assets/OanTuTi/OanTuTiScript/OanTuTi.PopupHistory.ts","assets/OanTuTi/OanTuTiScript/OanTuTi.PopupHonors.ts"],"names":["Configs_1","require","MiniGame_1","App_1","BroadcastReceiver_1","Utils_1","ShootFishNetworkClient_1","OanTuTi_PopupCoinTransfer_1","Http_1","SPUtils_1","_a","cc","_decorator","ccclass","property","OanTuTiController","_super","_this","apply","this","arguments","lblCoin","lblBet","btnBets","btnPlayNow","panelSelectBet","players","mePlayer","otherPlayer","panelSearchingMatch","panelPlaying","panelResult","lblSearching","btnCancel","lblTime","progressTime","btnPlays","sprPlaysActive","sprPlaysNormal","sprResults","toggleAuto","popups","popupCoinTransfer","listBet","timePlaying","remainTime","lastBetValue","isPlaying","__extends","prototype","start","default","register","USER_UPDATE_COIN","node","active","string","formatNumber","Login","CoinFish","send","getInstance","addListener","route","push","indexOf","otherNickname","otherAvatar","UserIdFish","getChildByName","getComponent","Label","Sprite","spriteFrame","instance","getAvatarSpriteFrame","Math","floor","parent","fillRange","i","length","interactable","result","changeCash1","changeCash2","blind","lblWin","lblLose","scheduleOnce","resetView","isChecked","selectBet","choice1","choice2","meValue","otherValue","meActive","otherActive","hoa","thang","thua","sp","Skeleton","setAnimation","_loop_1","this_1","on","_loop_2","this_2","play","update","dt","max","t","round","show","reOrder","call","_onShowed","checkConnect","isLogined","confirmDialog","show3","isConfirm","dismiss","actBack","alertDialog","showMsg","audioEngine","stopAll","loadScene","actLogin","username","Username","password","Password","showLoading","get","App","API","c","un","pw","md5","err","res","parseInt","AccessToken","SessionKey","IsLogin","userInfo","JSON","parse","base64","decode","Nickname","Avatar","Coin","LuckyWheel","IpAddress","CreateTime","Birthday","VipPoint","VipPointSave","setUserName","setUserPass","buttonMiniGame","USER_INFO_UPDATED","popupUpdateNickname","show2","interactableBtnBets","playNow","betValue","request","userId","nickname","value","selectValue","choice","enabled","actCancel","__decorate","Button","Node","SpriteFrame","Toggle","exports","Lobby_Cmd_1","Dialogz_1","MiniGameNetworkClient_1","TabCashIn","lblBalance","edbCoin","quickButtons","popup","values","number","stringToInt","btn","children","getComponentInChildren","childrenCount","submit","coin","ccash","reset","ReqGetMoneyUse","EditBox","TabCashOut","PopupCoinTransfer","tabs","tabContents","tabCashIn","tabCashOut","tabSelectedIdx","_loop_3","this_3","toggleItems","onTabChanged","actSubmitCashIn","actSubmitCashOut","actClearCashIn","actClearCashOut","ToggleContainer","PopupHistory","lblPage","itemTemplate","page","maxPage","items","Array","data","loadData","actNextPage","loadDataLocal","actPrevPage","item","instantiate","destroy","ceil","startIdx","count","itemData","opacity","getChoiceName","PopupHonors"],"mappings":"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","sourcesContent":["import Configs from \"../../Loading/src/Configs\";\r\nimport MiniGame from \"../../Lobby/LobbyScript/MiniGame\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\nimport PopupCoinTransfer from \"./OanTuTi.PopupCoinTransfer\";\r\nimport Http from \"../../Loading/src/Http\";\r\nimport SPUtils from \"../../Lobby/LobbyScript/Script/common/SPUtils\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class OanTuTiController extends MiniGame {\r\n\r\n    @property(cc.Label)\r\n    public lblCoin: cc.Label = null;\r\n    @property(cc.Label)\r\n    public lblBet: cc.Label = null;\r\n    @property([cc.Button])\r\n    public btnBets: cc.Button[] = [];\r\n    @property(cc.Button)\r\n    public btnPlayNow: cc.Button = null;\r\n\r\n    @property(cc.Node)\r\n    public panelSelectBet: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public players: cc.Node = null;\r\n    @property(cc.Node)\r\n    public mePlayer: cc.Node = null;\r\n    @property(cc.Node)\r\n    public otherPlayer: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    public panelSearchingMatch: cc.Node = null;\r\n    @property(cc.Node)\r\n    public panelPlaying: cc.Node = null;\r\n    @property(cc.Node)\r\n    public panelResult: cc.Node = null;\r\n\r\n    //searching\r\n    @property(cc.Label)\r\n    public lblSearching: cc.Label = null;\r\n    @property(cc.Button)\r\n    public btnCancel: cc.Button = null;\r\n\r\n    //playing\r\n    @property(cc.Label)\r\n    public lblTime: cc.Label = null;\r\n    @property(cc.Sprite)\r\n    public progressTime: cc.Sprite = null;\r\n    @property([cc.Button])\r\n    public btnPlays: cc.Button[] = [];\r\n    @property([cc.SpriteFrame])\r\n    public sprPlaysActive: cc.SpriteFrame[] = [];\r\n    @property([cc.SpriteFrame])\r\n    public sprPlaysNormal: cc.SpriteFrame[] = [];\r\n\r\n    //result\r\n    @property([cc.SpriteFrame])\r\n    public sprResults: cc.SpriteFrame[] = [];\r\n\r\n    @property(cc.Toggle)\r\n    public toggleAuto: cc.Toggle = null;\r\n\r\n    @property([cc.Node])\r\n    public popups: cc.Node[] = [];\r\n\r\n    @property(PopupCoinTransfer)\r\n    public popupCoinTransfer: PopupCoinTransfer = null;\r\n\r\n    private readonly listBet = [1000, 5000, 10000, 50000, 100000];\r\n    private readonly timePlaying = 10;\r\n    private remainTime = 0;\r\n    private lastBetValue = 0;\r\n    private isPlaying = false;\r\n\r\n    start() {\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            if (!this.node.active) return;\r\n            this.lblCoin.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n        }, this);\r\n        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n\r\n        ShootFishNetworkClient.getInstance().addListener((route, push) => {\r\n            if (!this.node.active) return;\r\n            let routesLog = [\"OttOnMatching\", \"OttOnMatchStart\", \"OttOnMatchEnd\", \"OttOnMatchSolved\"];\r\n            if (routesLog.indexOf(route) >= 0) {\r\n           //     console.log(route);\r\n           //     console.log(push);\r\n            }\r\n            switch (route) {\r\n                case \"OttOnMatching\": {\r\n                    let otherNickname = \"\";\r\n                    let otherAvatar = \"\";\r\n                    if (push[\"userId1\"] == Configs.Login.UserIdFish) {\r\n                        otherNickname = push[\"nickname2\"];\r\n                        otherAvatar = push[\"avatar2\"];\r\n                    } else {\r\n                        otherNickname = push[\"nickname1\"];\r\n                        otherAvatar = push[\"avatar1\"];\r\n                    }\r\n\r\n                    this.panelSelectBet.active = false;\r\n                    this.panelPlaying.active = false;\r\n                    this.players.active = true;\r\n\r\n                    this.lblSearching.string = \"ĐÃ TÌM THẤY ĐỐI THỦ\";\r\n                    this.btnCancel.node.active = false;\r\n\r\n                    this.otherPlayer.active = true;\r\n                    this.otherPlayer.getChildByName(\"lblNickname\").getComponent(cc.Label).string = otherNickname;\r\n                    this.otherPlayer.getChildByName(\"sprAvatar\").getComponent(cc.Sprite).spriteFrame = App.instance.getAvatarSpriteFrame(otherAvatar);\r\n\r\n                    this.lblBet.string = \"CƯỢC: \" + (Math.floor(push[\"blind\"] / 1000)) + \"K\";\r\n                }\r\n                    break;\r\n                case \"OttOnMatchStart\": {\r\n                    this.panelSearchingMatch.active = false;\r\n                    this.panelPlaying.active = true;\r\n                    this.panelResult.active = false;\r\n                    this.players.active = true;\r\n\r\n                    this.remainTime = this.timePlaying;\r\n                    this.lblTime.node.parent.active = true;\r\n                    this.progressTime.fillRange = 1;\r\n\r\n                    for (let i = 0; i < this.btnPlays.length; i++) {\r\n                        this.btnPlays[i].interactable = true;\r\n                        this.btnPlays[i].getComponent(cc.Sprite).spriteFrame = this.sprPlaysActive[i];\r\n                    }\r\n                }\r\n                    break;\r\n                case \"OttOnMatchEnd\": {\r\n                    let result: number = push[\"result\"];///result: 0: hoà, 1: player1 thắng, 2: player2 thắng\r\n                    let changeCash1: number = push[\"changeCash1\"];\r\n                    let changeCash2: number = push[\"changeCash2\"];\r\n                    let blind: number = push[\"blind\"];\r\n\r\n                    let lblWin = this.panelResult.getChildByName(\"lblWin\");\r\n                    let lblLose = this.panelResult.getChildByName(\"lblLose\")\r\n\r\n                    if (push[\"userId1\"] == Configs.Login.UserIdFish) {\r\n                        if (result != 0) {\r\n                            if (result == 1) {\r\n                                lblWin.getComponent(cc.Label).string = \"+\" + Utils.formatNumber(changeCash1);\r\n                            } else {\r\n                                lblLose.getComponent(cc.Label).string = Utils.formatNumber(-blind);\r\n                            }\r\n                        }\r\n                        Configs.Login.CoinFish = push[\"cash1\"];\r\n                    } else {\r\n                        if (result != 0) {\r\n                            if (result == 2) {\r\n                                lblWin.getComponent(cc.Label).string = \"+\" + Utils.formatNumber(changeCash2);\r\n                            } else {\r\n                                lblLose.getComponent(cc.Label).string = Utils.formatNumber(-blind);\r\n                            }\r\n                        }\r\n                        Configs.Login.CoinFish = push[\"cash2\"];\r\n                    }\r\n                    BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n\r\n                    this.scheduleOnce(() => {\r\n                        this.resetView();\r\n                        if (this.toggleAuto.isChecked) {\r\n                            this.selectBet(this.lastBetValue);\r\n                        } else {\r\n                            this.isPlaying = false;\r\n                        }\r\n                    }, 5);\r\n                }\r\n                case \"OttOnMatchSolved\": {\r\n                    this.panelResult.active = true;\r\n                    this.lblTime.node.parent.active = false;\r\n\r\n                    let result: number = push[\"result\"]; ///result: 0: hoà, 1: player1 thắng, 2: player2 thắng\r\n                    let choice1: number = push[\"choice1\"];\r\n                    let choice2: number = push[\"choice2\"];\r\n\r\n                    let meValue = this.panelResult.getChildByName(\"meValue\");\r\n                    let otherValue = this.panelResult.getChildByName(\"otherValue\");\r\n                    let meActive = meValue.getChildByName(\"active\");\r\n                    let otherActive = otherValue.getChildByName(\"active\");\r\n\r\n                    let lblWin = this.panelResult.getChildByName(\"lblWin\");\r\n                    lblWin.active = false;\r\n                    let lblLose = this.panelResult.getChildByName(\"lblLose\")\r\n                    lblLose.active = false;\r\n                    let hoa = this.panelResult.getChildByName(\"hoa\");\r\n                    hoa.active = false;\r\n                    let thang = this.panelResult.getChildByName(\"thang\");\r\n                    thang.active = false;\r\n                    let thua = this.panelResult.getChildByName(\"thua\");\r\n                    thua.active = false;\r\n\r\n                    if (push[\"userId1\"] == Configs.Login.UserIdFish) {\r\n                        meValue.getComponent(cc.Sprite).spriteFrame = this.sprResults[choice1];\r\n                        otherValue.getComponent(cc.Sprite).spriteFrame = this.sprResults[choice2];\r\n                        for (let i = 0; i < this.btnPlays.length; i++) {\r\n                            this.btnPlays[i].interactable = false;\r\n                            this.btnPlays[i].getComponent(cc.Sprite).spriteFrame = choice1 == i ? this.sprPlaysActive[i] : this.sprPlaysNormal[i];\r\n                        }\r\n\r\n                        if (result == 0) {\r\n                            hoa.active = true;\r\n                            hoa.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                            meActive.active = true;\r\n                            otherActive.active = true;\r\n                        } else {\r\n                            if (result == 1) {\r\n                                thang.active = true;\r\n                                thang.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                                lblWin.active = true;\r\n                                meActive.active = true;\r\n                                otherActive.active = false;\r\n                            } else {\r\n                                thua.active = true;\r\n                                thua.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                                lblLose.active = true;\r\n                                meActive.active = false;\r\n                                otherActive.active = true;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        meValue.getComponent(cc.Sprite).spriteFrame = this.sprResults[choice2];\r\n                        otherValue.getComponent(cc.Sprite).spriteFrame = this.sprResults[choice1];\r\n                        for (let i = 0; i < this.btnPlays.length; i++) {\r\n                            this.btnPlays[i].interactable = false;\r\n                            this.btnPlays[i].getComponent(cc.Sprite).spriteFrame = choice2 == i ? this.sprPlaysActive[i] : this.sprPlaysNormal[i];\r\n                        }\r\n\r\n                        if (result == 0) {\r\n                            hoa.active = true;\r\n                            hoa.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                            meActive.active = true;\r\n                            otherActive.active = true;\r\n                        } else {\r\n                            if (result == 2) {\r\n                                thang.active = true;\r\n                                thang.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                                lblWin.active = true;\r\n                                meActive.active = true;\r\n                                otherActive.active = false;\r\n                            } else {\r\n                                thua.active = true;\r\n                                thua.getComponent(sp.Skeleton).setAnimation(0, \"animation\", false);\r\n                                lblLose.active = true;\r\n                                meActive.active = false;\r\n                                otherActive.active = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }, this);\r\n\r\n        for (let i = 0; i < this.btnBets.length; i++) {\r\n            this.btnBets[i].node.on(\"click\", () => {\r\n                this.selectBet(this.listBet[i]);\r\n            });\r\n        }\r\n        for (let i = 0; i < this.btnPlays.length; i++) {\r\n            this.btnPlays[i].node.on(\"click\", () => {\r\n                this.play(i);\r\n            });\r\n        }\r\n    }\r\n\r\n    update(dt: number) {\r\n        if (this.remainTime > 0) {\r\n            this.remainTime = Math.max(0, this.remainTime - dt);\r\n            let t = Math.round(this.remainTime);\r\n            this.lblTime.string = (t > 9 ? \"\" : \"0\") + t;\r\n            this.progressTime.fillRange = this.remainTime / this.timePlaying;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        if (this.node.active) {\r\n            this.reOrder();\r\n            return;\r\n        }\r\n        super.show();\r\n        this.toggleAuto.isChecked = false;\r\n        this.resetView();\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        ShootFishNetworkClient.getInstance().checkConnect((isLogined) => {\r\n            if (!this.node.active) return;\r\n            if (!isLogined) {\r\n                this.dismiss();\r\n                return;\r\n            }\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            if (Configs.Login.CoinFish <= 0) {\r\n                App.instance.confirmDialog.show3(\"Tiền trong game của bạn đã hết, bạn có muốn chuyển tiền vào không?\", \"Có\", (isConfirm) => {\r\n                    if (isConfirm) {\r\n                        this.popupCoinTransfer.show();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\nactBack() {\r\n\tif (this.isPlaying) {\r\n            App.instance.alertDialog.showMsg(\"Bạn đang chơi không thể thoát.\");\r\n            return;\r\n        }\r\n        // NetworkClient.getInstance().close();\r\n        cc.audioEngine.stopAll();\r\n        App.instance.loadScene(\"Lobby\");\r\n    }\r\n\tactLogin(): void {\r\n           let username = Configs.Login.Username;\r\n            let password = Configs.Login.Password;\r\n\r\n            App.instance.showLoading(true);\r\n            Http.get(Configs.App.API, { c: 3, un: username, pw: md5(password) }, (err, res) => {\r\n                App.instance.showLoading(false);\r\n                if (err != null) {\r\n                    App.instance.alertDialog.showMsg(\"Đăng nhập không thành công, vui lòng kiểm tra lại kết nối.\");\r\n                    return;\r\n                }\r\n                // console.log(res);\r\n                switch (parseInt(res[\"errorCode\"])) {\r\n                    case 0:\r\n                     //    console.log(\"Đăng nhập thành công.\");\r\n                        Configs.Login.AccessToken = res[\"accessToken\"];\r\n                        Configs.Login.SessionKey = res[\"sessionKey\"];\r\n                        Configs.Login.Username = username;\r\n                        Configs.Login.Password = password;\r\n                        Configs.Login.IsLogin = true;\r\n                        var userInfo = JSON.parse(base64.decode(Configs.Login.SessionKey));\r\n                        Configs.Login.Nickname = userInfo[\"nickname\"];\r\n                        Configs.Login.Avatar = userInfo[\"avatar\"];\r\n                        Configs.Login.Coin = userInfo[\"vinTotal\"];\r\n                        Configs.Login.LuckyWheel = userInfo[\"luckyRotate\"];\r\n                        Configs.Login.IpAddress = userInfo[\"ipAddress\"];\r\n                        Configs.Login.CreateTime = userInfo[\"createTime\"];\r\n                        Configs.Login.Birthday = userInfo[\"birthday\"];\r\n                        Configs.Login.Birthday = userInfo[\"birthday\"];\r\n                        Configs.Login.VipPoint = userInfo[\"vippoint\"];\r\n                        Configs.Login.VipPointSave = userInfo[\"vippointSave\"];\r\n\r\n                        // MiniGameNetworkClient.getInstance().checkConnect();\r\n                    //    MiniGameNetworkClient.getInstance().sendCheck(new cmd.ReqSubcribeJackpots());\r\n                    //    SlotNetworkClient.getInstance().sendCheck(new cmd.ReqSubcribeHallSlot());\r\n                    //    ShootFishNetworkClient.getInstance().checkConnect(() => {\r\n                    //        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                    //    });\r\n\r\n                   //     this.panelNotLogin.active = false;\r\n                    //    this.panelLogined.active = true;\r\n\r\n                        SPUtils.setUserName(Configs.Login.Username);\r\n                        SPUtils.setUserPass(Configs.Login.Password);\r\n\r\n                        App.instance.buttonMiniGame.show();\r\n                   //     this.getMailNotRead();\r\n\r\n                        BroadcastReceiver.send(BroadcastReceiver.USER_INFO_UPDATED);\r\n\r\n                        /* switch (VersionConfig.CPName) {\r\n                            default:\r\n                                this.popupBoomTan.show();\r\n                                break;\r\n                        } */\r\n                        break;\r\n                    case 1007:\r\n                        App.instance.alertDialog.showMsg(\"Thông tin đăng nhập không hợp lệ.\");\r\n                        break;\r\n                    case 2001:\r\n                        this.popupUpdateNickname.show2(username, password);\r\n                        break;\r\n                    default:\r\n                        App.instance.alertDialog.showMsg(\"Đăng nhập không thành công vui lòng thử lại sau.\");\r\n                        break;\r\n                }\r\n            });\r\n        }\r\n    dismiss() {\r\n        if (this.isPlaying) {\r\n            App.instance.alertDialog.showMsg(\"Bạn đang chơi không thể thoát.\");\r\n            return;\r\n        }\r\n        super.dismiss();\r\n        for (let i = 0; i < this.popups.length; i++) {\r\n            this.popups[i].active = false;\r\n        }\r\n    }\r\n\r\n    private resetView() {\r\n        this.lblBet.string = \"CHỌN CƯỢC\";\r\n\r\n        this.panelSelectBet.active = true;\r\n        this.panelPlaying.active = false;\r\n        this.panelResult.active = false;\r\n        this.players.active = false;\r\n        this.panelSearchingMatch.active = false;\r\n\r\n        this.mePlayer.active = true;\r\n        this.mePlayer.getChildByName(\"sprAvatar\").getComponent(cc.Sprite).spriteFrame = App.instance.getAvatarSpriteFrame(Configs.Login.Avatar);\r\n\r\n        this.otherPlayer.active = false;\r\n        this.otherPlayer.getChildByName(\"lblNickname\").getComponent(cc.Label).string = \"\";\r\n        this.interactableBtnBets(true);\r\n    }\r\n\r\n    public playNow() {\r\n        this.selectBet(0);\r\n    }\r\n\r\n    private selectBet(betValue: number) {\r\n        this.interactableBtnBets(false);\r\n        this.isPlaying = true;\r\n    //    console.log(\"betValue: \" + betValue);\r\n        ShootFishNetworkClient.getInstance().request(\"OTT1\", {\r\n            \"userId\": Configs.Login.UserIdFish,\r\n            \"nickname\": Configs.Login.Nickname,\r\n            \"blind\": betValue\r\n        }, (res) => {\r\n            if (res[\"code\"] != 200) {\r\n                switch (res[\"code\"]) {\r\n                    case 302:\r\n                        App.instance.alertDialog.showMsg(\"Số dư không đủ.\");\r\n                        break;\r\n                    default:\r\n                        App.instance.alertDialog.showMsg(\"Lỗi \" + res[\"code\"] + \", không xác định.\");\r\n                        break;\r\n                }\r\n                this.interactableBtnBets(true);\r\n                this.isPlaying = false;\r\n                return;\r\n            }\r\n            this.lastBetValue = betValue;\r\n\r\n            if (betValue <= 0) {\r\n                this.lblBet.string = \"CƯỢC: __\";\r\n            } else {\r\n                let value = Math.floor(betValue / 1000);\r\n                this.lblBet.string = \"CƯỢC: \" + Utils.formatNumber(value) + \"K\";\r\n            }\r\n\r\n            this.panelSelectBet.active = false;\r\n            this.panelSearchingMatch.active = true;\r\n            this.players.active = true;\r\n\r\n            this.lblSearching.string = \"ĐANG TÌM KIẾM ĐỐI THỦ...\";\r\n            this.btnCancel.node.active = true;\r\n        }, this);\r\n    }\r\n\r\n    ///selectValue: 0: kéo, 1: bao, 2: búa\r\n    private play(selectValue: number) {\r\n        ShootFishNetworkClient.getInstance().request(\"OTT2\", {\r\n            \"userId\": Configs.Login.UserIdFish,\r\n            \"choice\": selectValue\r\n        }, (res) => {\r\n       //     console.log(res);\r\n            if (res[\"code\"] != 200) {\r\n                App.instance.alertDialog.showMsg(\"Lỗi \" + res[\"code\"] + \", không xác định.\");\r\n                this.interactableBtnBets(true);\r\n                return;\r\n            }\r\n            for (let i = 0; i < this.btnPlays.length; i++) {\r\n                this.btnPlays[i].interactable = false;\r\n                this.btnPlays[i].getComponent(cc.Sprite).spriteFrame = i == selectValue ? this.sprPlaysActive[i] : this.sprPlaysNormal[i];\r\n            }\r\n        }, this);\r\n    }\r\n\r\n    private interactableBtnBets(enabled: boolean) {\r\n        for (let i = 0; i < this.btnBets.length; i++) {\r\n            this.btnBets[i].interactable = enabled;\r\n        }\r\n        this.btnPlayNow.interactable = enabled;\r\n    }\r\n\r\n    public actCancel() {\r\n        ShootFishNetworkClient.getInstance().request(\"OTT11\", {\r\n        }, (res) => {\r\n            if (res[\"code\"] != 200) {\r\n                App.instance.alertDialog.showMsg(\"Lỗi \" + res[\"code\"] + \", không xác định.\");\r\n                return;\r\n            }\r\n            this.resetView();\r\n            this.isPlaying = false;\r\n        }, this);\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport cmd from \"../../Lobby/LobbyScript/Lobby.Cmd\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialogz\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport MiniGameNetworkClient from \"../../Lobby/LobbyScript/Script/networks/MiniGameNetworkClient\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass(\"OanTuTi.PopupCoinTransfer.TabCashIn\")\r\nexport class TabCashIn {\r\n    @property(cc.Label)\r\n    lblBalance: cc.Label = null;\r\n    @property(cc.EditBox)\r\n    edbCoin: cc.EditBox = null;\r\n    @property(cc.Node)\r\n    quickButtons: cc.Node = null;\r\n\r\n    private popup: PopupCoinTransfer = null;\r\n\r\n    private readonly values = [50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, 20000000];\r\n\r\n    public start(popup: PopupCoinTransfer) {\r\n        this.popup = popup;\r\n        this.edbCoin.node.on(\"editing-did-ended\", () => {\r\n            let number = Utils.stringToInt(this.edbCoin.string);\r\n            this.edbCoin.string = Utils.formatNumber(number);\r\n        });\r\n        for (let i = 0; i < this.quickButtons.childrenCount; i++) {\r\n            var btn = this.quickButtons.children[i];\r\n            let value = this.values[i];\r\n            btn.getComponentInChildren(cc.Label).string = Utils.formatNumber(value);\r\n            btn.on(\"click\", () => {\r\n                this.edbCoin.string = Utils.formatNumber(value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public submit() {\r\n        let coin = Utils.stringToInt(this.edbCoin.string);\r\n        if (coin <= 0) {\r\n            App.instance.alertDialog.showMsg(\"Số tiền đã nhập không hợp lệ.\");\r\n            return;\r\n        }\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"xxengCashin\", { \"ccash\": coin }, (res) => {\r\n            App.instance.showLoading(false);\r\n            // console.log(res);\r\n            if (!res[\"ok\"]) {\r\n                App.instance.alertDialog.showMsg(\"Thao tác thất bại, vui lòng thử lại sau.\");\r\n                return;\r\n            }\r\n            Configs.Login.CoinFish = res[\"newCash\"];\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            App.instance.alertDialog.showMsg(\"Thao tác thành công.\");\r\n            this.reset();\r\n\r\n            MiniGameNetworkClient.getInstance().send(new cmd.ReqGetMoneyUse());\r\n        }, this.popup);\r\n    }\r\n\r\n    public reset() {\r\n        this.edbCoin.string = \"\";\r\n        this.lblBalance.string = Utils.formatNumber(Configs.Login.Coin);\r\n    }\r\n}\r\n\r\n@ccclass(\"OanTuTi.PopupCoinTransfer.TabCashOut\")\r\nexport class TabCashOut {\r\n    @property(cc.Label)\r\n    lblBalance: cc.Label = null;\r\n    @property(cc.EditBox)\r\n    edbCoin: cc.EditBox = null;\r\n    @property(cc.Node)\r\n    quickButtons: cc.Node = null;\r\n\r\n    private popup: PopupCoinTransfer = null;\r\n\r\n    private readonly values = [50000, 100000, 200000, 500000, 1000000, 2000000, 5000000, 10000000, 20000000];\r\n\r\n    public start(popup: PopupCoinTransfer) {\r\n        this.popup = popup;\r\n        this.edbCoin.node.on(\"editing-did-ended\", () => {\r\n            let number = Utils.stringToInt(this.edbCoin.string);\r\n            this.edbCoin.string = Utils.formatNumber(number);\r\n        });\r\n        for (let i = 0; i < this.quickButtons.childrenCount; i++) {\r\n            var btn = this.quickButtons.children[i];\r\n            let value = this.values[i];\r\n            btn.getComponentInChildren(cc.Label).string = Utils.formatNumber(value);\r\n            btn.on(\"click\", () => {\r\n                this.edbCoin.string = Utils.formatNumber(value);\r\n            });\r\n        }\r\n    }\r\n\r\n    public submit() {\r\n        let coin = Utils.stringToInt(this.edbCoin.string);\r\n        if (coin <= 0) {\r\n            App.instance.alertDialog.showMsg(\"Số tiền đã nhập không hợp lệ.\");\r\n            return;\r\n        }\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"xxengCashin\", { \"ccash\": -coin }, (res) => {\r\n            App.instance.showLoading(false);\r\n            // console.log(res);\r\n            if (!res[\"ok\"]) {\r\n                App.instance.alertDialog.showMsg(\"Thao tác thất bại, vui lòng thử lại sau.\");\r\n                return;\r\n            }\r\n            Configs.Login.CoinFish = res[\"newCash\"];\r\n            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n            App.instance.alertDialog.showMsg(\"Thao tác thành công.\");\r\n            this.reset();\r\n\r\n            MiniGameNetworkClient.getInstance().send(new cmd.ReqGetMoneyUse());\r\n        }, this.popup);\r\n    }\r\n\r\n    public reset() {\r\n        this.edbCoin.string = \"\";\r\n        this.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n    }\r\n}\r\n\r\n@ccclass\r\nexport default class PopupCoinTransfer extends Dialog {\r\n    @property(cc.ToggleContainer)\r\n    tabs: cc.ToggleContainer = null;\r\n    @property(cc.Node)\r\n    tabContents: cc.Node = null;\r\n    @property(TabCashIn)\r\n    tabCashIn: TabCashIn = null;\r\n    @property(TabCashOut)\r\n    tabCashOut: TabCashOut = null;\r\n\r\n    private tabSelectedIdx = 0;\r\n\r\n    start() {\r\n        for (let i = 0; i < this.tabs.toggleItems.length; i++) {\r\n            this.tabs.toggleItems[i].node.on(\"toggle\", () => {\r\n                this.tabSelectedIdx = i;\r\n                this.onTabChanged();\r\n            });\r\n        }\r\n\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            this.tabCashIn.lblBalance.string = Utils.formatNumber(Configs.Login.Coin);\r\n            this.tabCashOut.lblBalance.string = Utils.formatNumber(Configs.Login.CoinFish);\r\n        }, this);\r\n\r\n        this.tabCashIn.start(this);\r\n        this.tabCashOut.start(this);\r\n    }\r\n\r\n    show() {\r\n        super.show();\r\n        this.tabSelectedIdx = 0;\r\n        this.tabs.toggleItems[this.tabSelectedIdx].isChecked = true;\r\n        this.onTabChanged();\r\n    }\r\n\r\n    private onTabChanged() {\r\n        for (let i = 0; i < this.tabContents.childrenCount; i++) {\r\n            this.tabContents.children[i].active = i == this.tabSelectedIdx;\r\n        }\r\n        switch (this.tabSelectedIdx) {\r\n            case 0:\r\n                this.tabCashIn.reset();\r\n                break;\r\n            case 1:\r\n                this.tabCashOut.reset();\r\n                break;\r\n        }\r\n    }\r\n\r\n    public actSubmitCashIn() {\r\n        this.tabCashIn.submit();\r\n    }\r\n\r\n    public actSubmitCashOut() {\r\n        this.tabCashOut.submit();\r\n    }\r\n\r\n    public actClearCashIn() {\r\n        this.tabCashIn.edbCoin.string = \"0\";\r\n    }\r\n\r\n    public actClearCashOut() {\r\n        this.tabCashOut.edbCoin.string = \"0\";\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialogz\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupHistory extends Dialog {\r\n    @property(cc.Label)\r\n    lblPage: cc.Label = null;\r\n    @property(cc.Node)\r\n    itemTemplate: cc.Node = null;\r\n\r\n    private page: number = 1;\r\n    private maxPage: number = 1;\r\n    private items = new Array<cc.Node>();\r\n\r\n    private data: any = null;\r\n\r\n    show() {\r\n        super.show();\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n        if (this.itemTemplate != null) this.itemTemplate.active = false;\r\n    }\r\n\r\n    dismiss() {\r\n        super.dismiss();\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        this.page = 1;\r\n        this.maxPage = 1;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        this.loadData();\r\n    }\r\n\r\n    actNextPage() {\r\n        if (this.page < this.maxPage) {\r\n            this.page++;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadDataLocal();\r\n        }\r\n    }\r\n\r\n    actPrevPage() {\r\n        if (this.page > 1) {\r\n            this.page--;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadDataLocal();\r\n        }\r\n    }\r\n\r\n    private loadData() {\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"OTT3\", {\r\n            \"userId\": Configs.Login.UserIdFish\r\n        }, (res) => {\r\n         //   console.log(res);\r\n            App.instance.showLoading(false);\r\n            if (res[\"code\"] != 200) return;\r\n\r\n            if (this.items.length == 0) {\r\n                for (var i = 0; i < 10; i++) {\r\n                    let item = cc.instantiate(this.itemTemplate);\r\n                    item.parent = this.itemTemplate.parent;\r\n                    this.items.push(item);\r\n                }\r\n                this.itemTemplate.destroy();\r\n                this.itemTemplate = null;\r\n            }\r\n\r\n            this.data = res[\"data\"];\r\n            this.maxPage = Math.ceil(this.data.length / 10);\r\n            this.page = 1;\r\n            this.loadDataLocal();\r\n        }, this);\r\n    }\r\n\r\n    private loadDataLocal() {\r\n        if (this.data == null) return;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        let startIdx = (this.page - 1) * 10;\r\n        let count = 10;\r\n        if (startIdx + count > this.data.length) count = this.data.length - startIdx;\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n            if (i < count) {\r\n                let itemData = this.data[startIdx + i];\r\n                item.getChildByName(\"bg\").opacity = i % 2 == 0 ? 10 : 0;\r\n                item.getChildByName(\"Session\").getComponent(cc.Label).string = itemData[\"Id\"];\r\n                item.getChildByName(\"Time\").getComponent(cc.Label).string = itemData[\"GameTime\"];\r\n                if (itemData[\"Nickname1\"] == Configs.Login.Nickname) {\r\n                    item.getChildByName(\"Choice\").getComponent(cc.Label).string = this.getChoiceName(itemData[\"Choice1\"]);\r\n                    item.getChildByName(\"OtherPlayer\").getComponent(cc.Label).string = itemData[\"Nickname2\"];\r\n                    let result = \"Hoà\";\r\n                    if (itemData[\"Result\"] == 1) {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = \"+\" + Utils.formatNumber(itemData[\"CashChange1\"]);\r\n                        result = \"Thắng\"\r\n                    } else if (itemData[\"Result\"] == 2) {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = Utils.formatNumber(-itemData[\"Blind\"]);\r\n                        result = \"Thua\"\r\n                    } else {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = \"+\" + Utils.formatNumber(itemData[\"Blind\"]);\r\n                    }\r\n                    item.getChildByName(\"Result\").getComponent(cc.Label).string = result;\r\n                } else {\r\n                    item.getChildByName(\"Choice\").getComponent(cc.Label).string = this.getChoiceName(itemData[\"Choice2\"]);\r\n                    item.getChildByName(\"OtherPlayer\").getComponent(cc.Label).string = itemData[\"Nickname1\"];\r\n                    let result = \"Hoà\";\r\n                    if (itemData[\"Result\"] == 2) {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = \"+\" + Utils.formatNumber(itemData[\"CashChange2\"]);\r\n                        result = \"Thắng\"\r\n                    } else if (itemData[\"Result\"] == 1) {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = Utils.formatNumber(-itemData[\"Blind\"]);\r\n                        result = \"Thua\"\r\n                    } else {\r\n                        item.getChildByName(\"Receive\").getComponent(cc.Label).string = \"+\" + Utils.formatNumber(itemData[\"Blind\"]);\r\n                    }\r\n                    item.getChildByName(\"Result\").getComponent(cc.Label).string = result;\r\n                }\r\n                item.getChildByName(\"Bet\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"Blind\"]);\r\n                item.active = true;\r\n            } else {\r\n                item.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    //selectValue: 0: kéo, 1: bao, 2: búa\r\n    private getChoiceName(choice: number) {\r\n        switch (choice) {\r\n            case 0:\r\n                return \"Kéo\";\r\n            case 1:\r\n                return \"Bao\";\r\n            case 2:\r\n                return \"Búa\";\r\n        }\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialogz\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport ShootFishNetworkClient from \"../../Lobby/LobbyScript/Script/networks/ShootFishNetworkClient\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupHonors extends Dialog {\r\n    @property(cc.Label)\r\n    lblPage: cc.Label = null;\r\n    @property(cc.Node)\r\n    itemTemplate: cc.Node = null;\r\n\r\n    private page: number = 1;\r\n    private maxPage: number = 1;\r\n    private items = new Array<cc.Node>();\r\n\r\n    private data: any = null;\r\n\r\n    show() {\r\n        super.show();\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n        if (this.itemTemplate != null) this.itemTemplate.active = false;\r\n    }\r\n\r\n    dismiss() {\r\n        super.dismiss();\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        this.page = 1;\r\n        this.maxPage = 1;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        this.loadData();\r\n    }\r\n\r\n    actNextPage() {\r\n        if (this.page < this.maxPage) {\r\n            this.page++;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadDataLocal();\r\n        }\r\n    }\r\n\r\n    actPrevPage() {\r\n        if (this.page > 1) {\r\n            this.page--;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadDataLocal();\r\n        }\r\n    }\r\n\r\n    private loadData() {\r\n        App.instance.showLoading(true);\r\n        ShootFishNetworkClient.getInstance().request(\"OTT4\", {\r\n            \"userId\": Configs.Login.UserIdFish\r\n        }, (res) => {\r\n         //   console.log(res);\r\n            App.instance.showLoading(false);\r\n            if (res[\"code\"] != 200) return;\r\n\r\n            if (this.items.length == 0) {\r\n                for (var i = 0; i < 10; i++) {\r\n                    let item = cc.instantiate(this.itemTemplate);\r\n                    item.parent = this.itemTemplate.parent;\r\n                    this.items.push(item);\r\n                }\r\n                this.itemTemplate.destroy();\r\n                this.itemTemplate = null;\r\n            }\r\n\r\n            this.data = res[\"data\"];\r\n            this.maxPage = Math.ceil(this.data.length / 10);\r\n            this.page = 1;\r\n            this.loadDataLocal();\r\n        }, this);\r\n    }\r\n\r\n    private loadDataLocal() {\r\n        if (this.data == null) return;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        let startIdx = (this.page - 1) * 10;\r\n        let count = 10;\r\n        if (startIdx + count > this.data.length) count = this.data.length - startIdx;\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            let item = this.items[i];\r\n            if (i < count) {\r\n                let itemData = this.data[startIdx + i];\r\n                item.getChildByName(\"bg\").opacity = i % 2 == 0 ? 10 : 0;\r\n                item.getChildByName(\"Time\").getComponent(cc.Label).string = itemData[\"GameTime\"];\r\n                item.getChildByName(\"Bet\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"Blind\"]);\r\n                item.getChildByName(\"Player\").getComponent(cc.Label).string = itemData[\"Nickname1\"];\r\n                item.getChildByName(\"Choice\").getComponent(cc.Label).string = this.getChoiceName(itemData[\"Choice1\"]);\r\n                item.getChildByName(\"OtherPlayer\").getComponent(cc.Label).string = itemData[\"Nickname2\"];\r\n                item.getChildByName(\"OtherChoice\").getComponent(cc.Label).string = this.getChoiceName(itemData[\"Choice2\"]);\r\n                item.getChildByName(\"Receive\").getComponent(cc.Label).string = itemData[\"CashChange1\"] > itemData[\"CashChange2\"] ? Utils.formatNumber(itemData[\"CashChange1\"]) : Utils.formatNumber(itemData[\"CashChange2\"]);\r\n                item.active = true;\r\n            } else {\r\n                item.active = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    //selectValue: 0: kéo, 1: bao, 2: búa\r\n    private getChoiceName(choice: number) {\r\n        switch (choice) {\r\n            case 0:\r\n                return \"Kéo\";\r\n            case 1:\r\n                return \"Bao\";\r\n            case 2:\r\n                return \"Búa\";\r\n        }\r\n    }\r\n}\r\n"],"file":"index.js"}