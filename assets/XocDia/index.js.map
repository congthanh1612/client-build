{"version":3,"sources":["assets/XocDia/XocDiaScript/XocDia.BankerControl.ts","assets/XocDia/XocDiaScript/XocDia.BtnBet.ts","assets/XocDia/XocDiaScript/XocDia.BtnPayBet.ts","assets/XocDia/XocDiaScript/XocDia.Cmd.ts","assets/XocDia/XocDiaScript/XocDia.Lobby.ts","assets/XocDia/XocDiaScript/XocDia.PanelPayDoor.ts","assets/XocDia/XocDiaScript/XocDia.Player.ts","assets/XocDia/XocDiaScript/XocDia.Play.ts","assets/XocDia/XocDiaScript/XocDia.PopupHistory.ts","assets/XocDia/XocDiaScript/XocDia.Room.ts","assets/XocDia/XocDiaScript/XocDia.XocDiaController.ts","assets/XocDia/XocDiaScript/XocDia.XocDiaNetworkClient.ts"],"names":["Utils_1","require","XocDia_Cmd_1","XocDia_XocDiaNetworkClient_1","_a","cc","_decorator","ccclass","property","BankerControl","_super","_this","apply","this","arguments","lblTitle","slider","lblCoin","panelSell","coinOdd","coinEven","maxCoin","minCoin","coin","sellingEven","__extends","prototype","start","node","on","Math","round","progress","string","default","formatNumber","show","active","actCanTat","getInstance","send","SendBankerSellGate","actSellOdd","actSellEven","actSell","__decorate","Label","Slider","Node","Component","exports","BtnBet","normal","label","Sprite","BtnPayBet","lblTotalBet","reset","setTotalBet","formatMoney","cmd","Configs_1","Network_InPacket_1","Network_OutPacket_1","Code","LOGIN","GETLISTROOM","JOIN_GAME_ROOM_BY_ID","CMDJOINROOMFAIL","CMDRECONNECTGAMEROOM","REQUEST_INFO_MOI_CHOI","MOI_CHOI","ACCEPT_MOI_CHOI","JOIN_ROOM_FAIL","JOIN_ROOM_SUCCESS","USER_JOIN_ROOM_SUCCESS","USER_OUT_ROOM","ORDER_BANKER","ACTION_IN_GAME","PUT_MONEY","PUT_MONEY_X2","PUT_ALL_IN","QUIT_ROOM","DANG_KY_THOAT_PHONG","START_GAME","BANKER_SELL_GATE","BUY_GATE","REFUN_MONEY","FINISH_GAME","GET_TIME","HUY_LAM_CAI","STOP_GAME","SOI_CAU","MESSAGE_ERROR_BANKER","SET_CHEAT","CHAT_MS","INFO_GATE_SELL","INFO_MONEY_AFTER_BANKER_SELL","ACTION_BANKER","KICK_OUT_XOCDIA","DESTROY_ROOM","LOCK_GATE","GET_MONEY_LAI","UPDATE_CURRENT_MONEY","SendGetListRoom","call","initData","setControllerId","setCmdId","packHeader","putInt","App","MONEY_TYPE","putLong","updateSize","ReceiveGetListRoom","data","list","listSize","getShort","i","item","getInt","getByte","getString","getBool","getLong","push","SendJoinRoomById","id","putString","ReceiveJoinRoomSuccess","moneyBet","roomId","gameId","moneyType","gameState","countTime","playerCount","potID","playerInfos","money","banker","isSubBanker","purchaseStatus","potPurchase","moneyPurchaseEven","moneyPurchaseOdd","moneyRemain","subListCount","list_buy_gate","bankerReqDestroy","bossReqDestroy","rule","moneyRegisBanker","a","b","ReceiveJoinRoomFail","SendLeaveRoom","ReceiveLeavedRoom","reason","ReceiveLeaveRoom","bRegis","nickname","ReceiveUserJoinRoom","avatar","ReceiveUserOutRoom","ReceiveActionInGame","action","time","ReceiveStartGame","moneyBanker","list_lock_gate","SendPutMoney","doorId","putByte","ReceivePutMoney","error","betMoney","potId","potMoney","currentMoney","getError","ReceiveBankerSellGate","moneySell","SendBuyGate","ReceiveBuyGate","moneyBuy","rmMoneySell","ReceiveRefunMoney","rfCount","playerInfosRefun","ReceiveFinishGame","infoAllPot","diceIDs","moneyBankerBefore","moneyBankerAfter","moneyBankerExchange","playerInfoWin","infoSubBanker","playerWinCount","SendReconnect","CmdSendGetCau","ReceiveGetCau","totalEven","totalOdd","rsCount","arrayCau","SendOrderBanker","ReceiveOrderBanker","moneyRequire","ReceiveInfoGateSell","moneyEven","moneyOdd","SendCancelBanker","ReceiveCancelBanker","bDestroy","door","ReceiveInfoMoneyAfterBankerSell","SendRequestInfoMoiChoi","SendMoiChoi","nicknames","putShort","length","SendAcceptMoiChoi","name","SendChatRoom","encodeURI","ReceivedChatRoom","chair","isIcon","content","decodeURI","XocDia_XocDiaController_1","App_1","BroadcastReceiver_1","Lobby","itemPrefab","sprAvatar","lblNickname","listItems","scrRoom","inited","dataRoom","isSortRoom","onBtnSortRoomId","sort","x","y","removeAllChildren","instantiate","addChild","getComponent","init","onBtnSortRoomMoney","isSortMoney","requiredMoney","spriteFrame","instance","getAvatarSpriteFrame","Login","Avatar","Nickname","register","USER_UPDATE_COIN","Coin","addListener","getCmdId","res","showLoading","msg","getTextLang","alertDialog","showMsg","showGamePlay","actRefesh","actQuickPlay","actBack","close","loadScene","actCreateTable","Prefab","ScrollView","PanelPayDoor","title1","title2","itemTemplate","sprProgress","updateValue","parent","childrenCount","children","destroy","fillRange","addUser","newMaxCoin","getChildByName","getCoin","Player","btnInvite","info","lbCoin","boxWin","chipsPoint","v2","chipsPoint2","chatEmotion","chatMsg","timeoutChat","leave","unscheduleAllCallbacks","set","isBanker","substring","setCoin","clearUI","Tween","stopAllByTarget","showWinCoinString","getComponentInChildren","sp","Skeleton","setAnimation","tween","scale","to","easing","backOut","delay","showWinCoin","showChatEmotion","clearTimeout","setTimeout","showChatMsg","hideChat","showRefundCoin","Button","Vec2","audio_clip","XocDia_Player_1","XocDia_BtnPayBet_1","XocDia_BtnBet_1","Random_1","TimeUtils_1","SPUtils_1","XocDia_PopupHistory_1","TYPE_RESULT","STATE_DEALER","TW","Play","history","nodeExit","scrollChip","contentChatNhanh","bgChat","UI_Chat","toggleMusic","toggleSound","nodeSetting","nodeTutorial","lblToast","boxSetting","boxMusic","mePlayer","players","btnBets","btnPayBets","dealer","boxMsg","labelMsg","dealerHandPoint","diceResult","sprChipSmalls","chips","countplayer","chipTemplate","sprProgressTime","lblProgressTime","lblHistoryOdd","lblHistoryEven","sfOdd","sfEven","lblHistoryItems","edtChatInput","chipsInDoors","lastBowlStateName","curTime","listBets","betIdx","minBetIdx","historyChatData","lastUpdateTime","currentTimeMillis","chipPool","clockTimeSche","percentScroll","arrTimeOut","isClearOldData","totalTimeState","listChip","onBtnSscrollLeft","scrollToPercentHorizontal","onBtnScrollRight","onBtnClickBgChat","opacity","onBtnClickBoxChat","showUIChat","winSize","width","sineOut","toggleUIChat","closeUIChat","sineIn","playerChat","player","getPlayer","event","trim","chatNhanhMsg","self","this_1","NodePool","_loop_2","i_1","this_2","showToast","_loop_3","i_2","this_3","j","setupTimeRunInBg","onBtnHistory","assetManager","getBundle","load","err1","prefab","game","EVENT_SHOW","updateChipTotalBets","hideSetting","showSetting","isChecked","getMusicVolumn","getSoundVolumn","showTutorial","hideTutorial","onBtnToggleMusic","setMusicVolumn","ON_AUDIO_CHANGED","onBtnToggleSound","setSoundVolumn","update","timeLeft","max","unschedule","randomRangeInt","getRandomEmptyPlayer","lobby","playAudioEffect","setStateDealer","MOI_CUOC","schedule","CLOCK","TRA_TIEN","scheduleOnce","forEach","e","clearChips","resetDiceResult","XOC_LO","btnPayBet","listCoin","convertMoneyToChipMoney","_loop_4","chip","getChip","position","hasOwnProperty","clone","target","rangeInt","height","then","jumpTo","easeSineOut","CHIP","rfData","potData","res_1","playerData","isChan_1","isLe3do1trang_1","win","isLe3trang1do_1","isChan4do_1","isChan4trang_1","doorWins_1","MO_DIA","cb","chipsWithNickname","_loop_5","k","parseInt","indexOf","positionAdd","positionAdd2","count1","count2","_loop_6","opacity1","dealerChip","opacity2","setDiceResult","FOUR_RED","FOUR_WHITE","TWO_RED_TWO_WHITE","THREE_RED","THREE_WHITE","moneyWinPots","split","msgWin","showDiceResult","bowl","ranX1","randomRange","ranY1","ranX2","ranY2","state","WIN","xocDice","typeResult","arrSprResult","setPosition","resetView","IDLE","emptyPlayers","Array","ret","size","put","get","chipIdx","setSiblingIndex","_coin","counter","dataJoinRoom","JOIN","_loop_7","i_3","this_4","btnBet","timeScale","setCompleteListener","XOC_DIA","actSetting","actSendChat","actSendChatNhanh","actTutorial","actRank","ShowAlertDialog","actHistory","actOpenMusic","actOrderBanker","actCancelBanker","Toggle","SpriteFrame","EditBox","Http_1","Dialog_1","PopupTransaction","lblPage","fontNumber","page","maxPage","items","dataPlay","dataCashout","dataExchange","currentData","totalPageLoaded","onLoad","dismiss","_onShowed","loadData","resetDataLoaded","actNextPage","actPrevPage","loadPage","indexData","itemData","json","JSON","parse","font","fontSize","pos","v3","isReloadScr","params","c","un","p","API","err","transactionData","__spread","setDataItem","RichText","convertNameThirdParty","serviceName","onScrollEvent","scrollview","eventType","EventType","SCROLL_TO_BOTTOM","BitmapFont","XocDiaRoom","lblBet","lblMin","lblPlayers","sprPlayers","onBtnClick","XocDia_Lobby_1","XocDia_Play_1","Network_Cmd_1","Common_AudioManager_1","SoundManager","bgMusic","effSound","listAudio","playBgMusic","clip","BG","play","indexAudio","audioEngine","stopBgMusic","stop","AudioSource","AudioClip","XocDiaController","noteLobby","nodePlay","soundManager","XocDiaController_1","showErrLoading","addOnOpen","SendLogin","AccessToken","addOnClose","isConnected","connect","playBackgroundMusic","showLobby","loadBundle","bundleGame","index","Network_NetworkClient_1","Network_NetworkListener_1","XocDiaNetworkClient","listeners","isUseWSS","USE_WSS","HOST_XOCDIA","host","port","onOpen","ev","onMessage","Uint8Array","listener","Object","callback","splice","packet","Int8Array","_length","_data","ws","buffer"],"mappings":"8zCACA,IAAAA,EAAAC,EAAA,+CACAC,EAAAD,EAAA,gBACAE,EAAAF,EAAA,gCAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNC,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAI,SAAA,KAEAJ,EAAAK,OAAA,KAEAL,EAAAM,QAAA,KAEAN,EAAAO,UAAA,KAEQP,EAAAQ,QAAA,EACAR,EAAAS,SAAA,EAEAT,EAAAU,QAAA,EACAV,EAAAW,QAAA,EACAX,EAAAY,KAAA,EACAZ,EAAAa,aAAA,IA6CZ,OA9D2CC,EAAAhB,EAAAC,GAmBvCD,EAAAiB,UAAAC,MAAA,WAAA,IAAAhB,EAAAE,KACIA,KAAAG,OAAAY,KAAAC,GAAA,QAAA,WACIlB,EAAAY,KAAAZ,EAAAW,QAAAQ,KAAAC,OAAApB,EAAAU,QAAAV,EAAAW,SAAAX,EAAAK,OAAAgB,UACArB,EAAAM,QAAAgB,OAAAjC,EAAAkC,QAAAC,aAAAxB,EAAAY,SAIRd,EAAAiB,UAAAU,KAAA,SAAAjB,EAAAC,GACIP,KAAAM,QAAAA,EACAN,KAAAO,SAAAA,EACAP,KAAAK,UAAAmB,QAAA,EACAxB,KAAAe,KAAAS,QAAA,GAGG5B,EAAAiB,UAAAY,UAAA,WACHzB,KAAAe,KAAAS,QAAA,EACAlC,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAO,mBAAA,EAAA5B,KAAAU,QAGGd,EAAAiB,UAAAgB,WAAA,WACH7B,KAAAE,SAAAkB,OAAA,iBACApB,KAAAQ,QAAAR,KAAAM,QACAN,KAAAU,KAAAV,KAAAQ,QACAR,KAAAI,QAAAgB,OAAAjC,EAAAkC,QAAAC,aAAAtB,KAAAU,MACAV,KAAAG,OAAAgB,SAAA,EACAnB,KAAAK,UAAAmB,QAAA,EACAxB,KAAAW,aAAA,GAGGf,EAAAiB,UAAAiB,YAAA,WACH9B,KAAAE,SAAAkB,OAAA,mBACApB,KAAAQ,QAAAR,KAAAO,SACAP,KAAAU,KAAAV,KAAAQ,QACAR,KAAAI,QAAAgB,OAAAjC,EAAAkC,QAAAC,aAAAtB,KAAAU,MACAV,KAAAG,OAAAgB,SAAA,EACAnB,KAAAK,UAAAmB,QAAA,EACAxB,KAAAW,aAAA,GAGGf,EAAAiB,UAAAkB,QAAA,WACH/B,KAAAe,KAAAS,QAAA,EACAlC,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAO,mBAAA5B,KAAAW,YAAA,EAAA,EAAAX,KAAAU,QAzDJsB,EAAA,CADCrC,EAAAH,GAAAyC,QACyBrC,EAAAiB,UAAA,gBAAA,GAE1BmB,EAAA,CADCrC,EAAAH,GAAA0C,SACwBtC,EAAAiB,UAAA,cAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACwBrC,EAAAiB,UAAA,eAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACyBvC,EAAAiB,UAAA,iBAAA,GATTmB,EAAA,CADpBtC,GACoBE,GAArB,CAAAJ,GAAA4C,WAAqBC,EAAAhB,QAAAzB,2/BCRf,IAAAL,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN2C,EAAA,SAAAzC,GAAA,SAAAyC,IAAA,IAAAxC,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAA0B,OAAA,KAEA1B,EAAAyC,OAAA,KAEAzC,EAAA0C,MAAA,OACJ,OARoC5B,EAAA0B,EAAAzC,GAGhCmC,EAAA,CADCrC,EAAAH,GAAA2C,OACsBG,EAAAzB,UAAA,cAAA,GAEvBmB,EAAA,CADCrC,EAAAH,GAAAiD,SACwBH,EAAAzB,UAAA,cAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACsBK,EAAAzB,UAAA,aAAA,GAPNmB,EAAA,CADpBtC,GACoB4C,GAArB,CAAA9C,GAAA4C,WAAqBC,EAAAhB,QAAAiB,q3BCHrB,IAAAnD,EAAAC,EAAA,+CAGMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGN+C,EAAA,SAAA7C,GAAA,SAAA6C,IAAA,IAAA5C,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAA6C,YAAA,KAEA7C,EAAA0B,OAAA,OAUJ,OAfuCZ,EAAA8B,EAAA7C,GAO5B6C,EAAA7B,UAAA+B,MAAA,WACH5C,KAAA2C,YAAAvB,OAAA,GACApB,KAAAwB,OAAAA,QAAA,GAGGkB,EAAA7B,UAAAgC,YAAA,SAAAnC,GACHV,KAAA2C,YAAAvB,OAAAV,EAAA,EAAAvB,EAAAkC,QAAAyB,YAAApC,GAAA,IAVJsB,EAAA,CADCrC,EAAAH,GAAAyC,QAC4BS,EAAA7B,UAAA,mBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsBO,EAAA7B,UAAA,cAAA,GALNmB,EAAA,CADpBtC,GACoBgD,GAArB,CAAAlD,GAAA4C,WAAqBC,EAAAhB,QAAAqB,6kBCNrB,IAKAK,EALAC,EAAA5D,EAAA,6BACA6D,EAAA7D,EAAA,4DACA8D,EAAA9D,EAAA,8DAGA,SAAA2D,GACI,IAAAI,EAAA,WAAA,SAAAA,KAyCA,OAxCWA,EAAAC,MAAA,EACAD,EAAAE,YAAA,KACAF,EAAAG,qBAAA,KACAH,EAAAI,gBAAA,KACAJ,EAAAK,qBAAA,KACAL,EAAAM,sBAAA,KACAN,EAAAO,SAAA,KACAP,EAAAQ,gBAAA,KAEAR,EAAAS,eAAA,KACAT,EAAAU,kBAAA,KACAV,EAAAW,uBAAA,KACAX,EAAAY,cAAA,KACAZ,EAAAa,aAAA,KACAb,EAAAc,eAAA,KACAd,EAAAe,UAAA,KACAf,EAAAgB,aAAA,KACAhB,EAAAiB,WAAA,KACAjB,EAAAkB,UAAA,KACAlB,EAAAmB,oBAAA,KACAnB,EAAAoB,WAAA,KACApB,EAAAqB,iBAAA,KACArB,EAAAsB,SAAA,KACAtB,EAAAuB,YAAA,KACAvB,EAAAwB,YAAA,KACAxB,EAAAyB,SAAA,KACAzB,EAAA0B,YAAA,KACA1B,EAAA2B,UAAA,KACA3B,EAAA4B,QAAA,KACA5B,EAAA6B,qBAAA,KACA7B,EAAA8B,UAAA,KACA9B,EAAA+B,QAAA,KACA/B,EAAAgC,eAAA,KACAhC,EAAAiC,6BAAA,KACAjC,EAAAkC,cAAA,KACAlC,EAAAmC,gBAAA,KACAnC,EAAAoC,aAAA,KACApC,EAAAqC,UAAA,KACArC,EAAAsC,cAAA,KACAtC,EAAAuC,qBAAA,KACXvC,EAzCA,GAAaJ,EAAAI,KAAAA,EA0Cb,IAAAwC,EAAA,SAAA9F,GACI,SAAA8F,IAAA,IAAA7F,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAE,aACAvD,EAAAkG,aACAlG,EAAAmG,OAAAjD,EAAA3B,QAAA6E,IAAAC,YACArG,EAAAmG,OAAA,IACAnG,EAAAsG,SAAA,GACAtG,EAAAmG,OAAA,GACAnG,EAAAmG,OAAA,GACAnG,EAAAmG,OAAA,IACAnG,EAAAuG,eAER,OAfqCzF,EAAA+E,EAAA9F,GAerC8F,EAfA,CAeAzC,EAAA7B,SAfa0B,EAAA4C,gBAAAA,EAgBb,IAAAW,EAAA,SAAAzG,GAGI,SAAAyG,EAAAC,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KAFAF,EAAA0G,KAAA,GAII,IAAAC,EAAA3G,EAAA4G,WACA5G,EAAA0G,KAAA,GACA,IAAA,IAAAG,EAAA,EAAAA,EAAAF,EAAAE,IAAA,CACI,IAAAC,EAAA,GACAA,EAAA,GAAA9G,EAAA+G,SACAD,EAAA,UAAA9G,EAAAgH,UACAF,EAAA,YAAA9G,EAAAgH,UACAF,EAAA,eAAA9G,EAAA+G,SACAD,EAAA,UAAA9G,EAAAgH,UACAF,EAAA,SAAA9G,EAAA+G,SACAD,EAAA,cAAA9G,EAAA+G,SACAD,EAAA,KAAA9G,EAAAgH,UACAF,EAAA,SAAA9G,EAAAiH,YACAH,EAAA,IAAA9G,EAAAkH,UACAJ,EAAA,OAAA9G,EAAAmH,UACAnH,EAAA0G,KAAAU,KAAAN,YAGZ,OAvBwChG,EAAA0F,EAAAzG,GAuBxCyG,EAvBA,CAuBArD,EAAA5B,SAvBa0B,EAAAuD,mBAAAA,EAyBb,IAAAa,EAAA,SAAAtH,GACI,SAAAsH,EAAAC,GAAA,IAAAtH,EAAAD,EAAA+F,KAAA5F,OAAAA,YAGIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAG,sBACAxD,EAAAkG,aACAlG,EAAAmG,OAAAmB,GACAtH,EAAAuH,UAAA,IACAvH,EAAAuG,eAER,OAZsCzF,EAAAuG,EAAAtH,GAYtCsH,EAZA,CAYAjE,EAAA7B,SAZa0B,EAAAoE,iBAAAA,EAcb,IAAAG,EAAA,SAAAzH,GAyBI,SAAAyH,EAAAf,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KAxBAF,EAAAyH,SAAA,EACAzH,EAAA0H,OAAA,EACA1H,EAAA2H,OAAA,EACA3H,EAAA4H,UAAA,EACA5H,EAAA6H,UAAA,EACA7H,EAAA8H,UAAA,EACA9H,EAAA+H,YAAA,EACA/H,EAAAgI,MAAA,GACAhI,EAAAiI,YAAA,GACAjI,EAAAkI,MAAA,EACAlI,EAAAmI,QAAA,EACAnI,EAAAoI,aAAA,EACApI,EAAAqI,eAAA,EACArI,EAAAsI,YAAA,EACAtI,EAAAuI,kBAAA,EACAvI,EAAAwI,iBAAA,EACAxI,EAAAyI,YAAA,EACAzI,EAAA0I,aAAA,EACA1I,EAAA2I,cAAA,GACA3I,EAAA4I,kBAAA,EACA5I,EAAA6I,gBAAA,EACA7I,EAAA8I,KAAA,EACA9I,EAAA+I,iBAAA,EAII/I,EAAAyH,SAAAzH,EAAA+G,SACA/G,EAAA0H,OAAA1H,EAAA+G,SACA/G,EAAA2H,OAAA3H,EAAA+G,SACA/G,EAAA4H,UAAA5H,EAAAgH,UACAhH,EAAA6H,UAAA7H,EAAAgH,UACAhH,EAAA8H,UAAA9H,EAAA+G,SACA/G,EAAA+H,YAAA/H,EAAAgH,UACAhH,EAAAgI,MAAA,GACA,IAAA,IAAAgB,EAAA,EAAA,EAAAA,EAAAA,KACIC,EAAA,IACA,GAAAjJ,EAAAgH,UACAiC,EAAA,MAAAjJ,EAAA+G,SACAkC,EAAA,YAAAjJ,EAAAmH,UACA8B,EAAA,WAAAjJ,EAAAmH,UACA8B,EAAA,SAAAjJ,EAAAmH,UACA8B,EAAA,OAAAjJ,EAAAkH,UACAlH,EAAAgI,MAAAZ,KAAA6B,GAGJ,IADAjJ,EAAAiI,YAAA,GACAe,EAAA,EAAAA,EAAAhJ,EAAA+H,YAAAiB,KACIC,EAAA,IACA,SAAAjJ,EAAAiH,YACAgC,EAAA,OAAAjJ,EAAAiH,YACAgC,EAAA,MAAAjJ,EAAAmH,UACA8B,EAAA,OAAAjJ,EAAAkH,UACA+B,EAAA,YAAAjJ,EAAAkH,UACA+B,EAAA,YAAAjJ,EAAAkH,UACAlH,EAAAiI,YAAAb,KAAA6B,GAaJ,IAVAjJ,EAAAkI,MAAAlI,EAAAmH,UACAnH,EAAAmI,OAAAnI,EAAAkH,UACAlH,EAAAoI,YAAApI,EAAAkH,UACAlH,EAAAqI,eAAArI,EAAA+G,SACA/G,EAAAsI,YAAAtI,EAAA+G,SACA/G,EAAAuI,kBAAAvI,EAAAmH,UACAnH,EAAAwI,iBAAAxI,EAAAmH,UACAnH,EAAAyI,YAAAzI,EAAAmH,UACAnH,EAAA0I,aAAA1I,EAAA+G,SACA/G,EAAA2I,cAAA,GACAK,EAAA,EAAAA,EAAAhJ,EAAA0I,aAAAM,IAAA,CACI,IAAAC,GAAAA,EAAA,IACA,SAAAjJ,EAAAiH,YACAgC,EAAA,MAAAjJ,EAAAmH,UACAnH,EAAA2I,cAAAvB,KAAA6B,UAEJjJ,EAAA4I,iBAAA5I,EAAAkH,UACAlH,EAAA6I,eAAA7I,EAAAkH,UACAlH,EAAA8I,KAAA9I,EAAA+G,SACA/G,EAAA+I,iBAAA/I,EAAAmH,YAER,OA9E4CrG,EAAA0G,EAAAzH,GA8E5CyH,EA9EA,CA8EArE,EAAA5B,SA9Ea0B,EAAAuE,uBAAAA,EA+Eb,IAAA0B,EAAA,SAAAnJ,GACI,SAAAmJ,EAAAzC,GACI,OAAA1G,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KAER,OAJyCY,EAAAoI,EAAAnJ,GAIzCmJ,EAJA,CAIA/F,EAAA5B,SAJa0B,EAAAiG,oBAAAA,EAMb,IAAAC,EAAA,SAAApJ,GACI,SAAAoJ,IAAA,IAAAnJ,EAEID,EAAA+F,KAAA5F,OAAAA,YACAF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAmB,qBACAxE,EAAAkG,aACAlG,EAAAuG,eAER,OAVmCzF,EAAAqI,EAAApJ,GAUnCoJ,EAVA,CAUA/F,EAAA7B,SAVa0B,EAAAkG,cAAAA,EAYb,IAAAC,EAAA,SAAArJ,GAGI,SAAAqJ,EAAA3C,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAFAF,EAAAqJ,OAAA,EAIIrJ,EAAAqJ,OAAArJ,EAAAgH,YAER,OAPuClG,EAAAsI,EAAArJ,GAOvCqJ,EAPA,CAOAjG,EAAA5B,SAPa0B,EAAAmG,kBAAAA,EASb,IAAAE,EAAA,SAAAvJ,GAII,SAAAuJ,EAAA7C,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAAuJ,QAAA,EACAvJ,EAAAwJ,SAAA,GAIIxJ,EAAAuJ,OAAAvJ,EAAAkH,UACAlH,EAAAwJ,SAAAxJ,EAAAiH,cAER,OATsCnG,EAAAwI,EAAAvJ,GAStCuJ,EATA,CASAnG,EAAA5B,SATa0B,EAAAqG,iBAAAA,EAWb,IAAAG,EAAA,SAAA1J,GAKI,SAAA0J,EAAAhD,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAJAF,EAAAwJ,SAAA,GACAxJ,EAAA0J,OAAA,GACA1J,EAAAkI,MAAA,EAIIlI,EAAAwJ,SAAAxJ,EAAAiH,YACAjH,EAAA0J,OAAA1J,EAAAiH,YACAjH,EAAAkI,MAAAlI,EAAAmH,YAER,OAXyCrG,EAAA2I,EAAA1J,GAWzC0J,EAXA,CAWAtG,EAAA5B,SAXa0B,EAAAwG,oBAAAA,EAab,IAAAE,EAAA,SAAA5J,GAGI,SAAA4J,EAAAlD,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAFAF,EAAAwJ,SAAA,GAIIxJ,EAAAwJ,SAAAxJ,EAAAiH,cAER,OAPwCnG,EAAA6I,EAAA5J,GAOxC4J,EAPA,CAOAxG,EAAA5B,SAPa0B,EAAA0G,mBAAAA,EASb,IAAAC,EAAA,SAAA7J,GAII,SAAA6J,EAAAnD,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAA6J,OAAA,EACA7J,EAAA8J,KAAA,EAII9J,EAAA6J,OAAA7J,EAAAgH,UACAhH,EAAA8J,KAAA9J,EAAAgH,YAER,OATyClG,EAAA8I,EAAA7J,GASzC6J,EATA,CASAzG,EAAA5B,SATa0B,EAAA2G,oBAAAA,EAWb,IAAAG,EAAA,SAAAhK,GAMI,SAAAgK,EAAAtD,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KALAF,EAAAmI,OAAA,GACAnI,EAAA2H,OAAA,EACA3H,EAAAgK,YAAA,EACAhK,EAAAiK,eAAA,GAIIjK,EAAAmI,OAAAnI,EAAAiH,YACAjH,EAAA2H,OAAA3H,EAAA+G,SACA/G,EAAAgK,YAAAhK,EAAAmH,UACAnH,EAAAiK,eAAA,GACA,IAAA,IAAAjB,EAAA,EAAA,EAAAA,EAAAA,IAAA,CACI,IAAAC,EAAA,GACAA,EAAA,GAAAjJ,EAAAgH,UACAiC,EAAA,OAAAjJ,EAAAkH,UACAlH,EAAAiK,eAAA7C,KAAA6B,YAGZ,OAnBsCnI,EAAAiJ,EAAAhK,GAmBtCgK,EAnBA,CAmBA5G,EAAA5B,SAnBa0B,EAAA8G,iBAAAA,EAqBb,IAAAG,EAAA,SAAAnK,GACI,SAAAmK,EAAAC,EAAAvJ,GAAA,IAAAZ,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAe,WACApE,EAAAkG,aACAlG,EAAAoK,QAAAD,GACAnK,EAAAsG,QAAA1F,GACAZ,EAAAuG,eAER,OAXkCzF,EAAAoJ,EAAAnK,GAWlCmK,EAXA,CAWA9G,EAAA7B,SAXa0B,EAAAiH,aAAAA,EAab,IAAAG,EAAA,SAAAtK,GAQI,SAAAsK,EAAA5D,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAPAF,EAAAsK,MAAA,EACAtK,EAAAwJ,SAAA,GACAxJ,EAAAuK,SAAA,EACAvK,EAAAwK,MAAA,EACAxK,EAAAyK,SAAA,EACAzK,EAAA0K,aAAA,EAII1K,EAAAsK,MAAAtK,EAAA2K,WACA3K,EAAAwJ,SAAAxJ,EAAAiH,YACAjH,EAAAuK,SAAAvK,EAAAmH,UACAnH,EAAAwK,MAAAxK,EAAAgH,UACAhH,EAAAyK,SAAAzK,EAAAmH,UACAnH,EAAA0K,aAAA1K,EAAAmH,YAER,OAjBqCrG,EAAAuJ,EAAAtK,GAiBrCsK,EAjBA,CAiBAlH,EAAA5B,SAjBa0B,EAAAoH,gBAAAA,EAmBb,IAAAO,EAAA,SAAA7K,GAII,SAAA6K,EAAAnE,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAA6J,OAAA,EACA7J,EAAA6K,UAAA,EAII7K,EAAA6J,OAAA7J,EAAAgH,UACAhH,EAAA6K,UAAA7K,EAAAmH,YAER,OAT2CrG,EAAA8J,EAAA7K,GAS3C6K,EATA,CASAzH,EAAA5B,SATa0B,EAAA2H,sBAAAA,EAWb,IAAAE,EAAA,SAAA/K,GACI,SAAA+K,EAAAlK,GAAA,IAAAZ,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAsB,UACA3E,EAAAkG,aACAlG,EAAAsG,QAAA1F,GACAZ,EAAAuG,eAER,OAViCzF,EAAAgK,EAAA/K,GAUjC+K,EAVA,CAUA1H,EAAA7B,SAVa0B,EAAA6H,YAAAA,EAYb,IAAAC,EAAA,SAAAhL,GAMI,SAAAgL,EAAAtE,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YALAF,EAAAsK,MAAA,EACAtK,EAAAwJ,SAAA,GACAxJ,EAAAgL,SAAA,EACAhL,EAAAiL,YAAA,EAIIjL,EAAAsK,MAAAtK,EAAA2K,WACA3K,EAAAwJ,SAAAxJ,EAAAiH,YACAjH,EAAAgL,SAAAhL,EAAAmH,UACAnH,EAAAiL,YAAAjL,EAAAmH,YAER,OAboCrG,EAAAiK,EAAAhL,GAapCgL,EAbA,CAaA5H,EAAA5B,SAba0B,EAAA8H,eAAAA,EAeb,IAAAG,EAAA,SAAAnL,GAKI,SAAAmL,EAAAzE,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KAJAF,EAAAmL,QAAA,EACAnL,EAAAgI,MAAA,GACAhI,EAAAoL,iBAAA,GAIIpL,EAAAmL,QAAAnL,EAAA+G,SACA,IAAA,IAAAiC,EAAA,EAAA,EAAAA,EAAAA,KACIC,EAAA,IACA,GAAAjJ,EAAAgH,UACAiC,EAAA,YAAAjJ,EAAAmH,UACA8B,EAAA,WAAAjJ,EAAAmH,UACAnH,EAAAgI,MAAAZ,KAAA6B,GAGJ,IADAjJ,EAAAoL,iBAAA,GACApC,EAAA,EAAAA,EAAAhJ,EAAAmL,QAAAnC,IAAA,CACI,IAAAC,GAAAA,EAAA,IACA,SAAAjJ,EAAAiH,YACAgC,EAAA,YAAAjJ,EAAAmH,UACA8B,EAAA,aAAAjJ,EAAAmH,UACA8B,EAAA,KAAAjJ,EAAAiH,YACAgC,EAAA,YAAAjJ,EAAAiH,YACAjH,EAAAoL,iBAAAhE,KAAA6B,YAGZ,OA1BuCnI,EAAAoK,EAAAnL,GA0BvCmL,EA1BA,CA0BA/H,EAAA5B,SA1Ba0B,EAAAiI,kBAAAA,EA4Bb,IAAAG,EAAA,SAAAtL,GAUI,SAAAsL,EAAA5E,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KATAF,EAAAsL,WAAA,GACAtL,EAAAuL,QAAA,GACAvL,EAAAwL,kBAAA,EACAxL,EAAAyL,iBAAA,EACAzL,EAAA0L,oBAAA,EACA1L,EAAA2L,cAAA,GACA3L,EAAA0I,aAAA,EACA1I,EAAA4L,cAAA,GAII,IAAA,IAAA5C,EAAA,EAAA,EAAAA,EAAAA,KACIC,EAAA,IACA,MAAAjJ,EAAAgH,UACAiC,EAAA,WAAAjJ,EAAAmH,UACA8B,EAAA,IAAAjJ,EAAAkH,UACAlH,EAAAsL,WAAAlE,KAAA6B,GAEJ,IAAAD,EAAA,EAAA,EAAAA,EAAAA,IACIhJ,EAAAuL,QAAAnE,KAAApH,EAAA+G,UAEJ/G,EAAAwL,kBAAAxL,EAAAmH,UACAnH,EAAAyL,iBAAAzL,EAAAmH,UACAnH,EAAA0L,oBAAA1L,EAAAmH,UACA,IAAA0E,EAAA7L,EAAA+G,SACA,IAAAiC,EAAA,EAAAA,EAAA6C,EAAA7C,KACIC,EAAA,IACA,SAAAjJ,EAAAiH,YACAgC,EAAA,SAAAjJ,EAAAmH,UACA8B,EAAA,aAAAjJ,EAAAmH,UACA8B,EAAA,QAAAjJ,EAAAiH,YACAgC,EAAA,aAAAjJ,EAAAiH,YACAjH,EAAA2L,cAAAvE,KAAA6B,GAGJ,IADAjJ,EAAA0I,aAAA1I,EAAA+G,SACAiC,EAAA,EAAAA,EAAAhJ,EAAA0I,aAAAM,IAAA,CACI,IAAAC,GAAAA,EAAA,IACA,kBAAAjJ,EAAAiH,YACAgC,EAAA,aAAAjJ,EAAAgH,UACAiC,EAAA,eAAAjJ,EAAAmH,UACA8B,EAAA,oBAAAjJ,EAAAmH,UACA8B,EAAA,sBAAAjJ,EAAAmH,UACAnH,EAAA4L,cAAAxE,KAAA6B,YAGZ,OA9CuCnI,EAAAuK,EAAAtL,GA8CvCsL,EA9CA,CA8CAlI,EAAA5B,SA9Ca0B,EAAAoI,kBAAAA,EAgDb,IAAAS,EAAA,SAAA/L,GACI,SAAA+L,IAAA,IAAA9L,EAAAD,EAAA+F,KAAA5F,OAAAA,YAGIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAK,sBACA1D,EAAAkG,aACAlG,EAAAuG,eAER,OAVmCzF,EAAAgL,EAAA/L,GAUnC+L,EAVA,CAUA1I,EAAA7B,SAVa0B,EAAA6I,cAAAA,EAYb,IAAAC,EAAA,SAAAhM,GACI,SAAAgM,IAAA,IAAA/L,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAA4B,SACAjF,EAAAkG,aACAlG,EAAAuG,eAER,OATmCzF,EAAAiL,EAAAhM,GASnCgM,EATA,CASA3I,EAAA7B,SATa0B,EAAA8I,cAAAA,EAWb,IAAAC,EAAA,SAAAjM,GAMI,SAAAiM,EAAAvF,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,KALAF,EAAAiM,UAAA,EACAjM,EAAAkM,SAAA,EACAlM,EAAAmM,QAAA,EACAnM,EAAAoM,SAAA,GAIIpM,EAAAiM,UAAAjM,EAAA+G,SACA/G,EAAAkM,SAAAlM,EAAA+G,SACA/G,EAAAmM,QAAAnM,EAAA+G,SACA,IAAA,IAAAiC,EAAA,EAAAA,EAAAhJ,EAAAmM,QAAAnD,IACIhJ,EAAAoM,SAAAhF,KAAApH,EAAAgH,oBAGZ,OAfmClG,EAAAkL,EAAAjM,GAenCiM,EAfA,CAeA7I,EAAA5B,SAfa0B,EAAA+I,cAAAA,EAiBb,IAAAK,EAAA,SAAAtM,GACI,SAAAsM,IAAA,IAAArM,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAa,cACAlE,EAAAkG,aACAlG,EAAAuG,eAER,OATqCzF,EAAAuL,EAAAtM,GASrCsM,EATA,CASAjJ,EAAA7B,SATa0B,EAAAoJ,gBAAAA,EAWb,IAAAC,EAAA,SAAAvM,GAII,SAAAuM,EAAA7F,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAAsK,MAAA,EACAtK,EAAAuM,aAAA,EAIIvM,EAAAsK,MAAAtK,EAAA2K,WACA3K,EAAAuM,aAAAvM,EAAAmH,YAER,OATwCrG,EAAAwL,EAAAvM,GASxCuM,EATA,CASAnJ,EAAA5B,SATa0B,EAAAqJ,mBAAAA,EAWb,IAAAE,EAAA,SAAAzM,GAII,SAAAyM,EAAA/F,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAAyM,UAAA,EACAzM,EAAA0M,SAAA,EAII1M,EAAAyM,UAAAzM,EAAAmH,UACAnH,EAAA0M,SAAA1M,EAAAmH,YAER,OATyCrG,EAAA0L,EAAAzM,GASzCyM,EATA,CASArJ,EAAA5B,SATa0B,EAAAuJ,oBAAAA,EAWb,IAAAG,EAAA,SAAA5M,GACI,SAAA4M,IAAA,IAAA3M,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAA0B,aACA/E,EAAAkG,aACAlG,EAAAuG,eAER,OATsCzF,EAAA6L,EAAA5M,GAStC4M,EATA,CASAvJ,EAAA7B,SATa0B,EAAA0J,iBAAAA,EAWb,IAAAC,EAAA,SAAA7M,GAII,SAAA6M,EAAAnG,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAHAF,EAAA6M,UAAA,EACA7M,EAAAwJ,SAAA,GAIIxJ,EAAA6M,SAAA7M,EAAAkH,UACAlH,EAAAwJ,SAAAxJ,EAAAiH,cAER,OATyCnG,EAAA8L,EAAA7M,GASzC6M,EATA,CASAzJ,EAAA5B,SATa0B,EAAA2J,oBAAAA,EAWb,IAAA9K,EAAA,SAAA/B,GACI,SAAA+B,EAAAgL,EAAAlM,GAAA,IAAAZ,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAqB,kBACA1E,EAAAkG,aACAlG,EAAAoK,QAAA0C,GACA9M,EAAAsG,QAAA1F,GACAZ,EAAAuG,eAER,OAXwCzF,EAAAgB,EAAA/B,GAWxC+B,EAXA,CAWAsB,EAAA7B,SAXa0B,EAAAnB,mBAAAA,EAab,IAAAiL,EAAA,SAAAhN,GAGI,SAAAgN,EAAAtG,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAFAF,EAAAkI,MAAA,EAIIlI,EAAAkI,MAAAlI,EAAAmH,YAER,OAPqDrG,EAAAiM,EAAAhN,GAOrDgN,EAPA,CAOA5J,EAAA5B,SAPa0B,EAAA8J,gCAAAA,EASb,IAAAC,EAAA,SAAAjN,GACI,SAAAiN,IAAA,IAAAhN,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAM,uBACA3D,EAAAkG,aACAlG,EAAAuG,eAER,OAT4CzF,EAAAkM,EAAAjN,GAS5CiN,EATA,CASA5J,EAAA7B,SATa0B,EAAA+J,uBAAAA,EAWb,IAAAC,EAAA,SAAAlN,GACI,SAAAkN,EAAAC,GAAA,IAAAlN,EAAAD,EAAA+F,KAAA5F,OAAAA,KAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAO,UACA5D,EAAAkG,aACAlG,EAAAmN,SAAAD,EAAAE,QACA,IAAA,IAAAnE,EAAA,EAAAA,EAAAiE,EAAAE,OAAAnE,IACIjJ,EAAAuH,UAAA2F,EAAAjE,WACJjJ,EAAAuG,eAER,OAZiCzF,EAAAmM,EAAAlN,GAYjCkN,EAZA,CAYA7J,EAAA7B,SAZa0B,EAAAgK,YAAAA,EAcb,IAAAI,EAAA,SAAAtN,GACI,SAAAsN,EAAAC,GAAA,IAAAtN,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAAQ,iBACA7D,EAAAkG,aACAlG,EAAAuH,UAAA+F,GACAtN,EAAAuG,eAER,OAVuCzF,EAAAuM,EAAAtN,GAUvCsN,EAVA,CAUAjK,EAAA7B,SAVa0B,EAAAoK,kBAAAA,EAWb,IAAAE,EAAA,SAAAxN,GACI,SAAAwN,EAAAvE,EAAAC,GAAA,IAAAjJ,EAAAD,EAAA+F,KAAA5F,OAAAA,YAEIF,EAAA+F,SAAA,KACA/F,EAAAgG,gBAAA,GACAhG,EAAAiG,SAAA5C,EAAA+B,SACApF,EAAAkG,aACAlG,EAAAoK,QAAApB,EAAA,EAAA,GACAhJ,EAAAuH,UAAAiG,UAAAvE,IACAjJ,EAAAuG,eAER,OAXkCzF,EAAAyM,EAAAxN,GAWlCwN,EAXA,CAWAnK,EAAA7B,SAXa0B,EAAAsK,aAAAA,EAYb,IAAAE,EAAA,SAAA1N,GAKI,SAAA0N,EAAAhH,GAAA,IAAAzG,EAAAD,EAAA+F,KAAA5F,KAAAuG,IAAAvG,YAEIF,EAAA0N,MAAA1N,EAAAgH,UACAhH,EAAA2N,OAAA3N,EAAAkH,UACAlH,EAAA4N,QAAAC,UAAA7N,EAAAiH,aACAjH,EAAAwJ,SAAAxJ,EAAAiH,cAER,OAZsCnG,EAAA2M,EAAA1N,GAYtC0N,EAZA,CAYAtK,EAAA5B,SAZa0B,EAAAwK,iBAAAA,GApkBjB,CAilBAxK,EAAAV,EAAAU,MAAAV,EAAAU,IAAA,KACAV,EAAAhB,QAAA0B,ohCCvlBA,IAAAC,EAAA5D,EAAA,6BACAE,EAAAF,EAAA,gCACAC,EAAAD,EAAA,gBAEAwO,EAAAxO,EAAA,6BACAyO,EAAAzO,EAAA,6CACA0O,EAAA1O,EAAA,2DACAD,EAAAC,EAAA,+CACA6D,EAAA7D,EAAA,4DAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNoO,EAAA,SAAAlO,GAAA,SAAAkO,IAAA,IAAAjO,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAkO,WAAA,KAEAlO,EAAAmO,UAAA,KAEAnO,EAAAoO,YAAA,KAEApO,EAAAM,QAAA,KAGAN,EAAAqO,UAAA,KAGArO,EAAAsO,QAAA,KAEQtO,EAAAuO,QAAA,EACAvO,EAAAwO,SAAA,GAMAxO,EAAAyO,YAAA,IAuLZ,OA/MmC3N,EAAAmN,EAAAlO,GAqB/BkO,EAAAlN,UAAAC,MAAA,aAIAiN,EAAAlN,UAAA2N,gBAAA,WACI,GAAAxO,KAAAuO,WACIvO,KAAAsO,UACItO,KAAAsO,SAAAG,KAAA,SAAAC,EAAAC,GACI,OAAAD,EAAAtH,GAAAuH,EAAAvH,KAKRpH,KAAAsO,UACItO,KAAAsO,SAAAG,KAAA,SAAAC,EAAAC,GACI,OAAAA,EAAAvH,GAAAsH,EAAAtH,KAIZpH,KAAAuO,YAAAvO,KAAAuO,WACAvO,KAAAoO,QAAAV,QAAAkB,oBACA,IAAA,IAAAjI,EAAA,EAAAA,EAAA3G,KAAAsO,SAAApB,OAAAvG,IAAA,CACI,IAAAC,EAAApH,GAAAqP,YAAA7O,KAAAgO,YACApH,EAAApF,QAAA,EACAxB,KAAAoO,QAAAV,QAAAoB,SAAAlI,GACAA,EAAAmI,aAAA,eAAAC,KAAAhP,KAAAsO,SAAA3H,MAIRoH,EAAAlN,UAAAoO,mBAAA,WAEI,GAAAjP,KAAAkP,YACIlP,KAAAsO,UACItO,KAAAsO,SAAAG,KAAA,SAAAC,EAAAC,GACI,OAAAD,EAAAS,cAAAR,EAAAQ,gBAKRnP,KAAAsO,UACItO,KAAAsO,SAAAG,KAAA,SAAAC,EAAAC,GACI,OAAAA,EAAAQ,cAAAT,EAAAS,gBAIZnP,KAAAkP,aAAAlP,KAAAkP,YACAlP,KAAAoO,QAAAV,QAAAkB,oBACA,IAAA,IAAAjI,EAAA,EAAAA,EAAA3G,KAAAsO,SAAApB,OAAAvG,IAAA,CACI,IAAAC,EAAApH,GAAAqP,YAAA7O,KAAAgO,YACApH,EAAApF,QAAA,EACAxB,KAAAoO,QAAAV,QAAAoB,SAAAlI,GACAA,EAAAmI,aAAA,eAAAC,KAAAhP,KAAAsO,SAAA3H,MAGDoH,EAAAlN,UAAAmO,KAAA,WAAP,IAAAlP,EAAAE,KACIA,KAAAqO,SACArO,KAAAqO,QAAA,EACArO,KAAAiO,UAAAmB,YAAAvB,EAAAxM,QAAAgO,SAAAC,qBAAAtM,EAAA3B,QAAAkO,MAAAC,QACAxP,KAAAkO,YAAA9M,OAAA4B,EAAA3B,QAAAkO,MAAAE,SACA3B,EAAAzM,QAAAqO,SAAA5B,EAAAzM,QAAAsO,iBAAA,WACI7P,EAAAiB,KAAAS,SACA1B,EAAAM,QAAAgB,OAAAjC,EAAAkC,QAAAC,aAAA0B,EAAA3B,QAAAkO,MAAAK,QACJ5P,MACA8N,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,kBAEArQ,EAAA+B,QAAAK,cAAAmO,YAAA,SAAAtJ,GACI,GAAAzG,EAAAiB,KAAAS,OAEA,OADA,IAAAyB,EAAA5B,QAAAkF,GACAuJ,YACI,KAAAzQ,EAAAgC,QAAA8B,KAAAC,MAEQ9D,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAuK,eAEJ,MACJ,KAAAvM,EAAAgC,QAAA8B,KAAAE,YAEQ,IAAA0M,EAAA,IAAA1Q,EAAAgC,QAAAiF,mBAAAC,GAGAzG,EAAAsO,QAAAV,QAAAkB,oBACA9O,EAAAwO,SAAAyB,EAAAvJ,KACA1G,EAAAwO,SAAAG,KAAA,SAAAC,EAAAC,GACI,OAAAD,EAAAtH,GAAAuH,EAAAvH,KAEJ,IAAA,IAAAT,EAAA,EAAAA,EAAA7G,EAAAwO,SAAApB,OAAAvG,IAAA,CACI,IAAAC,EAAApH,GAAAqP,YAAA/O,EAAAkO,YACApH,EAAApF,QAAA,EACA1B,EAAAsO,QAAAV,QAAAoB,SAAAlI,GACAA,EAAAmI,aAAA,eAAAC,KAAAlP,EAAAwO,SAAA3H,IAaR,MACJ,KAAAtH,EAAAgC,QAAA8B,KAAAS,eAEQiK,EAAAxM,QAAAgO,SAAAW,aAAA,GACA,IAEAC,EAAA,aAFAF,EAAA,IAAA1Q,EAAAgC,QAAA2H,oBAAAzC,IAEAkE,WAAA,oCACA,OAAAsF,EAAAtF,YACI,KAAA,EACIwF,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,kBACA,MACJ,KAAA,EACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,GACID,EAAApC,EAAAxM,QAAAgO,SAAAa,YAAA,kBAERrC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAH,GAEJ,MACJ,KAAA5Q,EAAAgC,QAAA8B,KAAAU,kBAEQgK,EAAAxM,QAAAgO,SAAAW,aAAA,GACAD,EAAA,IAAA1Q,EAAAgC,QAAAiG,uBAAAf,GACAqH,EAAAvM,QAAAgO,SAAAgB,aAAAN,KAOhB/P,QAIG+N,EAAAlN,UAAAU,KAAA,WACHvB,KAAAe,KAAAS,QAAA,EACAxB,KAAAsQ,YACAxC,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,mBAGG5B,EAAAlN,UAAA0P,aAAA,WACHjR,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAA8F,iBAAA,KAGG4G,EAAAlN,UAAAyP,UAAA,WAMHhR,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAsE,kBAGGoI,EAAAlN,UAAA2P,QAAA,WACHlR,EAAA+B,QAAAK,cAAA+O,QACA5C,EAAAxM,QAAAgO,SAAAqB,UAAA,UAGG3C,EAAAlN,UAAA8P,eAAA,WACH9C,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,oBAxMJlO,EAAA,CADCrC,EAAAH,GAAAoR,SAC4B7C,EAAAlN,UAAA,kBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAiD,SAC0BsL,EAAAlN,UAAA,iBAAA,GAE3BmB,EAAA,CADCrC,EAAAH,GAAAyC,QAC4B8L,EAAAlN,UAAA,mBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAyC,QACwB8L,EAAAlN,UAAA,eAAA,GAGzBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACyB4L,EAAAlN,UAAA,iBAAA,GAG1BmB,EAAA,CADCrC,EAAAH,GAAAqR,aAC6B9C,EAAAlN,UAAA,eAAA,GAfbmB,EAAA,CADpBtC,GACoBqO,GAArB,CAAAvO,GAAA4C,WAAqBC,EAAAhB,QAAA0M,sxCCbrB,IAAA5O,EAAAC,EAAA,+CAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNmR,EAAA,SAAAjR,GAAA,SAAAiR,IAAA,IAAAhR,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAiR,OAAA,KAEAjR,EAAAkR,OAAA,KAEAlR,EAAAmR,aAAA,KAEAnR,EAAAK,OAAA,KAEAL,EAAAoR,YAAA,KAEApR,EAAAM,QAAA,KAEON,EAAAY,KAAA,EACCZ,EAAAW,QAAA,EACAX,EAAAU,QAAA,IAsDZ,OAvE0CI,EAAAkQ,EAAAjR,GAmBtCiR,EAAAjQ,UAAAC,MAAA,WAAA,IAAAhB,EAAAE,KACIA,KAAAG,OAAAY,KAAAC,GAAA,QAAA,WACIlB,EAAAqR,iBAIDL,EAAAjQ,UAAAU,KAAA,SAAAoI,EAAAnJ,GAECR,KAAA+Q,OAAA3P,OAAApB,KAAAgR,OAAA5P,OADJ,GAAAuI,EACI,gBAEA,cAEJ3J,KAAAU,KAAAV,KAAAS,QACAT,KAAAQ,QAAAA,EACAR,KAAAe,KAAAS,QAAA,EACAxB,KAAAiR,aAAAzP,QAAA,EACA,IAAA,IAAAmF,EAAA,EAAAA,EAAA3G,KAAAiR,aAAAG,OAAAC,cAAA1K,IACI3G,KAAAiR,aAAAG,OAAAE,SAAA3K,GAAA4K,UAEJvR,KAAAG,OAAAgB,SAAA,EACAnB,KAAAkR,YAAAM,UAAA,EACAxR,KAAAmR,eAGGL,EAAAjQ,UAAA4Q,QAAA,SAAAnI,EAAA5I,EAAAgR,GACH,GAAAA,IACI1R,KAAAe,KAAAS,QAAA,GAEJxB,KAAAQ,QAAAkR,EACA1R,KAAAU,KAAAV,KAAAQ,UACIR,KAAAU,KAAAV,KAAAQ,SAEJR,KAAAG,OAAAgB,SAAAnB,KAAAU,MAAAV,KAAAQ,QAAAR,KAAAS,SACAT,KAAAkR,YAAAM,UAAAxR,KAAAG,OAAAgB,SACAnB,KAAAI,QAAAgB,OAAAjC,EAAAkC,QAAAC,aAAAtB,KAAAU,MAEA,IAAAkG,EAAApH,GAAAqP,YAAA7O,KAAAiR,cACArK,EAAAwK,OAAApR,KAAAiR,aAAAG,OACAxK,EAAA+K,eAAA,eAAA5C,aAAAvP,GAAAyC,OAAAb,OAAAkI,EACA1C,EAAA+K,eAAA,WAAA5C,aAAAvP,GAAAyC,OAAAb,OAAAjC,EAAAkC,QAAAyB,YAAApC,GACAkG,EAAApF,QAAA,GAGGsP,EAAAjQ,UAAA+Q,QAAA,WACH,OAAA5R,KAAAU,MAGIoQ,EAAAjQ,UAAAsQ,YAAA,WACJnR,KAAAkR,YAAAM,UAAAxR,KAAAG,OAAAgB,SACAnB,KAAAU,KAAAV,KAAAS,QAAAQ,KAAAC,OAAAlB,KAAAQ,QAAAR,KAAAS,SAAAT,KAAAG,OAAAgB,UACAnB,KAAAI,QAAAgB,OAAAjC,EAAAkC,QAAAyB,YAAA9C,KAAAU,OAlEJsB,EAAA,CADCrC,EAAAH,GAAAyC,QACuB6O,EAAAjQ,UAAA,cAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACuB6O,EAAAjQ,UAAA,cAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC4B2O,EAAAjQ,UAAA,oBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAA0C,SACwB4O,EAAAjQ,UAAA,cAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAAiD,SAC6BqO,EAAAjQ,UAAA,mBAAA,GAE9BmB,EAAA,CADCrC,EAAAH,GAAAyC,QACwB6O,EAAAjQ,UAAA,eAAA,GAbRmB,EAAA,CADpBtC,GACoBoR,GAArB,CAAAtR,GAAA4C,WAAqBC,EAAAhB,QAAAyP,m6BCLrB,IAAAjD,EAAAzO,EAAA,6CACAD,EAAAC,EAAA,+CAGMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNkS,EAAA,SAAAhS,GAAA,SAAAgS,IAAA,IAAA/R,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAgS,UAAA,KAEAhS,EAAAiS,KAAA,KAGAjS,EAAAoO,YAAA,KAEApO,EAAAM,QAAA,KAEAN,EAAAmO,UAAA,KAEAnO,EAAAkS,OAAA,KAEAlS,EAAAmS,OAAA,KAEAnS,EAAAoS,WAAA1S,GAAA2S,GAAA,EAAA,GAEArS,EAAAsS,YAAA5S,GAAA2S,GAAA,EAAA,GAEArS,EAAAmI,OAAA,KAEAnI,EAAAuS,YAAA,KAEAvS,EAAAwS,QAAA,KAEOxS,EAAAwJ,SAAA,GACAxJ,EAAA0J,OAAA,GACC1J,EAAAyS,YAAA,OAgHZ,OA9IoC3R,EAAAiR,EAAAhS,GA+BhCgS,EAAAhR,UAAAC,MAAA,aAGO+Q,EAAAhR,UAAA2R,MAAA,WACHxS,KAAAsJ,SAAA,GAEAtJ,KAAA8R,YAAoB9R,KAAA8R,UAAA/Q,KAAAS,QAAA,GACpBxB,KAAA+R,OAAe/R,KAAA+R,KAAAvQ,QAAA,GACfxB,KAAAgS,OAAAjR,KAAAS,QAAA,EACAxB,KAAAiS,OAAAzQ,QAAA,EACAxB,KAAAiI,OAAAzG,QAAA,EACAxB,KAAAyS,0BAGGZ,EAAAhR,UAAA6R,IAAA,SAAApJ,EAAAE,EAAA9I,EAAAiS,GACH3S,KAAAsJ,SAAAA,EACAtJ,KAAAkO,YAAA9M,OAAAkI,EACAtJ,KAAAkO,YAAA9M,OAAA8L,OAAA,KACIlN,KAAAkO,YAAA9M,OAAApB,KAAAkO,YAAA9M,OAAAwR,UAAA,EAAA,IAAA,OAEJ5S,KAAAiO,UAAAmB,YAAAvB,EAAAxM,QAAAgO,SAAAC,qBAAA9F,GACAxJ,KAAA6S,QAAAnS,GACAV,KAAAiI,OAAAzG,OAAAmR,EAEA3S,KAAA8R,YAAoB9R,KAAA8R,UAAA/Q,KAAAS,QAAA,GACpBxB,KAAA+R,OAAe/R,KAAA+R,KAAAvQ,QAAA,IAGZqQ,EAAAhR,UAAAgS,QAAA,SAAAnS,GACHV,KAAAI,QAAAgB,OAAAjC,EAAAkC,QAAAyB,YAAApC,IAGGmR,EAAAhR,UAAAiS,QAAA,WACHtT,GAAAuT,MAAAC,gBAAAhT,KAAAgS,OAAAjR,MACAf,KAAAgS,OAAAjR,KAAAS,QAAA,EACAxB,KAAAiS,OAAAzQ,QAAA,GAGGqQ,EAAAhR,UAAAoS,kBAAA,SAAAvS,GAAP,IAAAZ,EAAAE,KACIA,KAAAgS,OAAAjR,KAAAS,QAAA,EACAxB,KAAAiS,OAAAzQ,QAAA,EACAxB,KAAAiS,OAAAiB,uBAAAC,GAAAC,UAAAC,aAAA,EAAA,QAAA,GACArT,KAAAgS,OAAA5Q,OAAA,GAAA,EACA5B,GAAA8T,MAAAtT,KAAAgS,OAAAjR,MACK2R,IAAA,CAAAa,MAAA,EAAA5E,GAAA,KACA6E,GAAA,EAAA,CAAAD,MAAA,GAAA5E,EAAA,IAAA,CAAA8E,OAAAjU,GAAAiU,OAAAC,UACAC,MAAA,GACA/N,KAAA,WACG9F,EAAAkS,OAAAjR,KAAAS,QAAA,EACA1B,EAAAmS,OAAAzQ,QAAA,IACJV,SAGD+Q,EAAAhR,UAAA+S,YAAA,SAAAlT,GAAP,IAAAZ,EAAAE,KACIA,KAAAgS,OAAAjR,KAAAS,QAAA,EACAxB,KAAAiS,OAAAzQ,QAAA,EACAxB,KAAAiS,OAAAiB,uBAAAC,GAAAC,UAAAC,aAAA,EAAA,QAAA,GACArT,KAAAgS,OAAA5Q,OAAA,GAAAjC,EAAAkC,QAAAyB,YAAApC,GACAlB,GAAA8T,MAAAtT,KAAAgS,OAAAjR,MACK2R,IAAA,CAAAa,MAAA,EAAA5E,GAAA,KACA6E,GAAA,EAAA,CAAAD,MAAA,GAAA5E,EAAA,IAAA,CAAA8E,OAAAjU,GAAAiU,OAAAC,UACAC,MAAA,GACA/N,KAAA,WACG9F,EAAAkS,OAAAjR,KAAAS,QAAA,EACA1B,EAAAmS,OAAAzQ,QAAA,IACJV,SAGR+Q,EAAAhR,UAAAgT,gBAAA,SAAAnG,GAAA,IAAA5N,EAAAE,KACIA,KAAAqS,YAAA7Q,QAAA,EACAxB,KAAAsS,QAAA9Q,QAAA,EACAsS,aAAA9T,KAAAuS,aACAvS,KAAAqS,YAAAtD,aAAAoE,GAAAC,UAAAC,aAAA,EAAA3F,GAAA,GACA1N,KAAAuS,YAAAwB,WAAA,WACIjU,EAAAuS,YAAA7Q,QAAA,EACA1B,EAAAwS,QAAA9Q,QAAA,GACJ,MAGJqQ,EAAAhR,UAAAmT,YAAA,SAAAtG,GAAA,IAAA5N,EAAAE,KAEIA,KAAAqS,YAAA7Q,QAAA,EACAxB,KAAAsS,QAAA9Q,QAAA,EACAsS,aAAA9T,KAAAuS,aACAvS,KAAAsS,QAAAY,uBAAA1T,GAAAyC,OAAAb,OAAAsM,EACA1N,KAAAuS,YAAAwB,WAAA,WACIjU,EAAAuS,YAAA7Q,QAAA,EACA1B,EAAAwS,QAAA9Q,QAAA,GACJ,MAGJqQ,EAAAhR,UAAAoT,SAAA,WACIH,aAAA9T,KAAAuS,aACAvS,KAAAqS,YAAA7Q,QAAA,EACAxB,KAAAsS,QAAA9Q,QAAA,GAGGqQ,EAAAhR,UAAAqT,eAAA,SAAAxT,GAAP,IAAAZ,EAAAE,KACIA,KAAAgS,OAAAjR,KAAAS,QAAA,EACAxB,KAAAiS,OAAAiB,uBAAAC,GAAAC,UAAAC,aAAA,EAAA,QAAA,GACArT,KAAAgS,OAAA5Q,OAAA,GAAAjC,EAAAkC,QAAAyB,YAAApC,GACAlB,GAAA8T,MAAAtT,KAAAgS,OAAAjR,MACK2R,IAAA,CAAAa,MAAA,EAAA5E,GAAA,KACA6E,GAAA,EAAA,CAAAD,MAAA,GAAA5E,EAAA,IAAA,CAAA8E,OAAAjU,GAAAiU,OAAAC,UACAC,MAAA,GACA/N,KAAA,WACG9F,EAAAkS,OAAAjR,KAAAS,QAAA,EACA1B,EAAAmS,OAAAzQ,QAAA,IACJV,SAxIRkB,EAAA,CADCrC,EAAAH,GAAA2U,SAC2BtC,EAAAhR,UAAA,iBAAA,GAE5BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACoB0P,EAAAhR,UAAA,YAAA,GAGrBmB,EAAA,CADCrC,EAAAH,GAAAyC,QAC4B4P,EAAAhR,UAAA,mBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAyC,QACwB4P,EAAAhR,UAAA,eAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAAiD,SAC2BoP,EAAAhR,UAAA,iBAAA,GAE5BmB,EAAA,CADCrC,EAAAH,GAAAyC,QACuB4P,EAAAhR,UAAA,cAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsB0P,EAAAhR,UAAA,cAAA,GAEvBmB,EAAA,CADCrC,EAAAH,GAAA4U,OACiCvC,EAAAhR,UAAA,kBAAA,GAElCmB,EAAA,CADCrC,EAAAH,GAAA4U,OACkCvC,EAAAhR,UAAA,mBAAA,GAEnCmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsB0P,EAAAhR,UAAA,cAAA,GAEvBmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC2B0P,EAAAhR,UAAA,mBAAA,GAE5BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACuB0P,EAAAhR,UAAA,eAAA,GA1BPmB,EAAA,CADpBtC,GACoBmS,GAArB,CAAArS,GAAA4C,WAAqBC,EAAAhB,QAAAwQ,k9BCPrB,IAkBAwC,EAlBAhV,EAAAD,EAAA,gBACAkV,EAAAlV,EAAA,mBACA4D,EAAA5D,EAAA,6BACAwO,EAAAxO,EAAA,6BACAmV,EAAAnV,EAAA,sBACAE,EAAAF,EAAA,gCAEAoV,EAAApV,EAAA,mBAEAyO,EAAAzO,EAAA,6CACA0O,EAAA1O,EAAA,2DACAqV,EAAArV,EAAA,gDACAsV,EAAAtV,EAAA,mDACAD,EAAAC,EAAA,+CACA6D,EAAA7D,EAAA,4DACAuV,EAAAvV,EAAA,iDACAwV,EAAAxV,EAAA,0BAEA,SAAAiV,GACIA,EAAAA,EAAA,GAAA,GAAA,KACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,QARJ,CASAA,IAAAA,EAAA,KACM,IAENQ,EAOAC,EATMvV,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SACNoV,EAAAvV,GAAA8T,OACA,SAAAuB,GACIA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,kBAAA,GAAA,qBALJ,CAMAA,IAAAA,EAAA,KACA,SAAAC,GACIA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,OAAA,GAAA,SALJ,CAMAA,IAAAA,EAAA,KAEA,IAAAE,EAAA,SAAAnV,GAAA,SAAAmV,IAAA,IAAAlV,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEIF,EAAAmV,QAAA,KAEAnV,EAAAoV,SAAA,KAEApV,EAAAqV,WAAA,KAEArV,EAAAsV,iBAAA,KAEAtV,EAAAuV,OAAA,KAEAvV,EAAAwV,QAAA,KAEAxV,EAAAyV,YAAA,KAEAzV,EAAA0V,YAAA,KAEA1V,EAAA2V,YAAA,KAEA3V,EAAA4V,aAAA,KAEA5V,EAAA6V,SAAA,KAEA7V,EAAA8V,WAAA,KAEA9V,EAAA+V,SAAA,KAEA/V,EAAAgW,SAAA,KAEAhW,EAAAiW,QAAA,GAEAjW,EAAAkW,QAAA,GAEAlW,EAAAmW,WAAA,GAEAnW,EAAAoW,OAAA,KAEApW,EAAAqW,OAAA,KAEArW,EAAAsW,SAAA,KAEAtW,EAAAuW,gBAAA,KAEAvW,EAAAwW,WAAA,KAEAxW,EAAAyW,cAAA,GAEAzW,EAAA0W,MAAA,KAEA1W,EAAA2W,YAAA,KAEA3W,EAAA4W,aAAA,KAEA5W,EAAA6W,gBAAA,KAEA7W,EAAA8W,gBAAA,KAEA9W,EAAA+W,cAAA,KAEA/W,EAAAgX,eAAA,KAEAhX,EAAAiX,MAAA,KAEAjX,EAAAkX,OAAA,KAEAlX,EAAAmX,gBAAA,KAEAnX,EAAAoX,aAAA,KAGQpX,EAAAuO,QAAA,EACAvO,EAAA0H,OAAA,EAEA1H,EAAAqX,aAAA,GACArX,EAAAsX,kBAAA,GACAtX,EAAAuX,QAAA,EACAvX,EAAA6H,UAAA,EACS7H,EAAAwX,SAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAETxX,EAAAyX,OAAA,EACAzX,EAAA0X,UAAA,EACA1X,EAAA6S,UAAA,EACA7S,EAAAmI,OAAA,GACAnI,EAAA2X,gBAAA,GAEA3X,EAAA4X,eAAAhD,EAAArT,QAAAsW,oBACA7X,EAAA8X,SAAA,KACA9X,EAAA+X,cAAA,KAoFA/X,EAAAgY,cAAA,EAyGAhY,EAAAiY,WAAA,GACAjY,EAAAkY,gBAAA,EAoGAlY,EAAAmY,eAAA,EA2nBAnY,EAAAoY,SAAA,KA4SZ,OAjyCkCtX,EAAAoU,EAAAnV,GA2F9BmV,EAAAnU,UAAAsX,iBAAA,WACInY,KAAA8X,eAAA,GACA9X,KAAA8X,eAAA,IAA6B9X,KAAA8X,cAAA,GAE7B9X,KAAAmV,WAAAiD,0BAAApY,KAAA8X,cAAA,KAGJ9C,EAAAnU,UAAAwX,iBAAA,WACIrY,KAAA8X,eAAA,GACA9X,KAAA8X,eAAA,IAA6B9X,KAAA8X,cAAA,GAC7B9X,KAAAmV,WAAAiD,0BAAApY,KAAA8X,cAAA,KAIJ9C,EAAAnU,UAAAyX,iBAAA,WACItY,KAAAsV,QAAAiD,QAAA,IACAvY,KAAAqV,OAAA7T,QAAA,GAGJwT,EAAAnU,UAAA2X,kBAAA,WACIxY,KAAAsV,QAAAiD,QAAA,IACAvY,KAAAqV,OAAA7T,QAAA,GAEJwT,EAAAnU,UAAA4X,WAAA,WACIzY,KAAAwY,oBACAxY,KAAAsV,QAAA9T,QAAA,EACAhC,GAAA8T,MAAAtT,KAAAsV,SAAA9B,GAAA,GAAA,CAAA9E,EAAAlP,GAAAkZ,QAAAC,MAAA,EAAA3Y,KAAAsV,QAAAqD,MAAA,GAAA,CAAAlF,OAAAjU,GAAAiU,OAAAmF,UAAA9X,SAGJkU,EAAAnU,UAAAgY,aAAA,WACI,GAAA7Y,KAAAsV,QAAA9T,OACIxB,KAAAyY,aAGAzY,KAAA8Y,eAIR9D,EAAAnU,UAAAiY,YAAA,WAAA,IAAAhZ,EAAAE,KACIA,KAAAsV,QAAA9T,QAAA,EACAhC,GAAA8T,MAAAtT,KAAAsV,SAAA9B,GAAA,GAAA,CAAA9E,EAAAlP,GAAAkZ,QAAAC,MAAA,EAAA3Y,KAAAsV,QAAAqD,MAAA,GAAA,CAAAlF,OAAAjU,GAAAiU,OAAAsF,SAAAnT,KAAA,WACI9F,EAAAwV,QAAA9T,QAAA,IACJV,SAGJkU,EAAAnU,UAAAmY,WAAA,SAAAjJ,GACI,IAAAkJ,EAAAjZ,KAAAkZ,UAAAnJ,EAAAzG,UACA,GAAA2P,EAAA,CACIlJ,EAAA,MAAA,IACAtC,EAAAsC,EAAA,OACArC,EAAAqC,EAAA,QAEAtC,EAEIwL,EAAApF,gBAAAnG,GAGAuL,EAAAjF,YAAAtG,KAKZsH,EAAAnU,UAAAwR,YAAA,SAAA8G,EAAA/R,GACI9H,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAgM,aAAA,EAAAjG,IACApH,KAAA8Y,eAGJ9D,EAAAnU,UAAAyR,QAAA,WACItS,KAAAkX,aAAA9V,OAAAgY,OAAAlM,OAAA,IACI5N,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAgM,aAAA,EAAArN,KAAAkX,aAAA9V,SACApB,KAAAkX,aAAA9V,OAAA,GACApB,KAAA8Y,gBAIR9D,EAAAnU,UAAAwY,aAAA,SAAApJ,GACIA,EAAAmJ,OAAAlM,OAAA,IACI5N,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAgM,aAAA,EAAA4C,IACAjQ,KAAA8Y,gBAKR9D,EAAAnU,UAAAC,MAAA,WAAA,IAAAhB,EAAAE,KACIA,KAAA8X,cAAA,EACA9X,KAAAmV,WAAAiD,0BAAApY,KAAA8X,cAAA,IAGA,IAFA,IAAAwB,EAAAtZ,kBAGI,IAAAe,EAAAwY,EAAAnE,iBAAA9D,SAAA3K,GACA5F,EAAAC,GAAA,QAAA,WAEIsY,EAAAD,aAAAtY,EAAAuQ,SAAA,GAAAvC,aAAAvP,GAAAyC,OAAAb,kBAJRuF,EAAA,EAAAA,EAAA3G,KAAAoV,iBAAA/D,cAAA1K,QAQA3G,KAAA4X,SAAA,IAAApY,GAAAga,SAAA,QACAxZ,KAAA2V,SAAA5U,KAAAqQ,OAAA5P,QAAA,EACA,IAAS,IAAAiY,EAAA,SAAAC,GACLC,EAAA1D,WAAAyD,GACA3Y,KAAAC,GAAA,QAAA,WACI,GAAAlB,EAAA6H,UAIArI,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAA2I,aAAA0P,EAAA5Z,EAAAwX,SAAAxX,EAAAyX,UAHIzX,EAAA8Z,UAAA/L,EAAAxM,QAAAgO,SAAAa,YAAA,6BAJZwJ,EAAA,EAAAA,EAAA1Z,KAAAiW,WAAA/I,OAAAwM,IAASD,EAAAC,GAWT,IAAS,IAAAG,EAAA,SAAAC,GACLC,EAAA/D,QAAA8D,GACA/Y,KAAAC,GAAA,QAAA,WACIlB,EAAAyX,OAAAuC,EACA,IAAA,IAAAE,EAAA,EAAAA,EAAAla,EAAAkW,QAAA9I,OAAA8M,IACIla,EAAAkW,QAAAgE,GAAAxY,OAAAA,OAAAwY,GAAAF,YALZA,EAAA,EAAAA,EAAA9Z,KAAAgW,QAAA9I,OAAA4M,IAASD,EAAAC,GAWT9Z,KAAAia,oBA8BIjF,EAAAnU,UAAAqZ,aAAA,WAAR,IAAApa,EAAAE,KAII,MAAAA,KAAAiV,SACIpH,EAAAxM,QAAAgO,SAAAW,aAAA,GACAxQ,GAAA2a,aAAAC,UAAA,UAAAC,KAAA,eAAA7a,GAAAoR,OAAA,aACA,SAAA0J,EAAAC,GACI1M,EAAAxM,QAAAgO,SAAAW,aAAA,GACA,MAAAsK,IAIIxa,EAAAmV,QAAAzV,GAAAqP,YAAA0L,GAAAxL,aAAA,uBACAjP,EAAAmV,QAAAlU,KAAAqQ,OAAAtR,EAAAiB,KAAAqQ,OACAtR,EAAAmV,QAAAlU,KAAAS,QAAA,EACA1B,EAAAmV,QAAA1T,YAIRvB,KAAAiV,QAAAlU,KAAAqQ,OAAApR,KAAAe,KAAAqQ,OACApR,KAAAiV,QAAAlU,KAAAS,QAAA,EACAxB,KAAAiV,QAAA1T,SAgBRyT,EAAAnU,UAAAoZ,iBAAA,WAAA,IAAAna,EAAAE,KACIR,GAAAgb,KAAAxZ,GAAAxB,GAAAgb,KAAAC,WAAA,WAWI,IAAA,IAAA9T,EAAA,EAAAA,EAAA7G,EAAAiW,QAAA7I,OAAAvG,IACI7G,EAAAiW,QAAApP,GAAAmM,aAsBZkC,EAAAnU,UAAA6Z,oBAAA,WACI,IAAA,IAAA/T,EAAA,EAAAA,EAAA3G,KAAAiW,WAAA/I,OAAAvG,IACI3G,KAAAiW,WAAAtP,GAAAhE,YAAAvB,QAMR4T,EAAAnU,UAAA8Z,YAAA,WACI3a,KAAAyV,YAAAjU,QAAA,GAGJwT,EAAAnU,UAAA+Z,YAAA,WACI5a,KAAAuV,YAAAsF,UAAAlG,EAAAtT,QAAAyZ,iBAAA,EACA9a,KAAAwV,YAAAqF,UAAAlG,EAAAtT,QAAA0Z,iBAAA,EACA/a,KAAAyV,YAAAjU,QAAA,GAGJwT,EAAAnU,UAAAma,aAAA,WACIhb,KAAA0V,aAAAlU,QAAA,GAGJwT,EAAAnU,UAAAoa,aAAA,WACIjb,KAAA0V,aAAAlU,QAAA,GAGJwT,EAAAnU,UAAAqa,iBAAA,WACIvG,EAAAtT,QAAA8Z,eAAAnb,KAAAuV,YAAAsF,UAAA,EAAA,GACA/M,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAA+Z,mBAGJpG,EAAAnU,UAAAwa,iBAAA,WACI1G,EAAAtT,QAAAia,eAAAtb,KAAAwV,YAAAqF,UAAA,EAAA,GACA/M,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAA+Z,mBAGJpG,EAAAnU,UAAA+Y,UAAA,SAAA3J,GAAA,IAAAnQ,EAAAE,KACIA,KAAA2V,SAAAvU,OAAA6O,EACAjQ,KAAA2V,SAAA5U,KAAAqQ,OAAAmH,QAAA,EACAvY,KAAA2V,SAAA5U,KAAAqQ,OAAA5P,QAAA,EACAhC,GAAAuT,MAAAC,gBAAAhT,KAAA2V,SAAA5U,KAAAqQ,QACA5R,GAAA8T,MAAAtT,KAAA2V,SAAA5U,KAAAqQ,QACKoC,GAAA,GAAA,CAAA+E,QAAA,KAAA,CAAA9E,OAAA,WACAE,MAAA,GACAH,GAAA,GAAA,CAAA+E,QAAA,GAAA,CAAA9E,OAAA,WACA7N,KAAA,WACG9F,EAAA6V,SAAA5U,KAAAqQ,OAAA5P,QAAA,IAEHV,SAmBTkU,EAAAnU,UAAA0a,OAAA,WACI,GAAAvb,KAAAqX,QAAA,EAAA,CACI,IAAAmE,EAAAva,KAAAwa,IAAA,EAAAzb,KAAAqX,QAAA3C,EAAArT,QAAAsW,qBACA3X,KAAA2W,gBAAAnF,UAAAgK,EAAAxb,KAAAiY,eACA,GAAAuD,GACIxb,KAAAqX,QAAA,EACArX,KAAA2W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACAxB,KAAA0b,WAAA1b,KAAA6X,eACZ7X,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,MACc,KAAAH,EAEdxb,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,KACc,MAAAH,EAEdxb,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,KACc,MAAAH,EAEdxb,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,KACe,MAAAH,IAEfxb,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,QAgBO3G,EAAAnU,UAAAmO,KAAA,WAAP,IAAAlP,EAAAE,KACIA,KAAAqO,SACArO,KAAAqO,QAAA,EAEAP,EAAAzM,QAAAqO,SAAA5B,EAAAzM,QAAAsO,iBAAA,WACI7P,EAAAiB,KAAAS,QACA1B,EAAAgW,SAAAjD,QAAA7P,EAAA3B,QAAAkO,MAAAK,OACJ5P,MACA8N,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,kBAEArQ,EAAA+B,QAAAK,cAAAmO,YAAA,SAAAtJ,GAEI,OADA,IAAAtD,EAAA5B,QAAAkF,GACAuJ,YACI,KAAAzQ,EAAAgC,QAAA8B,KAAAU,kBAEQgK,EAAAxM,QAAAgO,SAAAW,aAAA,GACA,IAAAD,EAAA,IAAA1Q,EAAAgC,QAAAiG,uBAAAf,GAEAqH,EAAAvM,QAAAgO,SAAAgB,aAAAN,GAEJ,MACJ,KAAA1Q,EAAAgC,QAAA8B,KAAAW,uBAEQiM,EAAA,IAAA1Q,EAAAgC,QAAAkI,oBAAAhD,GAGA,OAFA0S,EAAAnZ,EAAA8b,yBAGI3C,EAAAvG,IAAA3C,EAAAzG,SAAAyG,EAAAvG,OAAAuG,EAAA/H,OAAA,GAIR,MACJ,KAAA3I,EAAAgC,QAAA8B,KAAAY,cAEQgM,EAAA,IAAA1Q,EAAAgC,QAAAoI,mBAAAlD,GAEA,OADA0S,EAAAnZ,EAAAoZ,UAAAnJ,EAAAzG,YACoB2P,EAAAzG,QAExB,MACJ,KAAAnT,EAAAgC,QAAA8B,KAAAkB,UAKQ,OAHA0L,EAAA,IAAA1Q,EAAAgC,QAAA6H,kBAAA3C,GACAzG,EAAAiB,KAAAS,QAAA,EACAoM,EAAAvM,QAAAgO,SAAAwM,MAAAta,OACAwO,EAAA5G,QACI,KAAA,EACI0E,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,yBACA,MACJ,KAAA,EACIrC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,iBACA,MACJ,KAAA,EACIrC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,mBACA,MACJ,KAAA,EACIrC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,mBAIZ,MACJ,KAAA7Q,EAAAgC,QAAA8B,KAAAmB,qBAEQyL,EAAA,IAAA1Q,EAAAgC,QAAA+H,iBAAA7C,IAEA8C,QACIvJ,EAAAoV,WACIpV,EAAAoV,SAAA1T,QAAA,GAEJqM,EAAAxM,QAAAgO,SAAAuK,UAAA/L,EAAAxM,QAAAgO,SAAAa,YAAA,qBAEApQ,EAAAoV,WACIpV,EAAAoV,SAAA1T,QAAA,GAEJqM,EAAAxM,QAAAgO,SAAAuK,UAAA/L,EAAAxM,QAAAgO,SAAAa,YAAA,2BAGR,MACJ,KAAA7Q,EAAAgC,QAAA8B,KAAAc,eAEQ8L,EAAA,IAAA1Q,EAAAgC,QAAAqI,oBAAAnD,GAAA,IACA0J,EAAA,GAEA,OADAnQ,EAAA6H,UAAAoI,EAAApG,OACAoG,EAAApG,QACI,KAAA,EACIsG,EAAA,yCACAnQ,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA4b,WAAA5b,EAAA+X,eACAjK,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAA9P,YACA,MACJ,KAAA,EACI0L,EAAA,gDACAnQ,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA8W,gBAAAxV,OAAA,8BACAtB,EAAAuX,QAAA3C,EAAArT,QAAAsW,oBAAA,KAAA5H,EAAAnG,KAAA,IACA9J,EAAAmY,eAAA,KAAAlI,EAAAnG,KAAA,IACA9J,EAAAic,eAAAjH,EAAAkH,UACAlc,EAAAmc,SAAAnc,EAAA+X,cAAA,WACI/X,EAAAiB,KAAAS,OACIoM,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAA6H,OAEApc,EAAA4b,WAAA5b,EAAA+X,gBAGR,EAAA9H,EAAAnG,MACA,MACJ,KAAA,EACIqG,EAAA,yCACAnQ,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA8W,gBAAAxV,OAAA,+BACAtB,EAAAuX,QAAA3C,EAAArT,QAAAsW,oBAAA,IAAA5H,EAAAnG,KACA9J,EAAAmY,eAAA,IAAAlI,EAAAnG,KACA,MACJ,KAAA,EACIqG,EAAA,oDACAnQ,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA8W,gBAAAxV,OAAA,+BACAtB,EAAAuX,QAAA3C,EAAArT,QAAAsW,oBAAA,IAAA5H,EAAAnG,KACA9J,EAAAmY,eAAA,IAAAlI,EAAAnG,KACA,MACJ,KAAA,EACIqG,EAAA,2CACAnQ,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA8W,gBAAAxV,OAAA,iCACAtB,EAAAuX,QAAA3C,EAAArT,QAAAsW,oBAAA,IAAA5H,EAAAnG,KACA9J,EAAAmY,eAAA,IAAAlI,EAAAnG,KACA,MACJ,KAAA,EACIqG,EAAA,mDACAnQ,EAAAic,eAAAjH,EAAAqH,UACArc,EAAA6W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACA1B,EAAA8W,gBAAAxV,OAAA,yCACAtB,EAAAuX,QAAA3C,EAAArT,QAAAsW,oBAAA,IAAA5H,EAAAnG,KACA9J,EAAAmY,eAAA,IAAAlI,EAAAnG,KAGR,IAAAqG,IACInQ,EAAAsW,SAAAhV,OAAA6O,EACAnQ,EAAAqW,OAAA3U,QAAA,EACA1B,EAAAsc,aAAA,WACItc,EAAAqW,OAAA3U,QAAA,EACA1B,EAAAsc,aAAA,WACItc,EAAAqW,OAAA3U,QAAA,GACJ,KACJ,KAGR,MACJ,KAAAnC,EAAAgC,QAAA8B,KAAAoB,WAIQ,KAFAwL,EAAA,IAAA1Q,EAAAgC,QAAAwI,iBAAAtD,IAEA0B,QAAA8H,EAAA9H,QAAAjF,EAAA3B,QAAAkO,MAAAE,UAAA3P,EAAA6S,UACI9E,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAA,2FAGJtQ,EAAAmI,OAAA8H,EAAA9H,OACAnI,EAAA6S,SAAA7S,EAAAmI,QAAAjF,EAAA3B,QAAAkO,MAAAE,SAEA,IAAA,IAAA9I,EAAA,EAAAA,EAAA7G,EAAAiW,QAAA7I,OAAAvG,KACIsS,EAAAnZ,EAAAiW,QAAApP,IACAsB,OAAAzG,OAAA,IAAAyX,EAAA3P,UAAA2P,EAAA3P,UAAAxJ,EAAAmI,OAGJnI,EAAAmW,WAAAoG,QAAA,SAAAC,GAAA,OAAAA,EAAA1Z,UACA9C,EAAAyc,aACAzc,EAAA0c,kBACA1c,EAAAic,eAAAjH,EAAA2H,QAEJ,MACJ,KAAApd,EAAAgC,QAAA8B,KAAAe,UAEQ6L,EAAA,IAAA1Q,EAAAgC,QAAA8I,gBAAA5D,GAAA,IACAmW,EAAA5c,EAAAmW,WAAAlG,EAAAzF,OAGA,GAFAoS,EAAA7Z,YAAAkN,EAAAxF,UAEAwF,EAAAzG,UAAAtG,EAAA3B,QAAAkO,MAAAE,SAAA,CAEI,OAAAM,EAAA3F,OACI,KAAA,EACI,MACJ,KAAA,EAEI,YADAyD,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,mBAEJ,KAAA,EAEI,YADArC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,mBAEJ,QAEI,YADArC,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAAvC,EAAAxM,QAAAgO,SAAAa,YAAA,sBAGRlN,EAAA3B,QAAAkO,MAAAK,KAAAG,EAAAvF,aACAsD,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,kBAIJ,GAAA,OADAsJ,EAAAnZ,EAAAoZ,UAAAnJ,EAAAzG,WACA,CACI2P,EAAApG,QAAA9C,EAAAvF,cACA,IAAAmS,EAAA7c,EAAA8c,wBAAA7M,EAAA1F,UACSwS,EAAA,SAAAlW,GACL,IAAAmW,EAAAhd,EAAAid,QAAAJ,EAAAhW,IACAmW,EAAA1P,KAAA6L,EAAA3P,SACAwT,EAAAE,SAAA/D,EAAAlY,KAAAic,SACAld,EAAAqX,aAAA8F,eAAAlN,EAAAzF,SACIxK,EAAAqX,aAAApH,EAAAzF,OAAA,IAEJxK,EAAAqX,aAAApH,EAAAzF,OAAApD,KAAA4V,GACA,IAAAE,EAAAN,EAAA3b,KAAAic,SAAAE,QACAC,EAAA,IAAA3d,GAAA4U,KAAAK,EAAApT,QAAA+b,UAAAV,EAAA3b,KAAA4X,MAAA,EAAA,GAAA+D,EAAA3b,KAAA4X,MAAA,EAAA,IAAAlE,EAAApT,QAAA+b,UAAAV,EAAA3b,KAAAsc,OAAA,EAAA,GAAAX,EAAA3b,KAAAsc,OAAA,EAAA,KAGAL,EAAAtO,GAAAyO,EAAAzO,EACAsO,EAAArO,GAAAwO,EAAAxO,EACAnP,GAAAuT,MAAAC,gBAAA8J,GACA/H,EAAA+H,GAAAQ,KAAA9d,GAAA+d,OAAA,GAAA/d,GAAA2S,GAAA6K,EAAAtO,EAAAsO,EAAArO,GAAA,GAAA,GAAA8E,OAAAjU,GAAAge,gBACK5X,KAAA,WACGkX,EAAAE,SAAAA,IAEHlc,SAnBT,IAAA6F,EAAA,EAAAA,EAAAgW,EAAAzP,OAAAvG,IAASkW,EAAAlW,GAqBTiH,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAAoJ,MAGR,MAGJ,KAAApe,EAAAgC,QAAA8B,KAAAuB,YAKQ,IAHAqL,EAAA,IAAA1Q,EAAAgC,QAAA2J,kBAAAzE,GAGAI,EAAA,EAAAA,EAAAoJ,EAAA7E,iBAAAgC,OAAAvG,IAAA,CACI,IACAsS,EADAyE,EAAA3N,EAAA7E,iBAAAvE,GAEA,OADAsS,EAAAnZ,EAAAoZ,UAAAwE,EAAA,aAEIzE,EAAA/E,eAAAwJ,EAAA,aACAzE,EAAApG,QAAA6K,EAAA,eAEJA,EAAA,UAAA1a,EAAA3B,QAAAkO,MAAAE,WACIzM,EAAA3B,QAAAkO,MAAAK,KAAA8N,EAAA,aACA5P,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,mBAIR,IAAAhJ,EAAA,EAAAA,EAAAoJ,EAAAjI,MAAAoF,OAAAvG,IAAA,CACI,IAAAgX,EAAA5N,EAAAjI,MAAAnB,GACA7G,EAAAmW,WAAAtP,GAAA9D,YAAA8a,EAAA,YAGR,MACJ,KAAAte,EAAAgC,QAAA8B,KAAAwB,YAEQ7E,EAAAkY,gBAAA,EACA,IAAA4F,EAAA,IAAAve,EAAAgC,QAAA8J,kBAAA5E,GACA,IAAAI,EAAA,EAAAA,EAAAiX,EAAAnS,cAAAyB,OAAAvG,IAAA,CACI,IAAAkX,EAAAD,EAAAnS,cAAA9E,GACA,GAAAkX,EAAA,UAAA7a,EAAA3B,QAAAkO,MAAAE,SAAA,CACIzM,EAAA3B,QAAAkO,MAAAK,KAAAiO,EAAA,aACA/P,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,kBACA,OAMR,IAAAhJ,EAAA,EAAAA,EAAAiX,EAAAvS,QAAA6B,OAAAvG,IACIiX,EAAAvS,QAAA1E,GAGJ,IAAAmX,GAAAF,EAAAvS,QAAA,GAAAuS,EAAAvS,QAAA,GAAAuS,EAAAvS,QAAA,GAAAuS,EAAAvS,QAAA,IAAA,GAAA,EACA0S,EAAAH,EAAAxS,WAAA,GAAA4S,IACAC,EAAAL,EAAAxS,WAAA,GAAA4S,IACAE,EAAAN,EAAAxS,WAAA,GAAA4S,IACAG,EAAAP,EAAAxS,WAAA,GAAA4S,IACAI,EAAA,GACAte,EAAAic,eAAAjH,EAAAuJ,QACA,IAAAC,EAAA,WACIR,GACIM,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,EACA0c,GACIE,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,GACG2c,IACHC,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,KAIJ4c,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,EACAuc,GACIK,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,GACGyc,IACHG,EAAAlX,KAAA,GACApH,EAAAmW,WAAA,GAAAzU,OAAAA,QAAA,IAIR,IAAA+c,EAAA,GACSC,EAAA,SAAAC,GACL,IAAAxU,EAAAyU,SAAAD,GACAjI,EAAA1W,EAAAqX,aAAAlN,GACA,IAAA,GAAAmU,EAAAO,QAAA1U,GAAA,CACI,IACA+S,EADAld,EAAAmW,WAAAhM,GACAlJ,KAAAic,SAAAE,QACAF,EAAArO,GAAA,GACAqO,EAAAE,QACApd,EAAAiY,WAAA7Q,KAAA6M,WAAA,WACI,IAAAhT,EAAA,IAAAvB,GAAA2C,KACApB,EAAAqQ,OAAAtR,EAAA0W,MACAzV,EAAAwX,QAAA,EACA,IAAA,IAAA5R,EAAA,EAAAA,EAAA6P,EAAAtJ,OAAAvG,IACI6P,EAAA7P,GAAAyK,OAAArQ,EAIJvB,GAAAuT,MAAAC,gBAAAjS,GACAgU,EAAAhU,GAAAyS,GAAA,GAAA,CAAA+E,QAAA,KAAA,CAAA9E,OAAAjU,GAAAiU,OAAAsF,SACKpF,MAAA,IACAH,GAAA,GAAA,CAAAD,MAAA,EAAA7E,EAAA5O,EAAAuW,gBAAA3H,EAAAC,EAAA7O,EAAAuW,gBAAA1H,IACA6E,GAAA,GAAA,CAAA+E,QAAA,GAAA,CAAA9E,OAAAjU,GAAAiU,OAAAmF,UACAhT,KAAA,WACG,IAAA,IAAAe,EAAA,EAAAA,EAAA6P,EAAAtJ,OAAAvG,IACI6P,EAAA7P,GAAAyK,OAAAtR,EAAA0W,MACAA,EAAA7P,GAAA4R,QAAA,IACA/B,EAAA7P,GAAAnF,QAAA,EAEJT,EAAAwQ,YACJzQ,SACR,WAEA,IAAA,IAAA6F,EAAA,EAAAA,EAAA6P,EAAAtJ,OAAAvG,IAAA,CACI,IAAAmW,EAAAtG,EAAA7P,GACA2C,EAAAwT,EAAA1P,KACAmR,EAAAtB,eAAA3T,KACIiV,EAAAjV,GAAA,IAEJiV,EAAAjV,GAAApC,KAAA4V,KAtCZ,IAAA,IAAA2B,KAAA3e,EAAAqX,aAASqH,EAAAC,GA2CT3e,EAAAiY,WAAA7Q,KAAA6M,WAAA,WACI,IAAA,IAAA0K,KAAAF,EAAA,CACI,IAAAtF,EAAAnZ,EAAAoZ,UAAAuF,GACA,GAAA,MAAAxF,EAMI,IALA,IAAAzC,EAAA+H,EAAAE,GACAG,EAAA3F,EAAA/G,WAAAgL,QACA2B,EAAA5F,EAAA7G,YAAA8K,QACA4B,EAAA,EACAC,EAAA,EACSC,EAAA,SAAArY,GACL,IAAAmW,EAAAtG,EAAA7P,GACAsY,EAAAH,EAAA,GAAA,IAAA,EACAtf,GAAAuT,MAAAC,gBAAA8J,GACA/H,EAAA+H,GAAAtJ,GAAA,GAAA,CAAA9E,EAAAkQ,EAAAlQ,EAAAC,EAAAiQ,EAAAjQ,EAAA4J,QAAA0G,GAAA,CAAAxL,OAAAjU,GAAAiU,OAAAmF,UACKjF,MAAA,IAAA6C,EAAAtJ,OAAA,IAAAvG,EAAA,GACA6M,GAAA,GAAA,CAAAwJ,SAAA/D,EAAAlY,KAAAic,UAAA,CAAAvJ,OAAAjU,GAAAiU,OAAAsF,SACAnT,KAAA,WACGkX,EAAAtb,QAAA,IACJV,QAEJ,IAAAoe,EAAApf,EAAAid,QAAA,GACAmC,EAAAnQ,aAAAvP,GAAAiD,QAAA2M,YAAA0N,EAAA/N,aAAAvP,GAAAiD,QAAA2M,YACA8P,EAAA3G,QAAA,EACA2G,EAAAlC,SAAAld,EAAAuW,gBAAA2G,SACA,IAAAmC,EAAAJ,EAAA,GAAA,IAAA,EACAvf,GAAAuT,MAAAC,gBAAAkM,GACAnK,EAAAmK,GAAAvL,MAAA,IACKH,GAAA,GAAA,CAAA+E,QAAA4G,GAAA,CAAA1L,OAAAjU,GAAAiU,OAAAsF,SACAvF,GAAA,GAAA,CAAA9E,EAAAmQ,EAAAnQ,EAAAC,EAAAkQ,EAAAlQ,GAAA,CAAA8E,OAAAjU,GAAAiU,OAAAmF,UACAjF,MAAA,IAAA6C,EAAAtJ,OAAA,IAAAvG,EAAA,IACA6M,GAAA,GAAA,CAAAwJ,SAAA/D,EAAAlY,KAAAic,UAAA,CAAAvJ,OAAAjU,GAAAiU,OAAAmF,UACAhT,KAAA,WACGsZ,EAAA1d,QAAA,IACJV,QACJge,EAAA,KACIA,IACAF,EAAAjQ,GAAA,GAGJoQ,EAAA,KACIA,IACAF,EAAAlQ,GAAA,IAhCRhI,EAAA,EAAAA,EAAA6P,EAAAtJ,OAAAvG,IAASqY,EAAArY,KAuCrB,QAEJmX,EACII,EACIpe,EAAAsf,cAAAvK,EAAAwK,SAAAf,GACGH,EACHre,EAAAsf,cAAAvK,EAAAyK,WAAAhB,GAEAxe,EAAAsf,cAAAvK,EAAA0K,kBAAAjB,GAGJP,EACIje,EAAAsf,cAAAvK,EAAA2K,UAAAlB,GACGL,GACHne,EAAAsf,cAAAvK,EAAA4K,YAAAnB,GAKRxe,EAAAiY,WAAA7Q,KAAA6M,WAAA,WACI,IAAA,IAAApN,EAAA,EAAAA,EAAAiX,EAAAnS,cAAAyB,OAAAvG,IAAA,CACI,IAAAkX,EAAAD,EAAAnS,cAAA9E,GACAsS,EAAAnZ,EAAAoZ,UAAA2E,EAAA,UACA,GAAA,MAAA5E,EAAA,CACI,IAAAyG,EAAA7B,EAAA,aACA6B,EAAAA,EAAAC,MAAA,KAEA,IADA,IAAAC,EAAA,GACA5F,EAAA,EAAAA,EAAA0F,EAAAxS,OAAA8M,IACI4F,GAAAzgB,EAAAkC,QAAAyB,YAAA4c,EAAA1F,IAAA,OAEJf,EAAAhG,kBAAA2M,GACA3G,EAAApG,QAAAgL,EAAA,eAIR/P,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,mBACJ,MAEA7P,EAAA6S,WACI7S,EAAAgW,SAAAlC,YAAAgK,EAAApS,qBACA1L,EAAAgW,SAAAjD,QAAA+K,EAAArS,kBACAvI,EAAA3B,QAAAkO,MAAAK,KAAAgO,EAAArS,iBACAuC,EAAAzM,QAAAM,KAAAmM,EAAAzM,QAAAsO,mBAGJrQ,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAwK,eAEJ,MACJ,KAAAxM,EAAAgC,QAAA8B,KAAA4B,QAMQ,IAJAgL,EAAA,IAAA1Q,EAAAgC,QAAAyK,cAAAvF,GAEAzG,EAAA+W,cAAAzV,OAAAjC,EAAAkC,QAAAC,aAAAyO,EAAA/D,UACAlM,EAAAgX,eAAA1V,OAAAjC,EAAAkC,QAAAC,aAAAyO,EAAAhE,WACApF,EAAA,EAAAA,EAAA7G,EAAAmX,gBAAA5F,cAAA1K,IACIA,EAAAoJ,EAAA7D,SAAAgB,QACIpN,EAAAmX,gBAAA3F,SAAA3K,GAAAoI,aAAAvP,GAAAiD,QAAA2M,YAAA,GAAAW,EAAA7D,SAAAvF,GAAA7G,EAAAiX,MAAAjX,EAAAkX,OACAlX,EAAAmX,gBAAA3F,SAAA3K,GAAAnF,QAAA,GAEA1B,EAAAmX,gBAAA3F,SAAA3K,GAAAnF,QAAA,EAIZ,MACJ,KAAAnC,EAAAgC,QAAA8B,KAAAa,aAGQ,QADA+L,EAAA,IAAA1Q,EAAAgC,QAAA+K,mBAAA7F,IACA6D,OACI,KAAA,EACI,MACJ,KAAA,EACIyD,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAA,qBAAAjR,EAAAkC,QAAAC,aAAAyO,EAAA1D,cAAA,mCACA,MACJ,QACIwB,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAA,YAAAL,EAAA3F,MAAA,qCAIZ,MACJ,KAAA/K,EAAAgC,QAAA8B,KAAA0B,aAEQkL,EAAA,IAAA1Q,EAAAgC,QAAAqL,oBAAAnG,IACAoG,UAAA7M,EAAA6S,UACI9E,EAAAxM,QAAAgO,SAAAc,YAAAC,QAAA,iEAGR,MACJ,KAAA/Q,EAAAgC,QAAA8B,KAAAgC,eAEQ4K,EAAA,IAAA1Q,EAAAgC,QAAAiL,oBAAA/F,GAEJ,MACJ,KAAAlH,EAAAgC,QAAA8B,KAAAiC,6BAEQ2K,EAAA,IAAA1Q,EAAAgC,QAAAwL,gCAAAtG,GAEJ,MACJ,KAAAlH,EAAAgC,QAAA8B,KAAA+B,QAEQ6K,EAAA,IAAA1Q,EAAAgC,QAAAkM,iBAAAhH,GACAzG,EAAAkZ,WAAAjJ,KAOhB/P,QAEIgV,EAAAnU,UAAAgf,eAAA,SAAAvB,GAAR,IAAAxe,EAAAE,KACI8f,EAAA9f,KAAAsW,WAAA3E,eAAA,OACAoO,EAAA,CAAA5gB,EAAAkC,QAAAsa,gBAAA,IAAA,IAAAxc,EAAAkC,QAAA2e,YAAA,GAAA,KAAA7gB,EAAAkC,QAAAsa,eAAA,EAAA,IACAsE,EAAA,CAAA9gB,EAAAkC,QAAAsa,gBAAA,IAAA,IAAAxc,EAAAkC,QAAAsa,eAAA,GAAA,KAAAxc,EAAAkC,QAAAsa,eAAA,EAAA,IACAuE,EAAA,CAAA/gB,EAAAkC,QAAAsa,gBAAA,KAAA,KAAAxc,EAAAkC,QAAAsa,eAAA,IAAA,MAAAxc,EAAAkC,QAAAsa,eAAA,EAAA,IACAwE,EAAA,CAAAhhB,EAAAkC,QAAAsa,gBAAA,KAAA,KAAAxc,EAAAkC,QAAAsa,eAAA,IAAA,MAAAxc,EAAAkC,QAAAsa,eAAA,EAAA,IACAnc,GAAAuT,MAAAC,gBAAA8M,GACA/K,EAAA+K,GAAApN,IAAA,CAAAhE,GAAA,EAAAC,EAAA,EAAA4J,QAAA,MAAA/E,GAAA,EAAA,CAAA9E,EAAAqR,EAAApR,EAAAsR,IACKtM,MAAA,IAAA/N,KAAA,WACG9F,EAAAsgB,OAAAtL,EAAAuJ,SACIC,IACA1Q,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAAgM,QAIP7M,GAAA,GAAA,CAAA9E,EAAAwR,EAAAvR,EAAAwR,EAAA5H,QAAA,GAAA,CAAA9E,OAAAjU,GAAAiU,OAAAmF,UAAA9X,SAEDkU,EAAAnU,UAAAyf,QAAA,WACJtgB,KAAAwc,kBACAxc,KAAAsW,WAAA9U,QAAA,EACAhC,GAAAuT,MAAAC,gBAAAhT,KAAAsW,YACAvB,EAAA/U,KAAAsW,YAAA5D,IAAA,CAAAhE,EAAA,MAAAC,EAAA,OAAA4E,MAAA,IAAAC,GAAA,GAAA,CAAAD,MAAA,EAAA7E,EAAA,EAAAC,EAAA,IAAA,CAAA8E,OAAAjU,GAAAiU,OAAAsF,SAAAjY,SAEIkU,EAAAnU,UAAAue,cAAA,SAAAmB,EAAAjC,GACJ,IAAAkC,EAAA,GACA,OAAAD,GACI,KAAA1L,EAAAwK,SACImB,EAAAtZ,KAAAlH,KAAA+W,MAAA/W,KAAA+W,MAAA/W,KAAA+W,MAAA/W,KAAA+W,OACA,MAEJ,KAAAlC,EAAAyK,WACIkB,EAAAtZ,KAAAlH,KAAAgX,OAAAhX,KAAAgX,OAAAhX,KAAAgX,OAAAhX,KAAAgX,QACA,MAEJ,KAAAnC,EAAA2K,UACIgB,EAAAtZ,KAAAlH,KAAA+W,MAAA/W,KAAAgX,OAAAhX,KAAA+W,MAAA/W,KAAA+W,OACA,MAEJ,KAAAlC,EAAA4K,YACIe,EAAAtZ,KAAAlH,KAAAgX,OAAAhX,KAAAgX,OAAAhX,KAAA+W,MAAA/W,KAAAgX,QACA,MAEJ,KAAAnC,EAAA0K,kBACIiB,EAAAtZ,KAAAlH,KAAAgX,OAAAhX,KAAAgX,OAAAhX,KAAA+W,MAAA/W,KAAA+W,OAIR,IAAA,IAAApQ,EAAA,EAAAA,EAAA,EAAAA,IACI3G,KAAAsW,WAAA3E,eAAA,aAAAhL,GAAAoI,aAAAvP,GAAAiD,QAAA2M,YAAAoR,EAAA7Z,EAAA,GAEJ3G,KAAA6f,eAAAvB,IAEItJ,EAAAnU,UAAA2b,gBAAA,WACJhd,GAAAuT,MAAAC,gBAAAhT,KAAAsW,WAAA3E,eAAA,QACA3R,KAAAsW,WAAA3E,eAAA,OAAA8O,YAAAjhB,GAAA2S,IAAA,KAAA,OACAnS,KAAAsW,WAAA3E,eAAA,OAAA4G,QAAA,KAGIvD,EAAAnU,UAAA6f,UAAA,WACJ1gB,KAAA8V,SAAAtD,QACAxS,KAAA+V,QAAAsG,QAAA,SAAAC,GAAA,OAAAA,EAAA9J,UACAxS,KAAAiW,WAAAoG,QAAA,SAAAC,GAAA,OAAAA,EAAA1Z,UACA5C,KAAA+b,eAAAjH,EAAA6L,MACA3gB,KAAAmW,OAAA3U,QAAA,EACAxB,KAAAwc,kBACA,IAAA,IAAA7V,EAAA,EAAAA,EAAA3G,KAAA+V,QAAA7I,OAAAvG,IACI3G,KAAA+V,QAAApP,GAAAmM,UAEJ,IAAAnM,EAAA,EAAAA,EAAA3G,KAAA+X,WAAA7K,OAAAvG,IACImN,aAAA9T,KAAA+X,WAAApR,IAEJ3G,KAAAuc,aACAvc,KAAA2W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACAxB,KAAA0b,WAAA1b,KAAA6X,eACA7X,KAAAqX,QAAA,GAGIrC,EAAAnU,UAAA+a,qBAAA,WAEJ,IADA,IAAAgF,EAAA,IAAAC,MACAla,EAAA,EAAAA,EAAA3G,KAAA+V,QAAA7I,OAAAvG,IACI,IAAA3G,KAAA+V,QAAApP,GAAA2C,UAAoCsX,EAAA1Z,KAAAlH,KAAA+V,QAAApP,IAExC,OAAAia,EAAA1T,OAAA,EACI0T,EAAAnM,EAAApT,QAAA+b,SAAA,EAAAwD,EAAA1T,SAEJ,MAGI8H,EAAAnU,UAAAqY,UAAA,SAAA5P,GACJ,IAAA,IAAA3C,EAAA,EAAAA,EAAA3G,KAAA+V,QAAA7I,OAAAvG,IAAA,CACI,IAAAsS,EAAAjZ,KAAA+V,QAAApP,GACA,GAAA,IAAAsS,EAAA3P,UAAA2P,EAAA3P,UAAAA,EAA0D,OAAA2P,EAE9D,OAAA,MAIIjE,EAAAnU,UAAAkc,QAAA,SAAArc,GACJ,IAAAogB,EAAA,KAEA9gB,KAAA4X,SAAAmJ,QAAA,GACI/gB,KAAA4X,SAAAoJ,IAAAxhB,GAAAqP,YAAA7O,KAAA0W,eAEJoK,EAAA9gB,KAAA4X,SAAAqJ,MACAjhB,KAAAkY,SAAAhR,KAAA4Z,GACAA,EAAA1P,OAAApR,KAAAwW,MAEA,IADA,IAAA0K,EAAA,EACAva,EAAA,EAAAA,EAAA3G,KAAAsX,SAAApK,OAAAvG,IACI,GAAA3G,KAAAsX,SAAA3Q,IAAAjG,EAAA,CACIwgB,EAAAva,EACA,MAUR,OAPAua,GAAA,EAEAJ,EAAA/R,aAAAvP,GAAAiD,QAAA2M,YAAApP,KAAAuW,cAAA2K,GACAJ,EAAAvI,QAAA,IACAuI,EAAAtf,QAAA,EACAsf,EAAAK,gBAAAnhB,KAAAwW,MAAAnF,cAAA,GAEAyP,GAGI9L,EAAAnU,UAAA0b,WAAA,WACJvc,KAAA0W,aAAAlV,QAAA,EACA,IAAA,IAAAmF,EAAA,EAAAA,EAAA3G,KAAAkY,SAAAhL,OAAAvG,IACI3G,KAAA4X,SAAAoJ,IAAAhhB,KAAAkY,SAAAvR,IAEJ3G,KAAAkY,SAAA,GACAlY,KAAAmX,aAAA,IAGInC,EAAAnU,UAAA+b,wBAAA,SAAAlc,GAKJ,IAJA,IAAAogB,EAAA,IAAAD,MACAO,EAAA1gB,EACAD,EAAAT,KAAAsX,SAAAtX,KAAAwX,WACA6J,EAAA,EACAD,GAAA3gB,GAAA4gB,EAAA,IAAA,CACI,IAAA,IAAA1a,EAAA3G,KAAAwX,UAAAxX,KAAAgW,QAAA9I,OAAAvG,GAAA3G,KAAAwX,UAAA7Q,IACI,GAAAya,GAAAphB,KAAAsX,SAAA3Q,GAAA,CACIma,EAAA5Z,KAAAlH,KAAAsX,SAAA3Q,IACAya,GAAAphB,KAAAsX,SAAA3Q,GACA,MAGR0a,IAEJ,OAAAP,GAGG9L,EAAAnU,UAAAU,KAAA,SAAAgF,GAAP,IAAAzG,EAAAE,KAGIA,KAAAshB,aAAA/a,EACA,MAAAvG,KAAA4X,WACI5X,KAAA4X,SAAA,IAAApY,GAAAga,SAAA,SAEJxZ,KAAAe,KAAAS,QAAA,EACAxB,KAAA0gB,YACA1gB,KAAAkV,UAAAlV,KAAAkV,SAAA1T,SACIxB,KAAAkV,SAAA1T,QAAA,GAEVxB,KAAAyW,YAAArV,OAAAjC,EAAAkC,QAAAsa,eAAA,IAAA,KACM3b,KAAAwH,OAAAjB,EAAAiB,OACAxH,KAAA0X,eAAAhD,EAAArT,QAAAsW,oBACA/J,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAAkN,MACAve,EAAA3B,QAAAkO,MAAAK,KAAArJ,EAAAyB,MACAhI,KAAA2S,SAAApM,EAAA0B,OACAjI,KAAAiI,OAAA,GACAjI,KAAA2S,WACI3S,KAAAiI,OAAAjF,EAAA3B,QAAAkO,MAAAE,UAIJzP,KAAA8V,SAAApD,IAAA1P,EAAA3B,QAAAkO,MAAAE,SAAAzM,EAAA3B,QAAAkO,MAAAC,OAAAxM,EAAA3B,QAAAkO,MAAAK,KAAArJ,EAAA0B,QACA,IAAA,IAAAtB,EAAA,EAAAA,EAAAJ,EAAAwB,YAAAmF,OAAAvG,IAAA,CACI,IAAAkX,EAAAtX,EAAAwB,YAAApB,GACAsS,EAAAjZ,KAAA4b,uBACA,GAAA,MAAA3C,EAMI,MALAA,EAAAvG,IAAAmL,EAAA,SAAAA,EAAA,OAAAA,EAAA,MAAAA,EAAA,QACAA,EAAA,SACI7d,KAAAiI,OAAA4V,EAAA,UAOZ,GAAA,GAAAtX,EAAAoB,WAAA,GAAApB,EAAAoB,UACI,IAAAhB,EAAA,EAAAA,EAAAJ,EAAAuB,MAAAoF,OAAAvG,IAAA,CACI,IAAAgX,EAAApX,EAAAuB,MAAAnB,GACA+V,EAAA1c,KAAAiW,WAAAtP,GACA+V,EAAA7Z,YAAA8a,EAAA,YAEA,IADA,IAAAhB,EAAA3c,KAAA4c,wBAAAe,EAAA,YACS6D,EAAA,SAAAC,GACL,IAAA3E,EAAA4E,EAAA3E,QAAAJ,EAAA8E,IACAxI,EAAAyI,EAAAxI,UAAAlW,EAAA3B,QAAAkO,MAAAE,UACAqN,EAAA1P,KAAA6L,EAAA3P,SACAwT,EAAAE,SAAA/D,EAAAlY,KAAAic,SACA0E,EAAAvK,aAAA8F,eAAAU,EAAAvW,MACIsa,EAAAvK,aAAAwG,EAAAvW,IAAA,IAEJsa,EAAAvK,aAAAwG,EAAAvW,IAAAF,KAAA4V,GACA,IAAAE,EAAAN,EAAA3b,KAAAic,SAAAE,QACAC,EAAA,IAAA3d,GAAA4U,KAAAK,EAAApT,QAAA+b,UAAAV,EAAA3b,KAAA4X,MAAA,EAAA,GAAA+D,EAAA3b,KAAA4X,MAAA,EAAA,IAAAlE,EAAApT,QAAA+b,UAAAV,EAAA3b,KAAAsc,OAAA,EAAA,GAAAX,EAAA3b,KAAAsc,OAAA,EAAA,KAGAL,EAAAtO,GAAAyO,EAAAzO,EACAsO,EAAArO,GAAAwO,EAAAxO,EACAnP,GAAAuT,MAAAC,gBAAA8J,GACA/H,EAAA+H,GAAAQ,KAAA9d,GAAA+d,OAAA,GAAA/d,GAAA2S,GAAA6K,EAAAtO,EAAAsO,EAAArO,GAAA,GAAA,GAAA8E,OAAAjU,GAAAge,gBACK5X,KAAA,WACGkX,EAAAE,SAAAA,IAEHlc,gBApBT2gB,EAAA,EAAAA,EAAA9E,EAAAzP,OAAAuU,IAASD,EAAAC,GAsBT7T,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAAoJ,MAIR,IAAA9W,EAAA,EAAAA,EAAA3G,KAAAsX,SAAApK,OAAAvG,IACI,GAAAJ,EAAAgB,UAAAvH,KAAAsX,SAAA3Q,GAAA,CACI3G,KAAAuX,OAAA5Q,EACA3G,KAAAwX,UAAAxX,KAAAuX,OACA,MAGR,IAAA5Q,EAAA,EAAAA,EAAA3G,KAAAgW,QAAA9I,OAAAvG,IAAA,CACI,IAAAgb,EAAA3hB,KAAAgW,QAAArP,GACAgb,EAAAngB,OAAAA,OAAAmF,GAAA3G,KAAAwX,UACAmK,EAAA5gB,KAAAS,OAAAmF,GAAA3G,KAAAwX,UAGJxX,KAAA2H,UAAApB,EAAAoB,UACA,IAAAsI,EAAA,GACA,OAAAjQ,KAAA2H,WACI,KAAA,EACIsI,EAAA,yCACA,MACJ,KAAA,EAEQA,EAAA,gDAKAjQ,KAAA2W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACAxB,KAAAqX,QAAA3C,EAAArT,QAAAsW,oBAAA,KAAApR,EAAAqB,UAAA,IACA5H,KAAAiY,eAAA,IACAjY,KAAA4W,gBAAAxV,OAAA,8BACApB,KAAAic,SAAAjc,KAAA6X,cAAA,WACI/X,EAAAiB,KAAAS,OACIoM,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAA6H,OAEApc,EAAA4b,WAAA5b,EAAA+X,gBAGR,EAAAtR,EAAAqB,UAAA,IACA5H,KAAA+b,eAAAjH,EAAAkH,UACAhc,KAAAsW,WAAA9U,QAAA,EAEJ,MAEJ,KAAA,EACIyO,EAAA,oDACA,MACJ,KAAA,EACIA,EAAA,2CACA,MACJ,KAAA,EACIA,EAAA,wCACAjQ,KAAA2W,gBAAA5V,KAAAqQ,OAAA5P,QAAA,EACAxB,KAAA2W,gBAAAnF,UAAA,EACAxR,KAAA4W,gBAAAxV,OAAA,wCAGR,IAAA6O,IACIjQ,KAAA+b,eAAAjH,EAAA6L,MACA3gB,KAAAkW,OAAAhD,uBAAA1T,GAAAyC,OACAb,OAAA6O,EACAjQ,KAAAoc,aAAA,WACItc,EAAAqW,OAAA3U,QAAA,EACA1B,EAAAsc,aAAA,WACItc,EAAAqW,OAAA3U,QAAA,GACJ,KACJ,KAGJlC,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAwK,gBAGImJ,EAAAnU,UAAAkb,eAAA,SAAAqE,GAAR,IAAAtgB,EAAAE,KAEI,OADAA,KAAAogB,MAAAA,EACAA,GACI,KAAAtL,EAAA6L,KACI3gB,KAAAkW,OAAA0L,UAAA,EACA5hB,KAAAkW,OAAA7C,aAAA,EAAA,QAAA,GACA,MAEJ,KAAAyB,EAAAkH,SACIhc,KAAAkW,OAAA0L,UAAA,EACA5hB,KAAAkW,OAAA7C,aAAA,EAAA,eAAA,GACArT,KAAAkW,OAAA2L,oBAAA,WACI/hB,EAAAic,eAAAjH,EAAA6L,QAEJ,MAEJ,KAAA7L,EAAAqH,SACInc,KAAAkW,OAAA0L,UAAA,EACA5hB,KAAAkW,OAAA7C,aAAA,EAAA,gBAAA,GACArT,KAAAkW,OAAA2L,oBAAA,WACI/hB,EAAAic,eAAAjH,EAAA6L,QAEJ,MAEJ,KAAA7L,EAAA2H,OACIjd,GAAAuT,MAAAC,gBAAAhT,KAAAsW,YACAvB,EAAA/U,KAAAsW,YAAA9C,GAAA,GAAA,CAAAD,MAAA,EAAA5E,EAAA,KAAA,CAAA8E,OAAAjU,GAAAiU,OAAAsF,SAAAnT,KAAA,WACI9F,EAAAwW,WAAA9U,QAAA,EACA1B,EAAAoW,OAAA0L,UAAA,EACA9hB,EAAAoW,OAAA7C,aAAA,EAAA,UAAA,GACAzF,EAAAvM,QAAAgO,SAAAyM,gBAAAzH,EAAAyN,SACAhiB,EAAAoW,OAAA2L,oBAAA,WACI/hB,EAAAic,eAAAjH,EAAAkH,cAERlb,QACAd,KAAAoc,aAAA,WACItc,EAAAwgB,WACJ,KACA,MAEJ,KAAAxL,EAAAuJ,OACIre,KAAAkW,OAAA0L,UAAA,EACA5hB,KAAAkW,OAAA7C,aAAA,EAAA,eAAA,GACArT,KAAAkW,OAAA2L,oBAAA,WACI/hB,EAAAic,eAAAjH,EAAA6L,UAOT3L,EAAAnU,UAAAkhB,WAAA,WACH/hB,KAAA4V,WAAApU,QAAAxB,KAAA4V,WAAApU,QAIGwT,EAAAnU,UAAAmhB,YAAA,WAEH,IAAA/R,EAAAjQ,KAAAkX,aAAA9V,OAAAgY,OACA,IAAAnJ,GACI3Q,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAgM,aAAA,EAAA4C,IAEJjQ,KAAAkX,aAAA9V,OAAA,IAGG4T,EAAAnU,UAAAohB,iBAAA,SAAAhS,GAEH,IAAAA,GACI3Q,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAgM,aAAA,EAAA4C,IAEJjQ,KAAAkX,aAAA9V,OAAA,IAGG4T,EAAAnU,UAAAqhB,YAAA,WACHliB,KAAAgb,gBAGGhG,EAAAnU,UAAAshB,QAAA,WACHtU,EAAAxM,QAAAgO,SAAA+S,gBAAAvU,EAAAxM,QAAAgO,SAAAa,YAAA,iCAGG8E,EAAAnU,UAAAwhB,WAAA,WACHriB,KAAAka,gBAGGlF,EAAAnU,UAAAyhB,aAAA,WACHzU,EAAAxM,QAAAgO,SAAA+S,gBAAAvU,EAAAxM,QAAAgO,SAAAa,YAAA,iCAGG8E,EAAAnU,UAAA2P,QAAA,WACHlR,EAAA+B,QAAAK,cAAA+O,QACA5C,EAAAxM,QAAAgO,SAAAqB,UAAA,UAIGsE,EAAAnU,UAAA0hB,eAAA,WACHjjB,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAA8K,kBAGG6I,EAAAnU,UAAA2hB,gBAAA,WACHljB,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAAoL,mBA1xCJzK,EAAA,CADCrC,EAAAiV,EAAAvT,UACuB2T,EAAAnU,UAAA,eAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACwB6S,EAAAnU,UAAA,gBAAA,GAEzBmB,EAAA,CADCrC,EAAAH,GAAAqR,aACgCmE,EAAAnU,UAAA,kBAAA,GAEjCmB,EAAA,CADCrC,EAAAH,GAAA2C,OACgC6S,EAAAnU,UAAA,wBAAA,GAEjCmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsB6S,EAAAnU,UAAA,cAAA,GAEvBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACuB6S,EAAAnU,UAAA,eAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAAijB,SAC6BzN,EAAAnU,UAAA,mBAAA,GAE9BmB,EAAA,CADCrC,EAAAH,GAAAijB,SAC6BzN,EAAAnU,UAAA,mBAAA,GAE9BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC2B6S,EAAAnU,UAAA,mBAAA,GAE5BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC4B6S,EAAAnU,UAAA,oBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAyC,QACyB+S,EAAAnU,UAAA,gBAAA,GAE1BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC0B6S,EAAAnU,UAAA,kBAAA,GAE3BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACwB6S,EAAAnU,UAAA,gBAAA,GAEzBmB,EAAA,CADCrC,EAAA2U,EAAAjT,UACuB2T,EAAAnU,UAAA,gBAAA,GAExBmB,EAAA,CADCrC,EAAA,CAAA2U,EAAAjT,WACsB2T,EAAAnU,UAAA,eAAA,GAEvBmB,EAAA,CADCrC,EAAA,CAAA6U,EAAAnT,WACsB2T,EAAAnU,UAAA,eAAA,GAEvBmB,EAAA,CADCrC,EAAA,CAAA4U,EAAAlT,WAC4B2T,EAAAnU,UAAA,kBAAA,GAE7BmB,EAAA,CADCrC,EAAAwT,GAAAC,WAC0B4B,EAAAnU,UAAA,cAAA,GAE3BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsB6S,EAAAnU,UAAA,cAAA,GAEvBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACyB+S,EAAAnU,UAAA,gBAAA,GAE1BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC+B6S,EAAAnU,UAAA,uBAAA,GAEhCmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC0B6S,EAAAnU,UAAA,kBAAA,GAE3BmB,EAAA,CADCrC,EAAA,CAAAH,GAAAkjB,eACoC1N,EAAAnU,UAAA,qBAAA,GAErCmB,EAAA,CADCrC,EAAAH,GAAA2C,OACqB6S,EAAAnU,UAAA,aAAA,GAEtBmB,EAAA,CADFrC,EAAAH,GAAAyC,QAC+B+S,EAAAnU,UAAA,mBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC4B6S,EAAAnU,UAAA,oBAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAiD,SACiCuS,EAAAnU,UAAA,uBAAA,GAElCmB,EAAA,CADCrC,EAAAH,GAAAyC,QACgC+S,EAAAnU,UAAA,uBAAA,GAEjCmB,EAAA,CADCrC,EAAAH,GAAAyC,QAC8B+S,EAAAnU,UAAA,qBAAA,GAE/BmB,EAAA,CADCrC,EAAAH,GAAAyC,QAC+B+S,EAAAnU,UAAA,sBAAA,GAEhCmB,EAAA,CADCrC,EAAAH,GAAAkjB,cAC4B1N,EAAAnU,UAAA,aAAA,GAE7BmB,EAAA,CADCrC,EAAAH,GAAAkjB,cAC6B1N,EAAAnU,UAAA,cAAA,GAE9BmB,EAAA,CADCrC,EAAAH,GAAA2C,OAC+B6S,EAAAnU,UAAA,uBAAA,GAEhCmB,EAAA,CADCrC,EAAAH,GAAAmjB,UAC+B3N,EAAAnU,UAAA,oBAAA,GApEfmB,EAAA,CADpBtC,GACoBsV,GAArB,CAAAxV,GAAA4C,WAAqBC,EAAAhB,QAAA2T,m/DC7CrB,IAAAhS,EAAA5D,EAAA,6BACAwjB,EAAAxjB,EAAA,0BACAyO,EAAAzO,EAAA,6CACAyjB,EAAAzjB,EAAA,gDACAD,EAAAC,EAAA,+CAIMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNmjB,EAAA,SAAAjjB,GAAA,SAAAijB,IAAA,IAAAhjB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAEIF,EAAA4N,QAAA,KAGA5N,EAAAya,OAAA,KAGAza,EAAAijB,QAAA,KAKAjjB,EAAAkjB,WAAA,GAEQljB,EAAAmjB,KAAA,EACAnjB,EAAAojB,QAAA,EACApjB,EAAAqjB,MAAA,IAAAtC,MACA/gB,EAAAyG,KAAA,KACAzG,EAAAsjB,SAAA,GACAtjB,EAAAujB,YAAA,GACAvjB,EAAAwjB,aAAA,GACAxjB,EAAAyjB,YAAA,GACAzjB,EAAA0jB,gBAAA,IAoKZ,OA3L8C5iB,EAAAkiB,EAAAjjB,GAwB1CijB,EAAAjiB,UAAA4iB,OAAA,aAGAX,EAAAjiB,UAAAC,MAAA,aAKAgiB,EAAAjiB,UAAA6iB,QAAA,WACI7jB,EAAAgB,UAAA6iB,QAAA9d,KAAA5F,MACA,IAAA,IAAA2G,EAAA,EAAAA,EAAA3G,KAAAmjB,MAAAjW,OAAAvG,IACI3G,KAAAmjB,MAAAxc,GAAAnF,QAAA,GAIRshB,EAAAjiB,UAAA8iB,UAAA,WACI9jB,EAAAgB,UAAA8iB,UAAA/d,KAAA5F,MACAA,KAAAijB,KAAA,EACAjjB,KAAAkjB,QAAA,EACAljB,KAAA+iB,QAAA3hB,OAAApB,KAAAijB,KAAA,IAAAjjB,KAAAkjB,QACAljB,KAAA4jB,YAGJd,EAAAjiB,UAAAU,KAAA,WACI1B,EAAAgB,UAAAU,KAAAqE,KAAA5F,MACAA,KAAA6jB,kBACA7jB,KAAAujB,YAAA,GACAvjB,KAAAuG,KAEA,IAAA,IAAAI,EAAA,EAAAA,EAAA3G,KAAAmjB,MAAAjW,OAAAvG,IACI3G,KAAAmjB,MAAAxc,GAAAnF,QAAA,GAGRshB,EAAAjiB,UAAAgjB,gBAAA,WACI7jB,KAAAwjB,gBAAA,EACAxjB,KAAAujB,YAAA,GACAvjB,KAAAqjB,YAAA,GACArjB,KAAAojB,SAAA,GACApjB,KAAAsjB,aAAA,GACA,IAAA,IAAA3c,EAAA,EAAAA,EAAA3G,KAAAmjB,MAAAjW,OAAAvG,IACI3G,KAAAmjB,MAAAxc,GAAAnF,QAAA,GAIRshB,EAAAjiB,UAAAijB,YAAA,WACI9jB,KAAAijB,KAAAjjB,KAAAkjB,UACIljB,KAAAijB,OACAjjB,KAAA+iB,QAAA3hB,OAAApB,KAAAijB,KAAA,IAAAjjB,KAAAkjB,QACAljB,KAAA4jB,aAIRd,EAAAjiB,UAAAkjB,YAAA,WACI/jB,KAAAijB,KAAA,IACIjjB,KAAAijB,OACAjjB,KAAA+iB,QAAA3hB,OAAApB,KAAAijB,KAAA,IAAAjjB,KAAAkjB,QACAljB,KAAA4jB,aAMRd,EAAAjiB,UAAAmjB,SAAA,SAAAjU,GACI/P,KAAA0N,QAAAkB,oBACA,IAAA,IAAAjI,EAAA,EAAAA,EAAA,GAAAA,IAAA,CACI,IAAAsd,EAAAtd,EAEA,GAAAsd,EAAAlU,EAAA,aAAA7C,OAAA,CACI,IAAAtG,EAAApH,GAAAqP,YAAA7O,KAAAua,QACA3T,EAAAwK,OAAApR,KAAA0N,QACA,IAAAwW,EAAAnU,EAAA,aAAAkU,GACAE,EAAAC,KAAAC,MAAAH,EAAA,aACAtd,EAAA+K,eAAA,SAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA8iB,EAAA,QACAtd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA8iB,EAAA,gBACAtd,EAAA+K,eAAA,WAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA+iB,EAAA,OACAvd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAb,QAAA8iB,EAAA,cAAA,EAAA,IAAA,IAAA/kB,EAAAkC,QAAAC,aAAA4iB,EAAA,eACAtd,EAAA+K,eAAA,WAAA5C,aAAAvP,GAAAyC,OAAAb,OAAAjC,EAAAkC,QAAAC,aAAA4iB,EAAA,cACAtd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAqiB,KAAAJ,EAAA,cAAA,EAAAlkB,KAAAgjB,WAAA,GAAAhjB,KAAAgjB,WAAA,GACApc,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAsiB,UAAAL,EAAA,cAAA,IAEA,IAAAM,EAAA5d,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAlB,KAAAic,SACApW,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAlB,KAAAic,SAAAkH,EAAA,cAAA,EAAA1kB,GAAAilB,GAAAD,EAAA9V,EAAA,GAAA,GAAAlP,GAAAilB,GAAAD,EAAA9V,EAAA,EAAA,MAOJoU,EAAAjiB,UAAA+iB,SAAA,SAAAc,GAAR,IAEIC,EAFJ7kB,EAAAE,UAAiB,IAAA0kB,IAAAA,GAAA,GACb7W,EAAAxM,QAAAgO,SAAAW,aAAA,GAEA2U,EAAA,CAAAC,EAAA,IAAAC,GAAA7hB,EAAA3B,QAAAkO,MAAAE,SAAAqV,EAAA9kB,KAAAijB,MAEAL,EAAAvhB,QAAA4f,IAAAje,EAAA3B,QAAA6E,IAAA6e,IAAAJ,EAAA,SAAAK,EAAAjV,SAGI,GAFAlC,EAAAxM,QAAAgO,SAAAW,aAAA,GAEA,MAAAgV,EAIA,GAAAjV,EAAA,QAAA,CACIjQ,EAAAojB,QAAAnT,EAAA,WACAjQ,EAAA0jB,kBACA1jB,EAAAyG,KAAAwJ,EACA,IAAAkV,EAAAlV,EAAA,aAEAjQ,EAAA0jB,gBAAA1jB,EAAAojB,WACI3jB,EAAAO,EAAAsjB,UAAAlc,KAAAnH,MAAAR,EAAA2lB,EAAAD,IACAnlB,EAAAyjB,YAAAzjB,EAAAsjB,UAGJtjB,EAAAojB,QAAAnT,EAAA,WACAjQ,EAAAijB,QAAA3hB,OAAAtB,EAAAmjB,KAAA,IAAAnjB,EAAAojB,QACApjB,EAAAkkB,SAAAjU,QAGAjQ,EAAA4N,QAAAkB,uBAKJkU,EAAAjiB,UAAAskB,YAAA,SAAAve,EAAAsd,GACJ,IAAAC,EAAAC,KAAAC,MAAAH,EAAA,aACAtd,EAAA+K,eAAA,SAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA8iB,EAAA,QACAtd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA8iB,EAAA,gBACAtd,EAAA+K,eAAA,WAAA5C,aAAAvP,GAAAyC,OAAAb,OAAA+iB,EAAA,OACAvd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAb,QAAA8iB,EAAA,cAAA,EAAA,IAAA,IAAA/kB,EAAAkC,QAAAC,aAAA4iB,EAAA,eACAtd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAqiB,KAAAJ,EAAA,cAAA,EAAAlkB,KAAAgjB,WAAA,GAAAhjB,KAAAgjB,WAAA,GACApc,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAAyC,OAAAsiB,SAAAL,EAAA,cAAA,EAAA,EAAA,EACAtd,EAAA+K,eAAA,WAAA5C,aAAAvP,GAAAyC,OAAAb,OAAAjC,EAAAkC,QAAAC,aAAA4iB,EAAA,cACAtd,EAAA+K,eAAA,QAAA5C,aAAAvP,GAAA4lB,UAAAhkB,OAAA8iB,EAAA,YACAtd,EAAApF,QAAA,GAEJshB,EAAAjiB,UAAAwkB,sBAAA,SAAAC,GACI,OAAAA,GACI,IAAA,aACA,IAAA,cACI,MAAA,iBACJ,IAAA,eACA,IAAA,gBACI,MAAA,oBACJ,IAAA,aACA,IAAA,cACI,MAAA,iBACJ,IAAA,cACA,IAAA,eACI,MAAA,uBACJ,IAAA,UACI,MAAA,mBACJ,IAAA,MACI,MAAA,mCACJ,QACI,OAAAA,IAGZxC,EAAAjiB,UAAA0kB,cAAA,SAAAC,EAAAC,GACIA,GAAAjmB,GAAAqR,WAAA6U,UAAAC,kBACI3lB,KAAAijB,KAAAjjB,KAAAkjB,UACIljB,KAAAijB,OACAjjB,KAAA4jB,UAAA,KArLZ5hB,EAAA,CADCrC,EAAAH,GAAA2C,OACuB2gB,EAAAjiB,UAAA,eAAA,GAGxBmB,EAAA,CADCrC,EAAAH,GAAA2C,OACsB2gB,EAAAjiB,UAAA,cAAA,GAGvBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACwB6gB,EAAAjiB,UAAA,eAAA,GAKzBmB,EAAA,CADCrC,EAAA,CAAAH,GAAAomB,cACgC9C,EAAAjiB,UAAA,kBAAA,GAbhBmB,EAAA,CADpBtC,GACoBojB,GAArB,CAAAD,EAAAxhB,SAAqBgB,EAAAhB,QAAAyhB,2kCCJrB,IAAA9f,EAAA5D,EAAA,6BACAyO,EAAAzO,EAAA,6CACAD,EAAAC,EAAA,+CACAC,EAAAD,EAAA,gBACAE,EAAAF,EAAA,gCAEMG,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAGNkmB,EAAA,SAAAhmB,GAAA,SAAAgmB,IAAA,IAAA/lB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAGIF,EAAAgmB,OAAA,KAGAhmB,EAAAimB,OAAA,KAEAjmB,EAAAkmB,WAAA,KAEAlmB,EAAAmmB,WAAA,KAGQnmB,EAAAokB,SAAA,OAiBZ,OA9BwCtjB,EAAAilB,EAAAhmB,GAcpCgmB,EAAAhlB,UAAAmO,KAAA,SAAAkV,GACIlkB,KAAAkkB,SAAAA,EACAlkB,KAAA8lB,OAAA1kB,OAAAjC,EAAAkC,QAAAC,aAAA4iB,EAAA,IACAlkB,KAAA+lB,OAAA3kB,OAAAjC,EAAAkC,QAAAC,aAAA4iB,EAAA,eACAlkB,KAAAgmB,WAAA5kB,OAAA8iB,EAAA,UAAA,IAAAA,EAAA,eACAlkB,KAAAimB,WAAAzU,UAAA0S,EAAA,UAAAA,EAAA,gBAGJ2B,EAAAhlB,UAAAqlB,WAAA,WACIljB,EAAA3B,QAAAkO,MAAAK,MAAA5P,KAAAkkB,SAAA,eACIrW,EAAAxM,QAAAgO,SAAAW,aAAA,GACA1Q,EAAA+B,QAAAK,cAAAC,KAAA,IAAAtC,EAAAgC,QAAA8F,iBAAAnH,KAAAkkB,SAAA,MAEArW,EAAAxM,QAAAgO,SAAAuK,UAAA,2FAxBR5X,EAAA,CADCrC,EAAAH,GAAAyC,QACuB4jB,EAAAhlB,UAAA,cAAA,GAGxBmB,EAAA,CADCrC,EAAAH,GAAAyC,QACuB4jB,EAAAhlB,UAAA,cAAA,GAExBmB,EAAA,CADCrC,EAAAH,GAAAyC,QAC2B4jB,EAAAhlB,UAAA,kBAAA,GAE5BmB,EAAA,CADCrC,EAAAH,GAAAiD,SAC4BojB,EAAAhlB,UAAA,kBAAA,GAVZmB,EAAA,CADpBtC,GACoBmmB,GAArB,CAAArmB,GAAA4C,WAAqBC,EAAAhB,QAAAwkB,2nCCfrB,IAUAxR,EAVA8R,EAAA/mB,EAAA,kBACAgnB,EAAAhnB,EAAA,iBACAE,EAAAF,EAAA,gCAEA4D,EAAA5D,EAAA,6BACAyO,EAAAzO,EAAA,6CACA6D,EAAA7D,EAAA,4DACAinB,EAAAjnB,EAAA,uDACAuV,EAAAvV,EAAA,iDACAknB,EAAAlnB,EAAA,8DACA,SAAAiV,GACIA,EAAAA,EAAA,GAAA,GAAA,KACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,KAAA,GAAA,QANJ,CAOAA,IAAAA,EAAA,KACM,IAAA9U,EAAAC,GAAAC,WAAAC,EAAAH,EAAAG,QAAAC,EAAAJ,EAAAI,SAEN4mB,EAAA,WAAA,SAAAA,IAEIvmB,KAAAwmB,QAAA,KAGAxmB,KAAAymB,SAAA,KAGAzmB,KAAA0mB,UAAA,GAeJ,OAdIH,EAAA1lB,UAAA8lB,YAAA,WACIhS,EAAAtT,QAAAyZ,iBAAA,IACI9a,KAAAwmB,QAAAI,KAAA5mB,KAAA0mB,UAAArS,EAAAwS,IACA7mB,KAAAwmB,QAAAM,SAGRP,EAAA1lB,UAAAib,gBAAA,SAAAiL,GACIpS,EAAAtT,QAAA0Z,iBAAA,GACIvb,GAAAwnB,YAAAF,KAAA9mB,KAAA0mB,UAAAK,IAAA,EAAA,IAGRR,EAAA1lB,UAAAomB,YAAA,WACIjnB,KAAAwmB,QAAAU,QAnBJllB,EAAA,CADCrC,EAAAH,GAAA2nB,cAC8BZ,EAAA1lB,UAAA,eAAA,GAG/BmB,EAAA,CADCrC,EAAAH,GAAA2nB,cAC+BZ,EAAA1lB,UAAA,gBAAA,GAGhCmB,EAAA,CADCrC,EAAA,CAAAH,GAAA4nB,aAC8Bb,EAAA1lB,UAAA,iBAAA,GARtBmB,EAAA,CADZtC,EAAA,wBACY6mB,GAAb,GAAalkB,EAAAkkB,aAAAA,EAyBb,IAAAc,EAAA,SAAAxnB,GAAA,SAAAwnB,IAAA,IAAAvnB,EAAA,OAAAD,GAAAA,EAAAE,MAAAC,KAAAC,YAAAD,YAKIF,EAAAwnB,UAAA,KAEAxnB,EAAAynB,SAAA,KAEAznB,EAAA0nB,aAAA,KAEO1nB,EAAA+b,MAAA,KACA/b,EAAAgnB,KAAA,aAqEX,OAjF8ClmB,EAAAymB,EAAAxnB,GAAzB4nB,EAAAJ,EAcjBA,EAAAxmB,UAAA4iB,OAAA,WACIgE,EAAApY,SAAArP,KACAA,KAAA6b,MAAA7b,KAAAsnB,UAAAvY,aAAAoX,EAAA9kB,UAGJgmB,EAAAxmB,UAAAC,MAAA,WAAA,IAAAhB,EAAAE,KACIA,KAAA6b,MAAA7M,OAGAhP,KAAA6b,MAAA9a,KAAAS,QAAA,EAGAqM,EAAAxM,QAAAgO,SAAAqY,eAAA,kDACApoB,EAAA+B,QAAAK,cAAAimB,UAAA,WACI9Z,EAAAxM,QAAAgO,SAAAqY,eAAA,yCACApoB,EAAA+B,QAAAK,cAAAC,KAAA,IAAA0kB,EAAAhlB,QAAAumB,UAAA5kB,EAAA3B,QAAAkO,MAAAE,SAAAzM,EAAA3B,QAAAkO,MAAAsY,eACJ7nB,MACAV,EAAA+B,QAAAK,cAAAomB,WAAA,WAEIxoB,EAAA+B,QAAAK,cAAA+O,QACA5C,EAAAxM,QAAAgO,SAAAqB,UAAA,UACJ1Q,MACAV,EAAA+B,QAAAK,cAAAmO,YAAA,SAAAtJ,GAEI,OADA,IAAAtD,EAAA5B,QAAAkF,GACAuJ,YACI,KAAAuW,EAAAhlB,QAAA8B,KAAAC,MACIyK,EAAAxM,QAAAgO,SAAAW,aAAA,GAEflQ,EAAA+b,MAAAtL,iBAGGvQ,MAEA,GAAAV,EAAA+B,QAAAK,cAAAqmB,eACIzoB,EAAA+B,QAAAK,cAAAsmB,UAEJ1B,EAAAjlB,QAAAK,cAAAumB,oBAAAjoB,KAAAwnB,aAAAd,UAAArS,EAAAwS,MAGGQ,EAAAxmB,UAAAqnB,UAAA,WACHloB,KAAA6b,MAAAta,OACAvB,KAAA8mB,KAAA/lB,KAAAS,QAAA,GAEG6lB,EAAAxmB,UAAAwP,aAAA,SAAAN,GAAP,IAAAjQ,EAAAE,KACI,MAAAA,KAAA8mB,MACIjZ,EAAAxM,QAAAgO,SAAAW,aAAA,GACAxQ,GAAA2a,aAAAgO,WAAA,SAAA,SAAAnD,EAAAoD,GACIA,EAAA/N,KAAA,mBAAA7a,GAAAoR,OAAA,WACI/C,EAAAxM,QAAAgO,SAAAqY,eAAA7Z,EAAAxM,QAAAgO,SAAAa,YAAA,kBACJ,SAAA8U,EAAAzK,GACIza,EAAAgnB,KAAAtnB,GAAAqP,YAAA0L,GAAAxL,aAAAqX,EAAA/kB,SACAvB,EAAAgnB,KAAA/lB,KAAAqQ,OAAAtR,EAAAiB,KACAjB,EAAAgnB,KAAA9X,OACAlP,EAAAgnB,KAAAvlB,KAAAwO,GACAlC,EAAAxM,QAAAgO,SAAAW,aAAA,GAEAlQ,EAAA+b,MAAA9a,KAAAS,QAAA,QAIRxB,KAAA6b,MAAA9a,KAAAS,QAAA,EACAxB,KAAA8mB,KAAAvlB,KAAAwO,KAGDsX,EAAAxmB,UAAAib,gBAAA,SAAAuM,GACHroB,KAAAwnB,aAAA1L,gBAAAuM,IA7EUhB,EAAAhY,SAAA,KAGdrN,EAAA,CADCrC,EAAAH,GAAA2C,OACyBklB,EAAAxmB,UAAA,iBAAA,GAE1BmB,EAAA,CADCrC,EAAAH,GAAA2C,OACwBklB,EAAAxmB,UAAA,gBAAA,GAEzBmB,EAAA,CADCrC,EAAA4mB,IACiCc,EAAAxmB,UAAA,oBAAA,GATjB4mB,EAAAzlB,EAAA,CADpBtC,GACoB2nB,GAArB,CAAA7nB,GAAA4C,WAAqBC,EAAAhB,QAAAgmB,o/BC9CrB,IAAArkB,EAAA5D,EAAA,6BACAkpB,EAAAlpB,EAAA,iEACAmpB,EAAAnpB,EAAA,mEAIAopB,EAAA,SAAA3oB,GAYI,SAAA2oB,IAAA,IAAA1oB,EAAAD,EAAA+F,KAAA5F,OAAAA,YATQF,EAAA2oB,UAAA,IAAA5H,MAWJ/gB,EAAA4oB,SAAA1lB,EAAA3B,QAAA6E,IAAAyiB,UAmCR,OAjDiD/nB,EAAA4nB,EAAA3oB,GAK/B2oB,EAAA9mB,YAAA,WAIV,OAHA,MAAA1B,KAAAqP,WACIrP,KAAAqP,SAAA,IAAAmZ,GAEJxoB,KAAAqP,UAQGmZ,EAAA3nB,UAAAmnB,QAAA,WACHnoB,EAAAgB,UAAAmnB,QAAApiB,KAAA5F,KAAAgD,EAAA3B,QAAA6E,IAAA0iB,YAAAC,KAAA7lB,EAAA3B,QAAA6E,IAAA0iB,YAAAE,OAGMN,EAAA3nB,UAAAkoB,OAAA,SAAAC,GAENnpB,EAAAgB,UAAAkoB,OAAAnjB,KAAA5F,KAAAgpB,IAGMR,EAAA3nB,UAAAooB,UAAA,SAAAD,GAEN,IADA,IAAAziB,EAAA,IAAA2iB,WAAAF,EAAAziB,MACAI,EAAA,EAAAA,EAAA3G,KAAAyoB,UAAAvb,OAAAvG,IAAA,CACI,IAAAwiB,EAAAnpB,KAAAyoB,UAAA9hB,GACAwiB,EAAAhM,QAAAgM,EAAAhM,kBAAAiM,QAAAD,EAAAhM,OAAApc,KACIooB,EAAAE,SAAA9iB,IAEAvG,KAAAyoB,UAAAa,OAAA3iB,EAAA,GACAA,OAKL6hB,EAAA3nB,UAAAgP,YAAA,SAAAwZ,EAAAlM,GACHnd,KAAAyoB,UAAAvhB,KAAA,IAAAqhB,EAAAlnB,QAAA8b,EAAAkM,KAGGb,EAAA3nB,UAAAc,KAAA,SAAA4nB,GACH,IAAA,IAAAxgB,EAAA,IAAAygB,UAAAD,EAAAE,SAAA7E,EAAA,EAAAA,EAAA2E,EAAAE,QAAA7E,IACI7b,EAAA6b,GAAA2E,EAAAG,MAAA9E,GACJ,MAAA5kB,KAAA2pB,IAAA3pB,KAAA+nB,eACI/nB,KAAA2pB,GAAAhoB,KAAAoH,EAAA6gB,SAEZpB,EAjDA,CAiDAF,EAAAjnB","sourcesContent":["\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport cmd from \"./XocDia.Cmd\";\r\nimport XocDiaNetworkClient from \"./XocDia.XocDiaNetworkClient\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BankerControl extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    lblTitle: cc.Label = null;\r\n    @property(cc.Slider)\r\n    slider: cc.Slider = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n    @property(cc.Node)\r\n    panelSell: cc.Node = null;\r\n\r\n    private coinOdd = 0;\r\n    private coinEven = 0;\r\n\r\n    private maxCoin = 0;\r\n    private minCoin = 1;\r\n    private coin = 0;\r\n    private sellingEven = false;\r\n\r\n    start() {\r\n        this.slider.node.on(\"slide\", () => {\r\n            this.coin = this.minCoin + Math.round((this.maxCoin - this.minCoin) * this.slider.progress);\r\n            this.lblCoin.string = Utils.formatNumber(this.coin);\r\n        });\r\n    }\r\n\r\n    show(coinOdd: number, coinEven: number) {\r\n        this.coinOdd = coinOdd;\r\n        this.coinEven = coinEven;\r\n        this.panelSell.active = false;\r\n        this.node.active = true;\r\n    }\r\n\r\n    public actCanTat() {\r\n        this.node.active = false;\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendBankerSellGate(1, this.coin));\r\n    }\r\n\r\n    public actSellOdd() {\r\n        this.lblTitle.string = \"BÁN LẺ\";\r\n        this.maxCoin = this.coinOdd;\r\n        this.coin = this.maxCoin;\r\n        this.lblCoin.string = Utils.formatNumber(this.coin);\r\n        this.slider.progress = 1;\r\n        this.panelSell.active = true;\r\n        this.sellingEven = false;\r\n    }\r\n\r\n    public actSellEven() {\r\n        this.lblTitle.string = \"BÁN CHẴN\";\r\n        this.maxCoin = this.coinEven;\r\n        this.coin = this.maxCoin;\r\n        this.lblCoin.string = Utils.formatNumber(this.coin);\r\n        this.slider.progress = 1;\r\n        this.panelSell.active = true;\r\n        this.sellingEven = true;\r\n    }\r\n\r\n    public actSell() {\r\n        this.node.active = false;\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendBankerSellGate(this.sellingEven ? 2 : 3, this.coin));\r\n    }\r\n}\r\n","const {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BtnBet extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    active: cc.Node = null;\r\n    @property(cc.Sprite)\r\n    normal: cc.Sprite = null;\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BtnPayBet extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    lblTotalBet: cc.Label = null;\r\n    @property(cc.Node)\r\n    active: cc.Node = null;\r\n\r\n    public reset() {\r\n        this.lblTotalBet.string = \"\";\r\n        this.active.active = false;\r\n    }\r\n\r\n    public setTotalBet(coin: number) {\r\n        this.lblTotalBet.string = coin > 0 ? Utils.formatMoney(coin) : \"\";\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport OutPacket from \"../../Lobby/LobbyScript/Script/networks/Network.OutPacket\";\r\n\r\n\r\nexport namespace cmd {\r\n    export class Code {\r\n        static LOGIN = 1;\r\n        static GETLISTROOM = 3014;\r\n        static JOIN_GAME_ROOM_BY_ID = 3015;\r\n        static CMDJOINROOMFAIL = 3004;\r\n        static CMDRECONNECTGAMEROOM = 3002;\r\n        static REQUEST_INFO_MOI_CHOI = 3010;\r\n        static MOI_CHOI = 3011;\r\n        static ACCEPT_MOI_CHOI = 3012;\r\n\r\n        static JOIN_ROOM_FAIL = 3004;\r\n        static JOIN_ROOM_SUCCESS = 3101;\r\n        static USER_JOIN_ROOM_SUCCESS = 3102;\r\n        static USER_OUT_ROOM = 3104;\r\n        static ORDER_BANKER = 3113;\r\n        static ACTION_IN_GAME = 3105;\r\n        static PUT_MONEY = 3106;\r\n        static PUT_MONEY_X2 = 3115;\r\n        static PUT_ALL_IN = 3116;\r\n        static QUIT_ROOM = 3103;\r\n        static DANG_KY_THOAT_PHONG = 3100;\r\n        static START_GAME = 3117;\r\n        static BANKER_SELL_GATE = 3110;\r\n        static BUY_GATE = 3111;\r\n        static REFUN_MONEY = 3118;\r\n        static FINISH_GAME = 3112;\r\n        static GET_TIME = 3119;\r\n        static HUY_LAM_CAI = 3130;\r\n        static STOP_GAME = 3122;\r\n        static SOI_CAU = 3121;\r\n        static MESSAGE_ERROR_BANKER = 3123;\r\n        static SET_CHEAT = 3124;\r\n        static CHAT_MS = 3008;\r\n        static INFO_GATE_SELL = 3126;\r\n        static INFO_MONEY_AFTER_BANKER_SELL = 3128;\r\n        static ACTION_BANKER = 3127;\r\n        static KICK_OUT_XOCDIA = 3132;\r\n        static DESTROY_ROOM = 3133;\r\n        static LOCK_GATE = 3131;\r\n        static GET_MONEY_LAI = 3134;\r\n        static UPDATE_CURRENT_MONEY = 3135;\r\n    }\r\n    export class SendGetListRoom extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.GETLISTROOM);\r\n            this.packHeader();\r\n            this.putInt(Configs.App.MONEY_TYPE);//money type\r\n            this.putInt(30);//maxplayer\r\n            this.putLong(-1);//khong xac dinh\r\n            this.putInt(0);//khong xac dinh\r\n            this.putInt(0);//CARD_FROM\r\n            this.putInt(50);//CARD_TO\r\n            this.updateSize();\r\n        }\r\n    }\r\n    export class ReceiveGetListRoom extends InPacket {\r\n        list: any[] = [];\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            let listSize = this.getShort();\r\n            this.list = [];\r\n            for (var i = 0; i < listSize; i++) {\r\n                let item: any = {};\r\n                item[\"id\"] = this.getInt();\r\n                item[\"userCount\"] = this.getByte();\r\n                item[\"limitPlayer\"] = this.getByte();\r\n                item[\"maxUserPerRoom\"] = this.getInt();\r\n                item[\"moneyType\"] = this.getByte();\r\n                item[\"moneyBet\"] = this.getInt();\r\n                item[\"requiredMoney\"] = this.getInt();\r\n                item[\"rule\"] = this.getByte();\r\n                item[\"nameRoom\"] = this.getString();\r\n                item[\"key\"] = this.getBool();\r\n                item[\"quyban\"] = this.getLong();\r\n                this.list.push(item)\r\n            }\r\n        }\r\n    }\r\n\r\n    export class SendJoinRoomById extends OutPacket {\r\n        constructor(id: number) {\r\n            super();\r\n            //  cc.log(\"SendJoinRoomById:\"+id);\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.JOIN_GAME_ROOM_BY_ID);\r\n            this.packHeader();\r\n            this.putInt(id);\r\n            this.putString(\"\");//mat khau\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveJoinRoomSuccess extends InPacket {\r\n        moneyBet = 0;\r\n        roomId = 0;\r\n        gameId = 0;\r\n        moneyType = 0;\r\n        gameState = 0;\r\n        countTime = 0;\r\n        playerCount = 0;\r\n        potID = [];\r\n        playerInfos = [];\r\n        money = 0;\r\n        banker = false;\r\n        isSubBanker = false;\r\n        purchaseStatus = 0;\r\n        potPurchase = 0;\r\n        moneyPurchaseEven = 0;\r\n        moneyPurchaseOdd = 0;\r\n        moneyRemain = 0;\r\n        subListCount = 0;\r\n        list_buy_gate = [];\r\n        bankerReqDestroy = false;\r\n        bossReqDestroy = false;\r\n        rule = 0;\r\n        moneyRegisBanker = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.moneyBet = this.getInt();\r\n            this.roomId = this.getInt();\r\n            this.gameId = this.getInt();\r\n            this.moneyType = this.getByte();\r\n            this.gameState = this.getByte();\r\n            this.countTime = this.getInt();\r\n            this.playerCount = this.getByte();\r\n            this.potID = [];\r\n            for (let a = 0; 6 > a; a++) {\r\n                let b: any = {};\r\n                b[\"id\"] = this.getByte();\r\n                b[\"ratio\"] = this.getInt();\r\n                b[\"maxMoneyBet\"] = this.getLong();\r\n                b[\"totalMoney\"] = this.getLong();\r\n                b[\"moneyBet\"] = this.getLong();\r\n                b[\"isLock\"] = this.getBool();\r\n                this.potID.push(b);\r\n            }\r\n            this.playerInfos = [];\r\n            for (let a = 0; a < this.playerCount; a++) {\r\n                let b: any = {};\r\n                b[\"nickname\"] = this.getString();\r\n                b[\"avatar\"] = this.getString();\r\n                b[\"money\"] = this.getLong();\r\n                b[\"banker\"] = this.getBool();\r\n                b[\"isSubBanker\"] = this.getBool();\r\n                b[\"reqKickroom\"] = this.getBool();\r\n                this.playerInfos.push(b);\r\n\r\n            }\r\n            this.money = this.getLong();\r\n            this.banker = this.getBool();\r\n            this.isSubBanker = this.getBool();\r\n            this.purchaseStatus = this.getInt();\r\n            this.potPurchase = this.getInt();\r\n            this.moneyPurchaseEven = this.getLong();\r\n            this.moneyPurchaseOdd = this.getLong();\r\n            this.moneyRemain = this.getLong();\r\n            this.subListCount = this.getInt();\r\n            this.list_buy_gate = [];\r\n            for (let a = 0; a < this.subListCount; a++) {\r\n                let b: any = {};\r\n                b[\"nickname\"] = this.getString();\r\n                b[\"money\"] = this.getLong();\r\n                this.list_buy_gate.push(b);\r\n            }\r\n            this.bankerReqDestroy = this.getBool();\r\n            this.bossReqDestroy = this.getBool();\r\n            this.rule = this.getInt();\r\n            this.moneyRegisBanker = this.getLong()\r\n        }\r\n    }\r\n    export class ReceiveJoinRoomFail extends InPacket {\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n        }\r\n    }\r\n\r\n    export class SendLeaveRoom extends OutPacket {\r\n        constructor() {\r\n            //  cc.log(\"SendLeaveRoom ĐANG KY THOAT PHONG\");\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.DANG_KY_THOAT_PHONG);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveLeavedRoom extends InPacket {\r\n        reason = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.reason = this.getByte()\r\n        }\r\n    }\r\n\r\n    export class ReceiveLeaveRoom extends InPacket {\r\n        bRegis = false;\r\n        nickname = \"\";\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.bRegis = this.getBool();\r\n            this.nickname = this.getString()\r\n        }\r\n    }\r\n\r\n    export class ReceiveUserJoinRoom extends InPacket {\r\n        nickname = \"\";\r\n        avatar = \"\";\r\n        money = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.nickname = this.getString();\r\n            this.avatar = this.getString();\r\n            this.money = this.getLong()\r\n        }\r\n    }\r\n\r\n    export class ReceiveUserOutRoom extends InPacket {\r\n        nickname = \"\";\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.nickname = this.getString();\r\n        }\r\n    }\r\n\r\n    export class ReceiveActionInGame extends InPacket {\r\n        action = 0;\r\n        time = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.action = this.getByte();\r\n            this.time = this.getByte()\r\n        }\r\n    }\r\n\r\n    export class ReceiveStartGame extends InPacket {\r\n        banker = \"\";\r\n        gameId = 0;\r\n        moneyBanker = 0;\r\n        list_lock_gate = [];\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.banker = this.getString();\r\n            this.gameId = this.getInt();\r\n            this.moneyBanker = this.getLong();\r\n            this.list_lock_gate = [];\r\n            for (var a = 0; 6 > a; a++) {\r\n                var b: any = {};\r\n                b[\"id\"] = this.getByte();\r\n                b[\"isLock\"] = this.getBool();\r\n                this.list_lock_gate.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n    export class SendPutMoney extends OutPacket {\r\n        constructor(doorId: number, coin: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.PUT_MONEY);\r\n            this.packHeader();\r\n            this.putByte(doorId);\r\n            this.putLong(coin);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceivePutMoney extends InPacket {\r\n        error = 0;\r\n        nickname = \"\";\r\n        betMoney = 0;\r\n        potId = 0;\r\n        potMoney = 0;\r\n        currentMoney = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.error = this.getError();\r\n            this.nickname = this.getString();\r\n            this.betMoney = this.getLong();\r\n            this.potId = this.getByte();\r\n            this.potMoney = this.getLong();\r\n            this.currentMoney = this.getLong();\r\n        }\r\n    }\r\n\r\n    export class ReceiveBankerSellGate extends InPacket {\r\n        action = 0;//1: nhà cái cân tất, 2: ban chẵn, 3: bán lẻ\r\n        moneySell = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.action = this.getByte();\r\n            this.moneySell = this.getLong();\r\n        }\r\n    }\r\n\r\n    export class SendBuyGate extends OutPacket {\r\n        constructor(coin: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.BUY_GATE);\r\n            this.packHeader();\r\n            this.putLong(coin);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveBuyGate extends InPacket {\r\n        error = 0;\r\n        nickname = \"\";\r\n        moneyBuy = 0;\r\n        rmMoneySell = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.error = this.getError();\r\n            this.nickname = this.getString();\r\n            this.moneyBuy = this.getLong();\r\n            this.rmMoneySell = this.getLong()\r\n        }\r\n    }\r\n\r\n    export class ReceiveRefunMoney extends InPacket {\r\n        rfCount = 0;\r\n        potID = [];\r\n        playerInfosRefun = []\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.rfCount = this.getInt();\r\n            for (let a = 0; 6 > a; a++) {\r\n                let b = {};\r\n                b[\"id\"] = this.getByte();\r\n                b[\"moneyRefund\"] = this.getLong();\r\n                b[\"totalMoney\"] = this.getLong();\r\n                this.potID.push(b);\r\n            }\r\n            this.playerInfosRefun = [];\r\n            for (let a = 0; a < this.rfCount; a++) {\r\n                let b = {};\r\n                b[\"nickname\"] = this.getString();\r\n                b[\"moneyRefund\"] = this.getLong();\r\n                b[\"currentMoney\"] = this.getLong();\r\n                b[\"pots\"] = this.getString();\r\n                b[\"moneyRfPots\"] = this.getString();\r\n                this.playerInfosRefun.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n    export class ReceiveFinishGame extends InPacket {\r\n        infoAllPot = [];\r\n        diceIDs = [];\r\n        moneyBankerBefore = 0;\r\n        moneyBankerAfter = 0;\r\n        moneyBankerExchange = 0;\r\n        playerInfoWin = [];\r\n        subListCount = 0;\r\n        infoSubBanker = [];\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            for (let a = 0; 6 > a; a++) {\r\n                let b = {};\r\n                b[\"potId\"] = this.getByte();\r\n                b[\"totalMoney\"] = this.getLong();\r\n                b[\"win\"] = this.getBool();\r\n                this.infoAllPot.push(b)\r\n            }\r\n            for (let a = 0; 4 > a; a++) {\r\n                this.diceIDs.push(this.getInt());\r\n            }\r\n            this.moneyBankerBefore = this.getLong();\r\n            this.moneyBankerAfter = this.getLong();\r\n            this.moneyBankerExchange = this.getLong();\r\n            let playerWinCount = this.getInt();\r\n            for (let a = 0; a < playerWinCount; a++) {\r\n                let b = {};\r\n                b[\"nickname\"] = this.getString();\r\n                b[\"moneyWin\"] = this.getLong();\r\n                b[\"currentMoney\"] = this.getLong();\r\n                b[\"potsWin\"] = this.getString();\r\n                b[\"moneyWinPots\"] = this.getString();\r\n                this.playerInfoWin.push(b);\r\n            }\r\n            this.subListCount = this.getInt();\r\n            for (let a = 0; a < this.subListCount; a++) {\r\n                let b = {};\r\n                b[\"nicknameSubbanker\"] = this.getString();\r\n                b[\"potSubBanker\"] = this.getByte();\r\n                b[\"moneySubBanker\"] = this.getLong();\r\n                b[\"moneySubBankerNoFee\"] = this.getLong();\r\n                b[\"currentMoneySubBanker\"] = this.getLong();\r\n                this.infoSubBanker.push(b);\r\n            }\r\n        }\r\n    }\r\n\r\n    export class SendReconnect extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            //  cc.log(\"SendJoinRoomById sendReconnect\");\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CMDRECONNECTGAMEROOM);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class CmdSendGetCau extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.SOI_CAU);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveGetCau extends InPacket {\r\n        totalEven = 0;\r\n        totalOdd = 0;\r\n        rsCount = 0;\r\n        arrayCau: number[] = [];\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.totalEven = this.getInt();\r\n            this.totalOdd = this.getInt();\r\n            this.rsCount = this.getInt();\r\n            for (var a = 0; a < this.rsCount; a++) {\r\n                this.arrayCau.push(this.getByte())\r\n            }\r\n        }\r\n    }\r\n\r\n    export class SendOrderBanker extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.ORDER_BANKER);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveOrderBanker extends InPacket {\r\n        error = 0;\r\n        moneyRequire = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.error = this.getError();\r\n            this.moneyRequire = this.getLong()\r\n        }\r\n    }\r\n\r\n    export class ReceiveInfoGateSell extends InPacket {\r\n        moneyEven = 0;\r\n        moneyOdd = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.moneyEven = this.getLong();\r\n            this.moneyOdd = this.getLong()\r\n        }\r\n    }\r\n\r\n    export class SendCancelBanker extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.HUY_LAM_CAI);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveCancelBanker extends InPacket {\r\n        bDestroy = false;\r\n        nickname = \"\";\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.bDestroy = this.getBool();\r\n            this.nickname = this.getString();\r\n        }\r\n    }\r\n\r\n    export class SendBankerSellGate extends OutPacket {\r\n        constructor(door: number, coin: number) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.BANKER_SELL_GATE);\r\n            this.packHeader();\r\n            this.putByte(door);//1: nhà cái cân tất, 2: ban chẵn, 3: bán lẻ\r\n            this.putLong(coin);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class ReceiveInfoMoneyAfterBankerSell extends InPacket {\r\n        money = 0;\r\n\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.money = this.getLong()\r\n        }\r\n    }\r\n\r\n    export class SendRequestInfoMoiChoi extends OutPacket {\r\n        constructor() {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.REQUEST_INFO_MOI_CHOI);\r\n            this.packHeader();\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendMoiChoi extends OutPacket {\r\n        constructor(nicknames: string[]) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.MOI_CHOI);\r\n            this.packHeader();\r\n            this.putShort(nicknames.length);\r\n            for (var b = 0; b < nicknames.length; b++)\r\n                this.putString(nicknames[b]);\r\n            this.updateSize();\r\n        }\r\n    }\r\n\r\n    export class SendAcceptMoiChoi extends OutPacket {\r\n        constructor(name: string) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.ACCEPT_MOI_CHOI);\r\n            this.packHeader();\r\n            this.putString(name);\r\n            this.updateSize();\r\n        }\r\n    }\r\n    export class SendChatRoom extends OutPacket {\r\n        constructor(a: number, b: string) {\r\n            super();\r\n            this.initData(100);\r\n            this.setControllerId(1);\r\n            this.setCmdId(Code.CHAT_MS);\r\n            this.packHeader();\r\n            this.putByte(a ? 1 : 0);\r\n            this.putString(encodeURI(b));\r\n            this.updateSize();\r\n        }\r\n    }\r\n    export class ReceivedChatRoom extends InPacket {\r\n        chair: number;\r\n        isIcon: boolean;\r\n        content: string;\r\n        nickname: string;\r\n        constructor(data: Uint8Array) {\r\n            super(data);\r\n            this.chair = this.getByte();\r\n            this.isIcon = this.getBool();\r\n            this.content = decodeURI(this.getString());\r\n            this.nickname = this.getString()\r\n        }\r\n    }\r\n}\r\nexport default cmd;","import Configs from \"../../Loading/src/Configs\";\r\nimport XocDiaNetworkClient from \"./XocDia.XocDiaNetworkClient\";\r\nimport cmd from \"./XocDia.Cmd\";\r\n\r\nimport XocDiaController from \"./XocDia.XocDiaController\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Lobby extends cc.Component {\r\n\r\n    @property(cc.Prefab)\r\n    itemPrefab :cc.Prefab = null;\r\n    @property(cc.Sprite)\r\n    sprAvatar:cc.Sprite = null;\r\n    @property(cc.Label)\r\n    lblNickname: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n\r\n    @property(cc.Node)\r\n    listItems: cc.Node = null;\r\n    \r\n    @property(cc.ScrollView)\r\n    scrRoom: cc.ScrollView = null;\r\n\r\n    private inited = false;\r\n    private dataRoom = [];\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n    private isSortRoom = false;\r\n    onBtnSortRoomId(){\r\n        if(this.isSortRoom == false){\r\n            if(this.dataRoom){\r\n                this.dataRoom.sort((x, y) => {\r\n                    return x.id - y.id;\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            if(this.dataRoom){\r\n                this.dataRoom.sort((x, y) => {\r\n                    return y.id - x.id;\r\n                })\r\n            }\r\n        }\r\n        this.isSortRoom = !this.isSortRoom;\r\n        this.scrRoom.content.removeAllChildren();\r\n        for(var i=0;i<this.dataRoom.length;i++){\r\n            var item = cc.instantiate(this.itemPrefab);\r\n            item.active = true;\r\n            this.scrRoom.content.addChild(item);\r\n            item.getComponent(\"XocDia.Room\").init(this.dataRoom[i]);\r\n        }\r\n    }\r\n    private isSortMoney;\r\n    onBtnSortRoomMoney(){\r\n        //  cc.log(\"onBtnSortRoomMoney\");\r\n        if(this.isSortMoney == false){\r\n            if(this.dataRoom){\r\n                this.dataRoom.sort((x, y) => {\r\n                    return x.requiredMoney - y.requiredMoney;\r\n                })\r\n            }\r\n        }\r\n        else{\r\n            if(this.dataRoom){\r\n                this.dataRoom.sort((x, y) => {\r\n                    return y.requiredMoney - x.requiredMoney;\r\n                })\r\n            }\r\n        }\r\n        this.isSortMoney = !this.isSortMoney;\r\n        this.scrRoom.content.removeAllChildren();\r\n        for(var i=0;i<this.dataRoom.length;i++){\r\n            var item = cc.instantiate(this.itemPrefab);\r\n            item.active = true;\r\n            this.scrRoom.content.addChild(item);\r\n            item.getComponent(\"XocDia.Room\").init(this.dataRoom[i]);\r\n        }\r\n    }\r\n    public init() {\r\n        if (this.inited) return;\r\n        this.inited = true;\r\n        this.sprAvatar.spriteFrame = App.instance.getAvatarSpriteFrame(Configs.Login.Avatar);\r\n        this.lblNickname.string = Configs.Login.Nickname;\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            if (!this.node.active) return;\r\n            this.lblCoin.string = Utils.formatNumber(Configs.Login.Coin);\r\n        }, this);\r\n        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n\r\n        XocDiaNetworkClient.getInstance().addListener((data) => {\r\n            if (!this.node.active) return;\r\n            let inpacket = new InPacket(data);\r\n            switch (inpacket.getCmdId()) {\r\n                case cmd.Code.LOGIN:\r\n                    {\r\n                        XocDiaNetworkClient.getInstance().send(new cmd.SendReconnect());\r\n                    }\r\n                    break;\r\n                case cmd.Code.GETLISTROOM:\r\n                    {\r\n                        let res = new cmd.ReceiveGetListRoom(data);\r\n                        //  cc.log(\"GETLISTROOM:\" + JSON.stringify(res));\r\n                        //  cc.log(res);\r\n                        this.scrRoom.content.removeAllChildren();\r\n                        this.dataRoom = res.list;\r\n                        this.dataRoom.sort((x, y) => {\r\n                            return x.id - y.id;\r\n                        })\r\n                        for(var i=0;i<this.dataRoom.length;i++){\r\n                            var item = cc.instantiate(this.itemPrefab);\r\n                            item.active = true;\r\n                            this.scrRoom.content.addChild(item);\r\n                            item.getComponent(\"XocDia.Room\").init(this.dataRoom[i]);\r\n                        }\r\n                        // let cb = (item, itemData) => {\r\n                        //     item.getComponent(\"XocDia.Room\").init(itemData);\r\n                        //     item.active = true;\r\n                        // }\r\n                        // this.dataRoom = res.list;\r\n                        // this.dataRoom.sort((x, y) => {\r\n                        //     return x.moneyBet - y.moneyBet;\r\n                        // })\r\n                        // this.scrRoom.node.getComponent(\"ScrollViewControl\").setDataList(cb, this.dataRoom);\r\n                        \r\n                    }\r\n                    break;\r\n                case cmd.Code.JOIN_ROOM_FAIL:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new cmd.ReceiveJoinRoomFail(data);\r\n                        //  cc.log(res);\r\n                        let msg = \"Lỗi \" + res.getError() + \", không xác định.\";\r\n                        switch (res.getError()) {\r\n                            case 1:\r\n                                msg = App.instance.getTextLang(\"txt_room_err1\")\r\n                                break;\r\n                            case 2:\r\n                                msg = App.instance.getTextLang(\"txt_room_err2\")\r\n                                break;\r\n                            case 3:\r\n                                msg = App.instance.getTextLang(\"txt_room_err3\")\r\n                                break;\r\n                            case 4:\r\n                                msg = App.instance.getTextLang(\"txt_room_err2\")\r\n                                break;\r\n                            case 5:\r\n                                msg = App.instance.getTextLang(\"txt_room_err5\")\r\n                                break;\r\n                            case 6:\r\n                                msg = App.instance.getTextLang(\"txt_room_err6\")\r\n                                break;\r\n                            case 7:\r\n                                msg = App.instance.getTextLang(\"txt_room_err2\")\r\n                                break;\r\n                            case 8:\r\n                                msg = App.instance.getTextLang(\"txt_room_err11\")\r\n                                break;\r\n                            case 9:\r\n                                msg = App.instance.getTextLang(\"txt_room_err9\")\r\n                                break;\r\n                            case 10:\r\n                                msg = App.instance.getTextLang(\"txt_room_err10\")\r\n                        }\r\n                        App.instance.alertDialog.showMsg(msg);\r\n                    }\r\n                    break;\r\n                case cmd.Code.JOIN_ROOM_SUCCESS:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new cmd.ReceiveJoinRoomSuccess(data);\r\n                        XocDiaController.instance.showGamePlay(res);\r\n                    }\r\n                    break;\r\n                default:\r\n                    //  cc.log(\"--inpacket.getCmdId(): \" + inpacket.getCmdId());\r\n                    break;\r\n            }\r\n        }, this);\r\n\r\n    }\r\n\r\n    public show() {\r\n        this.node.active = true;\r\n        this.actRefesh();\r\n        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n    }\r\n\r\n    public actQuickPlay() {\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendJoinRoomById(1);\r\n    }\r\n\r\n    public actRefesh() {\r\n        // for (let i = 0; i < this.listItems.childrenCount; i++) {\r\n        //     if (this.listItems.children[i] != this.itemTemplate) {\r\n        //         this.listItems.children[i].destroy();\r\n        //     }\r\n        // }\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendGetListRoom());\r\n    }\r\n\r\n    public actBack() {\r\n        XocDiaNetworkClient.getInstance().close();\r\n        App.instance.loadScene(\"Lobby\");\r\n    }\r\n\r\n    public actCreateTable() {\r\n        App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_room_err12'));\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n","import Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PanelPayDoor extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    title1: cc.Label = null;\r\n    @property(cc.Label)\r\n    title2: cc.Label = null;\r\n    @property(cc.Node)\r\n    itemTemplate: cc.Node = null;\r\n    @property(cc.Slider)\r\n    slider: cc.Slider = null;\r\n    @property(cc.Sprite)\r\n    sprProgress: cc.Sprite = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n\r\n    public coin = 1;\r\n    private minCoin = 1;\r\n    private maxCoin = 0;\r\n\r\n    start() {\r\n        this.slider.node.on(\"slide\", () => {\r\n            this.updateValue();\r\n        });\r\n    }\r\n\r\n    public show(action: number, maxCoin: number) {\r\n        if (action == 2) {\r\n            this.title1.string = this.title2.string = \"MUA CHẴN\";\r\n        } else {\r\n            this.title1.string = this.title2.string = \"MUA LẺ\";\r\n        }\r\n        this.coin = this.minCoin;\r\n        this.maxCoin = maxCoin;\r\n        this.node.active = true;\r\n        this.itemTemplate.active = false;\r\n        for (let i = 1; i < this.itemTemplate.parent.childrenCount; i++) {\r\n            this.itemTemplate.parent.children[i].destroy();\r\n        }\r\n        this.slider.progress = 1;\r\n        this.sprProgress.fillRange = 1;\r\n        this.updateValue();\r\n    }\r\n\r\n    public addUser(nickname: string, coin: number, newMaxCoin: number) {\r\n        if (newMaxCoin == 0) {\r\n            this.node.active = false;\r\n        }\r\n        this.maxCoin = newMaxCoin;\r\n        if (this.coin > this.maxCoin) {\r\n            this.coin = this.maxCoin;\r\n        }\r\n        this.slider.progress = this.coin / (this.maxCoin - this.minCoin);\r\n        this.sprProgress.fillRange = this.slider.progress;\r\n        this.lblCoin.string = Utils.formatNumber(this.coin);\r\n\r\n        let item = cc.instantiate(this.itemTemplate);\r\n        item.parent = this.itemTemplate.parent;\r\n        item.getChildByName(\"lblNickname\").getComponent(cc.Label).string = nickname;\r\n        item.getChildByName(\"lblCoin\").getComponent(cc.Label).string = Utils.formatMoney(coin);\r\n        item.active = true;\r\n    }\r\n\r\n    public getCoin(): number {\r\n        return this.coin;\r\n    }\r\n\r\n    private updateValue() {\r\n        this.sprProgress.fillRange = this.slider.progress;\r\n        this.coin = this.minCoin + Math.round((this.maxCoin - this.minCoin) * this.slider.progress);\r\n        this.lblCoin.string = Utils.formatMoney(this.coin);\r\n    }\r\n}\r\n","import App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Player extends cc.Component {\r\n    \r\n    @property(cc.Button)\r\n    btnInvite: cc.Button = null;\r\n    @property(cc.Node)\r\n    info: cc.Node = null;\r\n\r\n    @property(cc.Label)\r\n    lblNickname: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblCoin: cc.Label = null;\r\n    @property(cc.Sprite)\r\n    sprAvatar: cc.Sprite = null;\r\n    @property(cc.Label)\r\n    lbCoin: cc.Label = null;\r\n    @property(cc.Node)\r\n    boxWin: cc.Node = null;\r\n    @property(cc.Vec2)\r\n    chipsPoint: cc.Vec2 = cc.v2(0, 0);\r\n    @property(cc.Vec2)\r\n    chipsPoint2: cc.Vec2 = cc.v2(0, 0);\r\n    @property(cc.Node)\r\n    banker: cc.Node = null;\r\n    @property(cc.Node)\r\n    chatEmotion: cc.Node = null;\r\n    @property(cc.Node)\r\n    chatMsg: cc.Node = null;\r\n\r\n    public nickname: string = \"\";\r\n    public avatar: string = \"\";\r\n    private timeoutChat = null;\r\n    start() {\r\n       \r\n    }\r\n    public leave() {\r\n        this.nickname = \"\";\r\n\r\n        if (this.btnInvite) this.btnInvite.node.active = true;\r\n        if (this.info) this.info.active = false;\r\n        this.lbCoin.node.active = false;\r\n        this.boxWin.active = false;\r\n        this.banker.active = false;\r\n        this.unscheduleAllCallbacks();\r\n    }\r\n\r\n    public set(nickname: string, avatar: string, coin: number, isBanker: boolean) {\r\n        this.nickname = nickname;\r\n        this.lblNickname.string = nickname;\r\n        if (this.lblNickname.string.length > 14) {\r\n            this.lblNickname.string = this.lblNickname.string.substring(0, 11) + \"...\";\r\n        }\r\n        this.sprAvatar.spriteFrame = App.instance.getAvatarSpriteFrame(avatar);\r\n        this.setCoin(coin);\r\n        this.banker.active = isBanker;\r\n\r\n        if (this.btnInvite) this.btnInvite.node.active = false;\r\n        if (this.info) this.info.active = true;\r\n    }\r\n\r\n    public setCoin(coin: number) {\r\n        this.lblCoin.string = Utils.formatMoney(coin);\r\n    }\r\n\r\n    public clearUI(){\r\n        cc.Tween.stopAllByTarget(this.lbCoin.node);\r\n        this.lbCoin.node.active = false;\r\n        this.boxWin.active = false;\r\n    }\r\n\r\n    public showWinCoinString(coin: string) {\r\n        this.lbCoin.node.active = true;\r\n        this.boxWin.active = true;\r\n        this.boxWin.getComponentInChildren(sp.Skeleton).setAnimation(0, \"Win5\", true);\r\n        this.lbCoin.string = \"\" + (coin);\r\n        cc.tween(this.lbCoin.node)\r\n            .set({ scale: 0, y: -50 })\r\n            .to(1.0, { scale: 0.6, y: 70 }, { easing: cc.easing.backOut })\r\n            .delay(4.0)\r\n            .call(() => {\r\n                this.lbCoin.node.active = false;\r\n                this.boxWin.active = false;\r\n            }).start();\r\n    }\r\n\r\n    public showWinCoin(coin: number) {\r\n        this.lbCoin.node.active = true;\r\n        this.boxWin.active = true;\r\n        this.boxWin.getComponentInChildren(sp.Skeleton).setAnimation(0, \"Win5\", true);\r\n        this.lbCoin.string = \"\" + Utils.formatMoney(coin);\r\n        cc.tween(this.lbCoin.node)\r\n            .set({ scale: 0, y: -50 })\r\n            .to(1.0, { scale: 0.6, y: 70 }, { easing: cc.easing.backOut })\r\n            .delay(4.0)\r\n            .call(() => {\r\n                this.lbCoin.node.active = false;\r\n                this.boxWin.active = false;\r\n            }).start();\r\n    }\r\n\r\n    showChatEmotion(content) {\r\n        this.chatEmotion.active = true;\r\n        this.chatMsg.active = false;\r\n        clearTimeout(this.timeoutChat);\r\n        this.chatEmotion.getComponent(sp.Skeleton).setAnimation(0, content, true);\r\n        this.timeoutChat = setTimeout(() => {\r\n            this.chatEmotion.active = false;\r\n            this.chatMsg.active = false;\r\n        }, 3000);\r\n    }\r\n\r\n    showChatMsg(content) {\r\n\r\n        this.chatEmotion.active = false;\r\n        this.chatMsg.active = true;\r\n        clearTimeout(this.timeoutChat);\r\n        this.chatMsg.getComponentInChildren(cc.Label).string = content;\r\n        this.timeoutChat = setTimeout(() => {\r\n            this.chatEmotion.active = false;\r\n            this.chatMsg.active = false;\r\n        }, 5000);\r\n    }\r\n\r\n    hideChat() {\r\n        clearTimeout(this.timeoutChat);\r\n        this.chatEmotion.active = false;\r\n        this.chatMsg.active = false;\r\n    }\r\n\r\n    public showRefundCoin(coin: number) {\r\n        this.lbCoin.node.active = true;\r\n        this.boxWin.getComponentInChildren(sp.Skeleton).setAnimation(0, \"Win5\", true);\r\n        this.lbCoin.string = \"\" + Utils.formatMoney(coin);\r\n        cc.tween(this.lbCoin.node)\r\n            .set({ scale: 0, y: -50 })\r\n            .to(1.0, { scale: 0.6, y: 70 }, { easing: cc.easing.backOut })\r\n            .delay(4.0)\r\n            .call(() => {\r\n                this.lbCoin.node.active = false;\r\n                this.boxWin.active = false;\r\n            }).start();\r\n    }\r\n  \r\n}\r\n","import cmd from \"./XocDia.Cmd\";\r\nimport Player from \"./XocDia.Player\";\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport XocDiaController from \"./XocDia.XocDiaController\";\r\nimport BtnPayBet from \"./XocDia.BtnPayBet\";\r\nimport XocDiaNetworkClient from \"./XocDia.XocDiaNetworkClient\";\r\nimport PanelPayDoor from \"./XocDia.PanelPayDoor\";\r\nimport BtnBet from \"./XocDia.BtnBet\";\r\nimport BankerControl from \"./XocDia.BankerControl\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport BroadcastReceiver from \"../../Lobby/LobbyScript/Script/common/BroadcastReceiver\";\r\nimport Random from \"../../Lobby/LobbyScript/Script/common/Random\";\r\nimport TimeUtils from \"../../Lobby/LobbyScript/Script/common/TimeUtils\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport SPUtils from \"../../Lobby/LobbyScript/Script/common/SPUtils\";\r\nimport History from \"./XocDia.PopupHistory\"\r\n\r\nenum audio_clip {\r\n    BG = 0,\r\n    LOSE = 1,\r\n    WIN = 2,\r\n    START_GAME = 3,\r\n    XOC_DIA = 4,\r\n    CHIP = 5,\r\n    CLOCK = 6,\r\n    JOIN = 7\r\n}\r\nconst { ccclass, property } = cc._decorator;\r\nvar TW = cc.tween;\r\nenum TYPE_RESULT {\r\n    FOUR_WHITE = 1,\r\n    FOUR_RED = 2,\r\n    THREE_RED = 3,\r\n    THREE_WHITE = 4,\r\n    TWO_RED_TWO_WHITE = 5\r\n}\r\nenum STATE_DEALER {\r\n    IDLE = 1,\r\n    MOI_CUOC = 2,\r\n    TRA_TIEN = 3,\r\n    XOC_LO = 4,\r\n    MO_DIA = 5\r\n}\r\n@ccclass\r\nexport default class Play extends cc.Component {\r\n    @property(History)\r\n    history: History = null;\r\n    @property(cc.Node)\r\n    nodeExit: cc.Node = null;\r\n    @property(cc.ScrollView)\r\n    scrollChip: cc.ScrollView = null;\r\n    @property(cc.Node)\r\n    contentChatNhanh: cc.Node = null;\r\n    @property(cc.Node)\r\n    bgChat: cc.Node = null;\r\n    @property(cc.Node)\r\n    UI_Chat: cc.Node = null;\r\n    @property(cc.Toggle)\r\n    toggleMusic: cc.Toggle = null;\r\n    @property(cc.Toggle)\r\n    toggleSound: cc.Toggle = null;\r\n    @property(cc.Node)\r\n    nodeSetting: cc.Node = null;\r\n    @property(cc.Node)\r\n    nodeTutorial: cc.Node = null;\r\n    @property(cc.Label)\r\n    lblToast: cc.Label = null;\r\n    @property(cc.Node)\r\n    boxSetting: cc.Node = null;\r\n    @property(cc.Node)\r\n    boxMusic: cc.Node = null;\r\n    @property(Player)\r\n    mePlayer: Player = null;\r\n    @property([Player])\r\n    players: Player[] = [];\r\n    @property([BtnBet])\r\n    btnBets: BtnBet[] = [];\r\n    @property([BtnPayBet])\r\n    btnPayBets: BtnPayBet[] = [];\r\n    @property(sp.Skeleton)\r\n    dealer: sp.Skeleton = null;\r\n    @property(cc.Node)\r\n    boxMsg: cc.Node = null;\r\n    @property(cc.Label)\r\n    labelMsg: cc.Label = null;\r\n    @property(cc.Node)\r\n    dealerHandPoint: cc.Node = null;\r\n    @property(cc.Node)\r\n    diceResult: cc.Node = null;\r\n    @property([cc.SpriteFrame])\r\n    sprChipSmalls: cc.SpriteFrame[] = [];\r\n    @property(cc.Node)\r\n    chips: cc.Node = null;\r\n\t@property(cc.Label)\r\n    countplayer: cc.Label = null;\r\n    @property(cc.Node)\r\n    chipTemplate: cc.Node = null;\r\n    @property(cc.Sprite)\r\n    sprProgressTime: cc.Sprite = null;\r\n    @property(cc.Label)\r\n    lblProgressTime: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblHistoryOdd: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblHistoryEven: cc.Label = null;\r\n    @property(cc.SpriteFrame)\r\n    sfOdd: cc.SpriteFrame = null;\r\n    @property(cc.SpriteFrame)\r\n    sfEven: cc.SpriteFrame = null;\r\n    @property(cc.Node)\r\n    lblHistoryItems: cc.Node = null;\r\n    @property(cc.EditBox)\r\n    edtChatInput: cc.EditBox = null;\r\n\r\n\r\n    private inited = false;\r\n    private roomId = 0;\r\n\r\n    private chipsInDoors: any = {};\r\n    private lastBowlStateName = \"\";\r\n    private curTime = 0;\r\n    private gameState = 0;\r\n    private readonly listBets = [1000, 5000, 10000, 50000, 100000, 500000, 1000000, 5000000, 10000000, 50000000, 100000000];\r\n    // 1k 5k 10k 50k 100k 500k 1m 5m 10m 50m 100m\r\n    private betIdx = 0;\r\n    private minBetIdx = 0;\r\n    private isBanker = false;\r\n    private banker = \"\";\r\n    private historyChatData = [];\r\n\r\n    private lastUpdateTime = TimeUtils.currentTimeMillis();\r\n    private chipPool = null\r\n    private clockTimeSche = null;\r\n\r\n\r\n    onBtnSscrollLeft() {\r\n        this.percentScroll -= 0.3;\r\n        if (this.percentScroll <= 0) this.percentScroll = 0;\r\n\r\n        this.scrollChip.scrollToPercentHorizontal(this.percentScroll, 0.4);\r\n    }\r\n\r\n    onBtnScrollRight() {\r\n        this.percentScroll += 0.3;\r\n        if (this.percentScroll >= 1) this.percentScroll = 1;\r\n        this.scrollChip.scrollToPercentHorizontal(this.percentScroll, 0.4);\r\n    }\r\n\r\n\r\n    onBtnClickBgChat() {\r\n        this.UI_Chat.opacity = 100;\r\n        this.bgChat.active = false;\r\n    }\r\n\r\n    onBtnClickBoxChat() {\r\n        this.UI_Chat.opacity = 255;\r\n        this.bgChat.active = true;\r\n    }\r\n    showUIChat() {\r\n        this.onBtnClickBoxChat();\r\n        this.UI_Chat.active = true;\r\n        cc.tween(this.UI_Chat).to(0.3, { x: cc.winSize.width / 2 - this.UI_Chat.width / 2 }, { easing: cc.easing.sineOut }).start();\r\n    }\r\n\r\n    toggleUIChat() {\r\n        if (this.UI_Chat.active == false) {\r\n            this.showUIChat();\r\n        }\r\n        else {\r\n            this.closeUIChat();\r\n        }\r\n    }\r\n\r\n    closeUIChat() {\r\n        this.UI_Chat.active = false;\r\n        cc.tween(this.UI_Chat).to(0.3, { x: cc.winSize.width / 2 + this.UI_Chat.width / 2 }, { easing: cc.easing.sineIn }).call(() => {\r\n            this.UI_Chat.active = false;\r\n        }).start();\r\n    }\r\n\r\n    playerChat(res) {\r\n        let player = this.getPlayer(res.nickname);\r\n        if (player) {\r\n            let chair = res[\"chair\"];\r\n            let isIcon = res[\"isIcon\"];\r\n            let content = res[\"content\"];\r\n            let seatId = chair;\r\n            if (isIcon) {\r\n                // Chat Icon\r\n                player.showChatEmotion(content);\r\n            } else {\r\n                // Chat Msg\r\n                player.showChatMsg(content);\r\n            }\r\n        }\r\n    }\r\n\r\n    chatEmotion(event, id) {\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendChatRoom(1, id));\r\n        this.closeUIChat();\r\n    }\r\n\r\n    chatMsg() {\r\n        if (this.edtChatInput.string.trim().length > 0) {\r\n            XocDiaNetworkClient.getInstance().send(new cmd.SendChatRoom(0, this.edtChatInput.string));\r\n            this.edtChatInput.string = \"\";\r\n            this.closeUIChat();\r\n        }\r\n    }\r\n\r\n    chatNhanhMsg(msg) {\r\n        if (msg.trim().length > 0) {\r\n            XocDiaNetworkClient.getInstance().send(new cmd.SendChatRoom(0, msg));\r\n            this.closeUIChat();\r\n        }\r\n    }\r\n    private percentScroll = 0;\r\n\t\r\n    start() {\r\n        this.percentScroll = 0;\r\n        this.scrollChip.scrollToPercentHorizontal(this.percentScroll, 0.4);\r\n        var self = this;\r\n\t\t\r\n        for (var i = 0; i < this.contentChatNhanh.childrenCount; i++) {\r\n            let node = this.contentChatNhanh.children[i];\r\n            node.on('click', function () {\r\n\r\n                self.chatNhanhMsg(node.children[0].getComponent(cc.Label).string);\r\n            })\r\n        }\r\n\r\n        this.chipPool = new cc.NodePool(\"Chip\");\r\n        this.lblToast.node.parent.active = false;\r\n        for (let i = 0; i < this.btnPayBets.length; i++) {\r\n            let btn = this.btnPayBets[i];\r\n            btn.node.on(\"click\", () => {\r\n                if (this.gameState != 2) {\r\n                    this.showToast(App.instance.getTextLang('txt_bet_error3'));\r\n                    return;\r\n                }\r\n                XocDiaNetworkClient.getInstance().send(new cmd.SendPutMoney(i, this.listBets[this.betIdx]));\r\n\r\n            });\r\n        }\r\n        for (let i = 0; i < this.btnBets.length; i++) {\r\n            let btnBet = this.btnBets[i];\r\n            btnBet.node.on(\"click\", () => {\r\n                this.betIdx = i;\r\n                for (let j = 0; j < this.btnBets.length; j++) {\r\n                    this.btnBets[j].active.active = j == i;\r\n                }\r\n                //  cc.log(\"betIdx:\" + this.betIdx);\r\n            });\r\n        }\r\n\r\n        this.setupTimeRunInBg();\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n//\t\tfunction randomIntFromInterval(min,max)\r\n//{\r\n//    return Math.floor(Math.random()*(max-min+1)+min);\r\n//}\r\n//\r\n//var randomNum = 0;\r\n//\r\n//setInterval(function () {\r\n//    randomNum = randomIntFromInterval(0, 100);\r\n//}, 5000)\r\n \r\n\t\t\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private onBtnHistory() {\r\n\r\n        // this.actCoomingSoon();\r\n        // return;\r\n        if (this.history == null) {\r\n            App.instance.showLoading(true);\r\n            cc.assetManager.getBundle(\"XocDia\").load(\"PopupHistory\", cc.Prefab, function (finish, total, item) {\r\n            }, (err1, prefab: cc.Prefab) => {\r\n                App.instance.showLoading(false);\r\n                if (err1 != null) {\r\n                    //  cc.log(\"errr load game XocDia:\", err1);\r\n                } else {\r\n                    //  cc.log(\"vao daycai chu\");\r\n                    this.history = cc.instantiate(prefab).getComponent(\"XocDia.PopupHistory\");\r\n                    this.history.node.parent = this.node.parent;\r\n                    this.history.node.active = true;\r\n                    this.history.show()\r\n                }\r\n            })\r\n        } else {\r\n            this.history.node.parent = this.node.parent;\r\n            this.history.node.active = true;\r\n            this.history.show()\r\n        }\r\n\r\n        // App.instance.showLoading(true);\r\n        // Http.get(Configs.App.API, { \"c\": 139, \"p\": this.page, \"un\": Configs.Login.Nickname, \"gn\": \"Audition\" }, (err, res) => {\r\n        //     App.instance.showLoading(false);\r\n        //     if (err != null) return;\r\n        //     //  cc.log(\"\");\r\n\r\n\r\n        // });\r\n    }\r\n\r\n\r\n    private arrTimeOut = [];\r\n    private isClearOldData = false;\r\n    setupTimeRunInBg() {\r\n        cc.game.on(cc.game.EVENT_SHOW, () => {\r\n            // XocDiaNetworkClient.getInstance().send(new cmd.SendReconnect());\r\n            // if(this.state == STATE_DEALER.MOI_CUOC && this.isClearOldData == false){\r\n            //     if(this.nodeExit && this.nodeExit.active){\r\n            //         this.node.active = false;\r\n            //         XocDiaController.instance.lobby.show();\r\n            //     }\r\n            //     this.setStateDealer(STATE_DEALER.XOC_LO);\r\n            //     this.btnPayBets.forEach(e => e.reset());\r\n            //     this.clearChips();\r\n            //     this.resetDiceResult();\r\n            for (var i = 0; i < this.players.length; i++) {\r\n                this.players[i].clearUI();\r\n            }\r\n            //     for(var i=0;i<this.arrTimeOut.length;i++){\r\n            //         clearTimeout(this.arrTimeOut[i]);\r\n            //     }\r\n\r\n            //     this.arrTimeOut = [];\r\n            //     this.isClearOldData = true;\r\n\r\n            //     if(this.dataJoinRoom){\r\n            //         this.show(this.dataJoinRoom);\r\n            //     }\r\n\r\n\r\n            // }\r\n\r\n\r\n\r\n        });\r\n\r\n    };\r\n\r\n    updateChipTotalBets() {\r\n        for (var i = 0; i < this.btnPayBets.length; i++) {\r\n            if (this.btnPayBets[i].lblTotalBet.string != \"\") {\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    hideSetting() {\r\n        this.nodeSetting.active = false;\r\n    }\r\n\r\n    showSetting() {\r\n        this.toggleMusic.isChecked = SPUtils.getMusicVolumn() > 0;\r\n        this.toggleSound.isChecked = SPUtils.getSoundVolumn() > 0;\r\n        this.nodeSetting.active = true;\r\n    }\r\n\r\n    showTutorial() {\r\n        this.nodeTutorial.active = true;\r\n    }\r\n\r\n    hideTutorial() {\r\n        this.nodeTutorial.active = false;\r\n    }\r\n\r\n    onBtnToggleMusic() {\r\n        SPUtils.setMusicVolumn(this.toggleMusic.isChecked ? 1 : 0);\r\n        BroadcastReceiver.send(BroadcastReceiver.ON_AUDIO_CHANGED);\r\n    }\r\n\r\n    onBtnToggleSound() {\r\n        SPUtils.setSoundVolumn(this.toggleSound.isChecked ? 1 : 0);\r\n        BroadcastReceiver.send(BroadcastReceiver.ON_AUDIO_CHANGED);\r\n    }\r\n\r\n    showToast(msg) {\r\n        this.lblToast.string = msg;\r\n        this.lblToast.node.parent.opacity = 0;\r\n        this.lblToast.node.parent.active = true;\r\n        cc.Tween.stopAllByTarget(this.lblToast.node.parent);\r\n        cc.tween(this.lblToast.node.parent)\r\n            .to(0.3, { opacity: 255 }, { easing: \"linear\" })\r\n            .delay(1)\r\n            .to(0.3, { opacity: 0 }, { easing: \"linear\" })\r\n            .call(() => {\r\n                this.lblToast.node.parent.active = false;\r\n            })\r\n            .start();\r\n    }\r\n\t\r\n//\tprivate itemData = null;\r\n//    init(itemData){\r\n//        this.itemData = itemData;\r\n//        //this.lblBet.string = Utils.formatNumber(itemData[\"id\"]);\r\n//        //this.lblMin.string = Utils.formatNumber(itemData[\"requiredMoney\"]);\r\n//        this.countplayer.string = itemData[\"userCount\"] + \"/\" + itemData[\"maxUserPerRoom\"];\r\n//        //this.sprPlayers.fillRange = itemData[\"userCount\"] / itemData[\"maxUserPerRoom\"];\r\n//    }\r\n\r\n\r\n\r\n//this.countplayer.string = this.dfwsed;\r\n\r\n    private totalTimeState = 0;\r\n\t\r\n\t\t\t\r\n    update(dt) {\r\n        if (this.curTime > 0) {\r\n            let timeLeft = Math.max(0, this.curTime - TimeUtils.currentTimeMillis());\r\n            this.sprProgressTime.fillRange = timeLeft / this.totalTimeState;\r\n            if (timeLeft == 0) {\r\n                this.curTime = 0;\r\n                this.sprProgressTime.node.parent.active = false;\r\n                this.unschedule(this.clockTimeSche);\r\n\t\t\t\tthis.countplayer.string = Utils.randomRangeInt(420, 540) ;\r\n            }else if (timeLeft == 10000) {\r\n                \r\n\t\t\t\tthis.countplayer.string = Utils.randomRangeInt(410, 550) ;\r\n            }else if (timeLeft == 11000) {\r\n                \r\n\t\t\t\tthis.countplayer.string = Utils.randomRangeInt(420, 550) ;\r\n            }else if (timeLeft == 21000) {\r\n                \r\n\t\t\t\tthis.countplayer.string = Utils.randomRangeInt(420, 540) ;\r\n            } else if (timeLeft == 31000) {\r\n                \r\n\t\t\t\tthis.countplayer.string = Utils.randomRangeInt(450, 550) ;\r\n            } \r\n\t\t\t\r\n        }\r\n\r\n        // let t = TimeUtils.currentTimeMillis();\r\n        // if (t - this.lastUpdateTime > 2000) {\r\n        //     this.node.stopAllActions();\r\n        //     App.instance.showLoading(true);\r\n        //     XocDiaNetworkClient.getInstance().send(new cmd.SendJoinRoomById(this.roomId));\r\n        // }\r\n        // this.lastUpdateTime = t;\r\n    }\r\n\r\n\r\n\r\n    public init() {\r\n        if (this.inited) return;\r\n        this.inited = true;\r\n\r\n        BroadcastReceiver.register(BroadcastReceiver.USER_UPDATE_COIN, () => {\r\n            if (!this.node.active) return;\r\n            this.mePlayer.setCoin(Configs.Login.Coin);\r\n        }, this);\r\n        BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n\r\n        XocDiaNetworkClient.getInstance().addListener((data) => {\r\n            let inpacket = new InPacket(data);\r\n            switch (inpacket.getCmdId()) {\r\n                case cmd.Code.JOIN_ROOM_SUCCESS:\r\n                    {\r\n                        App.instance.showLoading(false);\r\n                        let res = new cmd.ReceiveJoinRoomSuccess(data);\r\n                        //  cc.log(\"SendJoinRoomById JOIN_ROOM_SUCCESS play\");\r\n                        XocDiaController.instance.showGamePlay(res);\r\n                    }\r\n                    break;\r\n                case cmd.Code.USER_JOIN_ROOM_SUCCESS:\r\n                    {\r\n                        let res = new cmd.ReceiveUserJoinRoom(data);\r\n                        let player = this.getRandomEmptyPlayer();\r\n\t\t\t\t\t\t\r\n                        if (player != null) {\r\n                            player.set(res.nickname, res.avatar, res.money, false);\r\n\t\t\t\t\t\t\t\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.USER_OUT_ROOM:\r\n                    {\r\n                        let res = new cmd.ReceiveUserOutRoom(data);\r\n                        let player = this.getPlayer(res.nickname);\r\n                        if (player != null) player.leave();\r\n                    }\r\n                    break;\r\n                case cmd.Code.QUIT_ROOM:\r\n                    {\r\n                        let res = new cmd.ReceiveLeavedRoom(data);\r\n                        this.node.active = false;\r\n                        XocDiaController.instance.lobby.show();\r\n                        switch (res.reason) {\r\n                            case 1:\r\n                                App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_not_enough_money'));\r\n                                break;\r\n                            case 2:\r\n                                App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_reparing'));\r\n                                break;\r\n                            case 5:\r\n                                App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_room_err13'));\r\n                                break;\r\n                            case 6:\r\n                                App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_room_err10'));\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.DANG_KY_THOAT_PHONG:\r\n                    {\r\n                        let res = new cmd.ReceiveLeaveRoom(data);\r\n                        //  cc.log(\"DANG_KY_THOAT_PHONG:\" + res.bRegis);\r\n                        if (res.bRegis) {\r\n                            if (this.nodeExit) {\r\n                                this.nodeExit.active = true;\r\n                            }\r\n                            App.instance.showToast(App.instance.getTextLang('txt_room_leave'));\r\n                        } else {\r\n                            if (this.nodeExit) {\r\n                                this.nodeExit.active = false;\r\n                            }\r\n                            App.instance.showToast(App.instance.getTextLang('txt_room_cancel_leave'));\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.ACTION_IN_GAME:\r\n                    {\r\n                        let res = new cmd.ReceiveActionInGame(data);\r\n                        let msg = \"\";\r\n                        this.gameState = res.action;\r\n                        switch (res.action) {\r\n                            case 1://bat dau van moi\r\n                                msg = \"Bắt đầu ván mới\";\r\n                                this.sprProgressTime.node.parent.active = false;\r\n                                this.unschedule(this.clockTimeSche);\r\n                                XocDiaController.instance.playAudioEffect(audio_clip.START_GAME)\r\n                                break;\r\n                            case 2://bat dau dat cua\r\n                                msg = \"Bắt đầu đặt cửa\";\r\n                                this.sprProgressTime.node.parent.active = true;\r\n                                this.lblProgressTime.string = \"Đang cược...\";\r\n                                this.curTime = TimeUtils.currentTimeMillis() + (res.time + 10) * 1000;\r\n                                this.totalTimeState = (res.time + 10) * 1000;\r\n                                this.setStateDealer(STATE_DEALER.MOI_CUOC);\r\n                                this.schedule(this.clockTimeSche = () => {\r\n                                    if (this.node.active) {\r\n                                        XocDiaController.instance.playAudioEffect(audio_clip.CLOCK)\r\n                                    } else {\r\n                                        this.unschedule(this.clockTimeSche);\r\n                                    }\r\n\r\n                                }, 1.0, res.time);\r\n                                break;\r\n                            case 3://bat dau ban cua\r\n                                msg = \"Bắt đầu bán cửa\";\r\n                                this.sprProgressTime.node.parent.active = true;\r\n                                this.lblProgressTime.string = \"Đang bán cửa...\";\r\n                                this.curTime = TimeUtils.currentTimeMillis() + res.time * 1000;\r\n                                this.totalTimeState = res.time * 1000;\r\n                                break;\r\n                            case 4://nha cai can tien, hoan tien\r\n                                msg = \"Nhà cái cân tiền, hoàn tiền\";\r\n                                this.sprProgressTime.node.parent.active = true;\r\n                                this.lblProgressTime.string = \"Đang cân cửa...\";\r\n                                this.curTime = TimeUtils.currentTimeMillis() + res.time * 1000;\r\n                                this.totalTimeState = res.time * 1000;\r\n                                break;\r\n                            case 5://bat dau hoan tien\r\n                                msg = \"Bắt đầu hoàn tiền\";\r\n                                this.sprProgressTime.node.parent.active = true;\r\n                                this.lblProgressTime.string = \"Đang hoàn tiền...\";\r\n                                this.curTime = TimeUtils.currentTimeMillis() + res.time * 1000;\r\n                                this.totalTimeState = res.time * 1000;\r\n                                break;\r\n                            case 6://bat dau tra thuong\r\n                                msg = \"Bắt đầu trả thưởng\";\r\n                                this.setStateDealer(STATE_DEALER.TRA_TIEN);\r\n                                this.sprProgressTime.node.parent.active = true;\r\n                                this.lblProgressTime.string = \"Đang trả thưởng...\";\r\n                                this.curTime = TimeUtils.currentTimeMillis() + res.time * 1000;\r\n                                this.totalTimeState = res.time * 1000;\r\n                                break;\r\n                        }\r\n                        if (msg != \"\") {\r\n                            this.labelMsg.string = msg;\r\n                            this.boxMsg.active = false;\r\n                            this.scheduleOnce(() => {\r\n                                this.boxMsg.active = true;\r\n                                this.scheduleOnce(() => {\r\n                                    this.boxMsg.active = false;\r\n                                }, 0.9);\r\n                            }, 0.3);\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.START_GAME:\r\n                    {\r\n                        let res = new cmd.ReceiveStartGame(data);\r\n\r\n                        if (res.banker != \"\" && res.banker != Configs.Login.Nickname && this.isBanker) {\r\n                            App.instance.alertDialog.showMsg(\"Bạn không đủ tiền để tiếp tục làm cái!\");\r\n                        }\r\n\r\n                        this.banker = res.banker;\r\n                        this.isBanker = this.banker == Configs.Login.Nickname;\r\n\r\n                        for (let i = 0; i < this.players.length; i++) {\r\n                            let player = this.players[i];\r\n                            player.banker.active = player.nickname != \"\" && player.nickname == this.banker;\r\n                        }\r\n\r\n                        this.btnPayBets.forEach(e => e.reset());\r\n                        this.clearChips();\r\n                        this.resetDiceResult();\r\n                        this.setStateDealer(STATE_DEALER.XOC_LO);\r\n                    }\r\n                    break;\r\n                case cmd.Code.PUT_MONEY:\r\n                    {\r\n                        let res = new cmd.ReceivePutMoney(data);\r\n                        let btnPayBet = this.btnPayBets[res.potId];\r\n                        btnPayBet.setTotalBet(res.potMoney);\r\n\r\n                        if (res.nickname == Configs.Login.Nickname) {\r\n                            //  cc.log(\"XOC DIA PUT_MONEY:\" + res.error);\r\n                            switch (res.error) {\r\n                                case 0:\r\n                                    break;\r\n                                case 1:\r\n                                    App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_not_enough'));\r\n                                    return;\r\n                                case 2:\r\n                                    App.instance.alertDialog.showMsg(App.instance.getTextLang('txt_bet_error1'));\r\n                                    return;\r\n                                default:\r\n                                    App.instance.alertDialog.showMsg(App.instance.getTextLang(\"txt_unknown_error\"));\r\n                                    return;\r\n                            }\r\n                            Configs.Login.Coin = res.currentMoney;\r\n                            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                        }\r\n\r\n                        let player = this.getPlayer(res.nickname);\r\n                        if (player != null) {\r\n                            player.setCoin(res.currentMoney);\r\n                            let listCoin = this.convertMoneyToChipMoney(res.betMoney);\r\n                            for (let i = 0; i < listCoin.length; i++) {\r\n                                let chip = this.getChip(listCoin[i]);\r\n                                chip.name = player.nickname;\r\n                                chip.position = player.node.position;\r\n                                if (!this.chipsInDoors.hasOwnProperty(res.potId)) {\r\n                                    this.chipsInDoors[res.potId] = [];\r\n                                }\r\n                                this.chipsInDoors[res.potId].push(chip);\r\n                                let position = btnPayBet.node.position.clone();\r\n                                let target = new cc.Vec2(\r\n                                    Random.rangeInt(-btnPayBet.node.width / 4 - 20, btnPayBet.node.width / 4 + 20),\r\n                                    Random.rangeInt(-btnPayBet.node.height / 4 - 20, btnPayBet.node.height / 2 - 70));\r\n                                position.x += target.x;\r\n                                position.y += target.y;\r\n                                cc.Tween.stopAllByTarget(chip);\r\n                                TW(chip).then(cc.jumpTo(0.5, cc.v2(position.x, position.y), 50, 2).easing(cc.easeSineOut()))\r\n                                    .call(() => {\r\n                                        chip.position = position;\r\n                                    })\r\n                                    .start();\r\n                            }\r\n                            XocDiaController.instance.playAudioEffect(audio_clip.CHIP);\r\n                        }\r\n                    }\r\n                    break;\r\n\r\n\r\n                case cmd.Code.REFUN_MONEY:\r\n                    {\r\n                        let res = new cmd.ReceiveRefunMoney(data);\r\n\r\n\r\n                        for (let i = 0; i < res.playerInfosRefun.length; i++) {\r\n                            let rfData = res.playerInfosRefun[i];\r\n                            let player = this.getPlayer(rfData[\"nickname\"]);\r\n                            if (player != null) {\r\n                                player.showRefundCoin(rfData[\"moneyRefund\"]);\r\n                                player.setCoin(rfData[\"currentMoney\"]);\r\n                            }\r\n                            if (rfData[\"nickname\"] == Configs.Login.Nickname) {\r\n                                Configs.Login.Coin = rfData[\"currentMoney\"];\r\n                                BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                            }\r\n                        }\r\n\r\n                        for (let i = 0; i < res.potID.length; i++) {\r\n                            let potData = res.potID[i];\r\n                            this.btnPayBets[i].setTotalBet(potData[\"totalMoney\"]);\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.FINISH_GAME:\r\n                    {\r\n                        this.isClearOldData = false;\r\n                        let res = new cmd.ReceiveFinishGame(data);\r\n                        for (let i = 0; i < res.playerInfoWin.length; i++) {\r\n                            let playerData = res.playerInfoWin[i];\r\n                            if (playerData[\"nickname\"] == Configs.Login.Nickname) {\r\n                                Configs.Login.Coin = playerData[\"currentMoney\"];\r\n                                BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        let countRed = 0;\r\n                        let countWhite = 0;\r\n                        for (let i = 0; i < res.diceIDs.length; i++) {\r\n                            if (res.diceIDs[i] == 1) countRed++;\r\n                            else countWhite++;\r\n                        }\r\n                        let isChan = (res.diceIDs[0] + res.diceIDs[1] + res.diceIDs[2] + res.diceIDs[3]) % 2 == 0;\r\n                        let isLe3do1trang = res.infoAllPot[4].win;\r\n                        let isLe3trang1do = res.infoAllPot[5].win;\r\n                        let isChan4do = res.infoAllPot[3].win;\r\n                        let isChan4trang = res.infoAllPot[2].win;\r\n                        let doorWins = [];\r\n                        this.setStateDealer(STATE_DEALER.MO_DIA);\r\n                        let cb = () => {\r\n                            if (isChan) {\r\n                                doorWins.push(0);\r\n                                this.btnPayBets[0].active.active = true;\r\n                                if (isChan4do) {\r\n                                    doorWins.push(3);\r\n                                    this.btnPayBets[3].active.active = true;\r\n                                } else if (isChan4trang) {\r\n                                    doorWins.push(2);\r\n                                    this.btnPayBets[2].active.active = true;\r\n                                } else {\r\n                                }\r\n                            } else {\r\n                                doorWins.push(1);\r\n                                this.btnPayBets[1].active.active = true;\r\n                                if (isLe3do1trang) {\r\n                                    doorWins.push(4);\r\n                                    this.btnPayBets[4].active.active = true;\r\n                                } else if (isLe3trang1do) {\r\n                                    doorWins.push(5);\r\n                                    this.btnPayBets[5].active.active = true;\r\n                                }\r\n                            }\r\n\r\n                            let chipsWithNickname: any = {};\r\n                            for (let k in this.chipsInDoors) {\r\n                                let doorId = parseInt(k);\r\n                                let chips: Array<cc.Node> = this.chipsInDoors[doorId];\r\n                                if (doorWins.indexOf(doorId) == -1) {\r\n                                    let btnPayBet = this.btnPayBets[doorId];\r\n                                    let position = btnPayBet.node.position.clone();\r\n                                    position.y -= 10;\r\n                                    let positionAdd = position.clone();\r\n                                    this.arrTimeOut.push(setTimeout(() => {\r\n                                        let node = new cc.Node();\r\n                                        node.parent = this.chips;\r\n                                        node.opacity = 0;\r\n                                        for (let i = 0; i < chips.length; i++) {\r\n                                            chips[i].parent = node;\r\n                                            // chips[i].position = positionAdd;\r\n                                            // positionAdd.y += 3;\r\n                                        }\r\n                                        cc.Tween.stopAllByTarget(node);\r\n                                        TW(node).to(0.1, { opacity: 255 }, { easing: cc.easing.sineIn })\r\n                                            .delay(0.3)\r\n                                            .to(0.5, { scale: 0, x: this.dealerHandPoint.x, y: this.dealerHandPoint.y })\r\n                                            .to(0.1, { opacity: 0 }, { easing: cc.easing.sineOut })\r\n                                            .call(() => {\r\n                                                for (let i = 0; i < chips.length; i++) {\r\n                                                    chips[i].parent = this.chips;\r\n                                                    chips[i].opacity = 255;\r\n                                                    chips[i].active = false;\r\n                                                }\r\n                                                node.destroy();\r\n                                            }).start();\r\n                                    }, 800));\r\n                                } else {\r\n                                    for (let i = 0; i < chips.length; i++) {\r\n                                        let chip = chips[i];\r\n                                        let nickname = chip.name;\r\n                                        if (!chipsWithNickname.hasOwnProperty(nickname)) {\r\n                                            chipsWithNickname[nickname] = [];\r\n                                        }\r\n                                        chipsWithNickname[nickname].push(chip);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            this.arrTimeOut.push(setTimeout(() => {\r\n                                for (let k in chipsWithNickname) {\r\n                                    let player = this.getPlayer(k);\r\n                                    if (player != null) {\r\n                                        let chips = chipsWithNickname[k];\r\n                                        let positionAdd = player.chipsPoint.clone();\r\n                                        let positionAdd2 = player.chipsPoint2.clone();\r\n                                        let count1 = 0;\r\n                                        let count2 = 0;\r\n                                        for (let i = 0; i < chips.length; i++) {\r\n                                            let chip: cc.Node = chips[i];\r\n                                            let opacity1 = count1 < 15 ? 255 : 0;\r\n                                            cc.Tween.stopAllByTarget(chip);\r\n                                            TW(chip).to(0.5, { x: positionAdd.x, y: positionAdd.y, opacity: opacity1 }, { easing: cc.easing.sineOut })\r\n                                                .delay(1 + (chips.length * 0.03 - i * 0.03))\r\n                                                .to(0.5, { position: player.node.position }, { easing: cc.easing.sineIn })\r\n                                                .call(() => {\r\n                                                    chip.active = false;\r\n                                                }).start();\r\n\r\n                                            let dealerChip = this.getChip(0);\r\n                                            dealerChip.getComponent(cc.Sprite).spriteFrame = chip.getComponent(cc.Sprite).spriteFrame;\r\n                                            dealerChip.opacity = 0;\r\n                                            dealerChip.position = this.dealerHandPoint.position;\r\n                                            let opacity2 = count2 < 15 ? 255 : 0;\r\n                                            cc.Tween.stopAllByTarget(dealerChip);\r\n                                            TW(dealerChip).delay(0.5)\r\n                                                .to(0.2, { opacity: opacity2 }, { easing: cc.easing.sineIn })\r\n                                                .to(0.5, { x: positionAdd2.x, y: positionAdd2.y }, { easing: cc.easing.sineOut })\r\n                                                .delay(0.3 + (chips.length * 0.03 - i * 0.03))\r\n                                                .to(0.5, { position: player.node.position }, { easing: cc.easing.sineOut })\r\n                                                .call(() => {\r\n                                                    dealerChip.active = false;\r\n                                                }).start();\r\n                                            if (count1 < 15) {\r\n                                                count1++;\r\n                                                positionAdd.y += 3;\r\n\r\n                                            }\r\n                                            if (count2 < 15) {\r\n                                                count2++\r\n                                                positionAdd2.y += 3;\r\n                                            }\r\n\r\n\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }, 1500));\r\n                        }\r\n                        if (isChan) {\r\n                            if (isChan4do) {\r\n                                this.setDiceResult(TYPE_RESULT.FOUR_RED, cb);\r\n                            } else if (isChan4trang) {\r\n                                this.setDiceResult(TYPE_RESULT.FOUR_WHITE, cb);\r\n                            } else {\r\n                                this.setDiceResult(TYPE_RESULT.TWO_RED_TWO_WHITE, cb);\r\n                            }\r\n                        } else {\r\n                            if (isLe3do1trang) {\r\n                                this.setDiceResult(TYPE_RESULT.THREE_RED, cb);\r\n                            } else if (isLe3trang1do) {\r\n                                this.setDiceResult(TYPE_RESULT.THREE_WHITE, cb);\r\n                            }\r\n                        }\r\n\r\n\r\n                        this.arrTimeOut.push(setTimeout(() => {\r\n                            for (let i = 0; i < res.playerInfoWin.length; i++) {\r\n                                let playerData = res.playerInfoWin[i];\r\n                                let player = this.getPlayer(playerData[\"nickname\"]);\r\n                                if (player != null) {\r\n                                    var moneyWinPots = playerData[\"moneyWinPots\"];\r\n                                    moneyWinPots = moneyWinPots.split(',');\r\n                                    var msgWin = \"\";\r\n                                    for (var j = 0; j < moneyWinPots.length; j++) {\r\n                                        msgWin += Utils.formatMoney(moneyWinPots[j]) + \"\\n\\n\";\r\n                                    }\r\n                                    player.showWinCoinString(msgWin);\r\n                                    player.setCoin(playerData[\"currentMoney\"]);\r\n                                }\r\n                            }\r\n\r\n                            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                        }, 3000));\r\n\r\n                        if (this.isBanker) {\r\n                            this.mePlayer.showWinCoin(res.moneyBankerExchange);\r\n                            this.mePlayer.setCoin(res.moneyBankerAfter);\r\n                            Configs.Login.Coin = res.moneyBankerAfter;\r\n                            BroadcastReceiver.send(BroadcastReceiver.USER_UPDATE_COIN);\r\n                        }\r\n\r\n                        XocDiaNetworkClient.getInstance().send(new cmd.CmdSendGetCau());\r\n                    }\r\n                    break;\r\n                case cmd.Code.SOI_CAU:\r\n                    {\r\n                        let res = new cmd.ReceiveGetCau(data);\r\n\r\n                        this.lblHistoryOdd.string = Utils.formatNumber(res.totalOdd);\r\n                        this.lblHistoryEven.string = Utils.formatNumber(res.totalEven);\r\n                        for (let i = 0; i < this.lblHistoryItems.childrenCount; i++) {\r\n                            if (i < res.arrayCau.length) {\r\n                                this.lblHistoryItems.children[i].getComponent(cc.Sprite).spriteFrame = res.arrayCau[i] == 0 ? this.sfOdd : this.sfEven;\r\n                                this.lblHistoryItems.children[i].active = true;\r\n                            } else {\r\n                                this.lblHistoryItems.children[i].active = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.ORDER_BANKER:\r\n                    {\r\n                        let res = new cmd.ReceiveOrderBanker(data);\r\n                        switch (res.error) {\r\n                            case 0:\r\n                                break;\r\n                            case 1:\r\n                                App.instance.alertDialog.showMsg(\"Bạn cần \" + Utils.formatNumber(res.moneyRequire) + \" Xu để làm cái!\");\r\n                                break;\r\n                            default:\r\n                                App.instance.alertDialog.showMsg(\"Lỗi \" + res.error + \", không xác định.\");\r\n                                break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.HUY_LAM_CAI:\r\n                    {\r\n                        let res = new cmd.ReceiveCancelBanker(data);\r\n                        if (res.bDestroy && this.isBanker) {\r\n                            App.instance.alertDialog.showMsg(\"Đăng ký huỷ làm cái thành công.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case cmd.Code.INFO_GATE_SELL:\r\n                    {\r\n                        let res = new cmd.ReceiveInfoGateSell(data);\r\n                    }\r\n                    break;\r\n                case cmd.Code.INFO_MONEY_AFTER_BANKER_SELL:\r\n                    {\r\n                        let res = new cmd.ReceiveInfoMoneyAfterBankerSell(data);\r\n                    }\r\n                    break;\r\n                case cmd.Code.CHAT_MS:\r\n                    {\r\n                        let res = new cmd.ReceivedChatRoom(data);\r\n                        this.playerChat(res);\r\n\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }, this);\r\n    }\r\n    private showDiceResult(cb) {\r\n        let bowl = this.diceResult.getChildByName(\"bat\");\r\n        let ranX1 = [Utils.randomRangeInt(-40, -30), Utils.randomRange(30, 40)][Utils.randomRangeInt(0, 2)];\r\n        let ranY1 = [Utils.randomRangeInt(-40, -30), Utils.randomRangeInt(30, 40)][Utils.randomRangeInt(0, 2)];\r\n        let ranX2 = [Utils.randomRangeInt(-120, -100), Utils.randomRangeInt(100, 120)][Utils.randomRangeInt(0, 2)];\r\n        let ranY2 = [Utils.randomRangeInt(-120, -100), Utils.randomRangeInt(100, 120)][Utils.randomRangeInt(0, 2)];\r\n        cc.Tween.stopAllByTarget(bowl);\r\n        TW(bowl).set({ x: -5, y: 7, opacity: 255 }).to(1.0, { x: ranX1, y: ranY1 })\r\n            .delay(0.5).call(() => {\r\n                if (this.state == STATE_DEALER.MO_DIA) {\r\n                    cb();\r\n                    XocDiaController.instance.playAudioEffect(audio_clip.WIN);\r\n                }\r\n\r\n            })\r\n            .to(0.6, { x: ranX2, y: ranY2, opacity: 0 }, { easing: cc.easing.sineOut }).start();\r\n    }\r\n    private xocDice() {\r\n        this.resetDiceResult();\r\n        this.diceResult.active = true;\r\n        cc.Tween.stopAllByTarget(this.diceResult);\r\n        TW(this.diceResult).set({ x: 7.755, y: 66.138, scale: 0 }).to(0.5, { scale: 1, x: 0, y: 66 }, { easing: cc.easing.sineIn }).start();\r\n    }\r\n    private setDiceResult(typeResult, cb) {\r\n        let arrSprResult = [];\r\n        switch (typeResult) {\r\n            case TYPE_RESULT.FOUR_RED: {\r\n                arrSprResult.push(this.sfOdd, this.sfOdd, this.sfOdd, this.sfOdd);\r\n                break;\r\n            }\r\n            case TYPE_RESULT.FOUR_WHITE: {\r\n                arrSprResult.push(this.sfEven, this.sfEven, this.sfEven, this.sfEven);\r\n                break;\r\n            }\r\n            case TYPE_RESULT.THREE_RED: {\r\n                arrSprResult.push(this.sfOdd, this.sfEven, this.sfOdd, this.sfOdd);\r\n                break;\r\n            }\r\n            case TYPE_RESULT.THREE_WHITE: {\r\n                arrSprResult.push(this.sfEven, this.sfEven, this.sfOdd, this.sfEven);\r\n                break;\r\n            }\r\n            case TYPE_RESULT.TWO_RED_TWO_WHITE: {\r\n                arrSprResult.push(this.sfEven, this.sfEven, this.sfOdd, this.sfOdd);\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 1; i < 5; i++) {\r\n            this.diceResult.getChildByName(\"ic_result_\" + i).getComponent(cc.Sprite).spriteFrame = arrSprResult[i - 1];\r\n        }\r\n        this.showDiceResult(cb);\r\n    }\r\n    private resetDiceResult() {\r\n        cc.Tween.stopAllByTarget(this.diceResult.getChildByName(\"bat\"));\r\n        this.diceResult.getChildByName(\"bat\").setPosition(cc.v2(-6.81, 9.24));\r\n        this.diceResult.getChildByName(\"bat\").opacity = 255;\r\n        // this.diceResult.active = false;\r\n    }\r\n    private resetView() {\r\n        this.mePlayer.leave();\r\n        this.players.forEach(e => e.leave());\r\n        this.btnPayBets.forEach(e => e.reset());\r\n        this.setStateDealer(STATE_DEALER.IDLE);\r\n        this.boxMsg.active = false;\r\n        this.resetDiceResult();\r\n        for (var i = 0; i < this.players.length; i++) {\r\n            this.players[i].clearUI();\r\n        }\r\n        for (var i = 0; i < this.arrTimeOut.length; i++) {\r\n            clearTimeout(this.arrTimeOut[i]);\r\n        }\r\n        this.clearChips();\r\n        this.sprProgressTime.node.parent.active = false;\r\n        this.unschedule(this.clockTimeSche);\r\n        this.curTime = 0;\r\n    }\r\n\r\n    private getRandomEmptyPlayer(): Player {\r\n        let emptyPlayers = new Array<Player>();\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            if (this.players[i].nickname == \"\") emptyPlayers.push(this.players[i]);\r\n        }\r\n        if (emptyPlayers.length > 0) {\r\n            return emptyPlayers[Random.rangeInt(0, emptyPlayers.length)];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private getPlayer(nickname: string): Player {\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            let player = this.players[i];\r\n            if (player.nickname != \"\" && player.nickname == nickname) return player;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private listChip: cc.Node[] = [];\r\n    private getChip(coin: number): cc.Node {\r\n        let ret: cc.Node = null;\r\n\r\n        if (this.chipPool.size() <= 0) {\r\n            this.chipPool.put(cc.instantiate(this.chipTemplate));\r\n        }\r\n        ret = this.chipPool.get();\r\n        this.listChip.push(ret);\r\n        ret.parent = this.chips;\r\n        let chipIdx = 0;\r\n        for (let i = 0; i < this.listBets.length; i++) {\r\n            if (this.listBets[i] == coin) {\r\n                chipIdx = i;\r\n                break;\r\n            }\r\n        }\r\n        chipIdx -= 0;\r\n        //  cc.log(\"getChip:\" + chipIdx + \":\" + this.minBetIdx);\r\n        ret.getComponent(cc.Sprite).spriteFrame = this.sprChipSmalls[chipIdx];\r\n        ret.opacity = 255;\r\n        ret.active = true;\r\n        ret.setSiblingIndex(this.chips.childrenCount - 1);\r\n\r\n        return ret;\r\n    }\r\n\r\n    private clearChips() {\r\n        this.chipTemplate.active = false;\r\n        for (let i = 0; i < this.listChip.length; i++) {\r\n            this.chipPool.put(this.listChip[i]);\r\n        }\r\n        this.listChip = [];\r\n        this.chipsInDoors = {};\r\n    }\r\n\r\n    private convertMoneyToChipMoney(coin: number): Array<number> {\r\n        let ret = new Array<number>();\r\n        let _coin = coin;\r\n        let minCoin = this.listBets[this.minBetIdx];\r\n        let counter = 0;\r\n        while (_coin >= minCoin || counter < 15) {\r\n            for (let i = this.minBetIdx + this.btnBets.length; i >= this.minBetIdx; i--) {\r\n                if (_coin >= this.listBets[i]) {\r\n                    ret.push(this.listBets[i]);\r\n                    _coin -= this.listBets[i];\r\n                    break;\r\n                }\r\n            }\r\n            counter++;\r\n        }\r\n        return ret;\r\n    }\r\n    private dataJoinRoom;\r\n    public show(data: cmd.ReceiveJoinRoomSuccess) {\r\n\r\n        //  cc.log(\"ReceiveJoinRoomSuccess show:\" + JSON.stringify(data));\r\n        this.dataJoinRoom = data;\r\n        if (this.chipPool == null) {\r\n            this.chipPool = new cc.NodePool(\"Chip\");\r\n        }\r\n        this.node.active = true;\r\n        this.resetView();\r\n        if (this.nodeExit && this.nodeExit.active) {\r\n            this.nodeExit.active = false;\r\n        }\r\n\t\tthis.countplayer.string = Utils.randomRangeInt(420, 540);\r\n        this.roomId = data.roomId;\r\n        this.lastUpdateTime = TimeUtils.currentTimeMillis();\r\n        XocDiaController.instance.playAudioEffect(audio_clip.JOIN);\r\n        Configs.Login.Coin = data.money;\r\n        this.isBanker = data.banker;\r\n        this.banker = \"\";\r\n        if (this.isBanker) {\r\n            this.banker = Configs.Login.Nickname;\r\n        } else {\r\n        }\r\n\r\n        this.mePlayer.set(Configs.Login.Nickname, Configs.Login.Avatar, Configs.Login.Coin, data.banker);\r\n        for (let i = 0; i < data.playerInfos.length; i++) {\r\n            let playerData = data.playerInfos[i];\r\n            let player = this.getRandomEmptyPlayer();\r\n            if (player != null) {\r\n                player.set(playerData[\"nickname\"], playerData[\"avatar\"], playerData[\"money\"], playerData[\"banker\"]);\r\n                if (playerData[\"banker\"]) {\r\n                    this.banker = playerData[\"nickname\"];\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (data.gameState == 1 || data.gameState == 2) {\r\n            for (let i = 0; i < data.potID.length; i++) {\r\n                let potData = data.potID[i];\r\n                let btnPayBet = this.btnPayBets[i];\r\n                btnPayBet.setTotalBet(potData[\"totalMoney\"]);\r\n                let listCoin = this.convertMoneyToChipMoney(potData[\"totalMoney\"]);\r\n                for (let i = 0; i < listCoin.length; i++) {\r\n                    let chip = this.getChip(listCoin[i]);\r\n                    let player = this.getPlayer(Configs.Login.Nickname);\r\n                    chip.name = player.nickname;\r\n                    chip.position = player.node.position;\r\n                    if (!this.chipsInDoors.hasOwnProperty(potData.id)) {\r\n                        this.chipsInDoors[potData.id] = [];\r\n                    }\r\n                    this.chipsInDoors[potData.id].push(chip);\r\n                    let position = btnPayBet.node.position.clone();\r\n                    let target = new cc.Vec2(\r\n                        Random.rangeInt(-btnPayBet.node.width / 4 - 20, btnPayBet.node.width / 4 + 20),\r\n                        Random.rangeInt(-btnPayBet.node.height / 4 - 20, btnPayBet.node.height / 2 - 70));\r\n                    position.x += target.x;\r\n                    position.y += target.y;\r\n                    cc.Tween.stopAllByTarget(chip);\r\n                    TW(chip).then(cc.jumpTo(0.5, cc.v2(position.x, position.y), 50, 2).easing(cc.easeSineOut()))\r\n                        .call(() => {\r\n                            chip.position = position;\r\n                        })\r\n                        .start();\r\n                }\r\n                XocDiaController.instance.playAudioEffect(audio_clip.CHIP);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.listBets.length; i++) {\r\n            if (data.moneyBet <= this.listBets[i]) {\r\n                this.betIdx = i;\r\n                this.minBetIdx = this.betIdx;\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.btnBets.length; i++) {\r\n            let btnBet = this.btnBets[i];\r\n            btnBet.active.active = i == this.minBetIdx;\r\n            btnBet.node.active = i >= this.minBetIdx;\r\n        }\r\n\r\n        this.gameState = data.gameState;\r\n        let msg = \"\";\r\n        switch (this.gameState) {\r\n            case 1://bat dau van moi\r\n                msg = \"Bắt đầu ván mới\";\r\n                break;\r\n            case 2://bat dau dat cua\r\n                {\r\n                    msg = \"Bắt đầu đặt cửa\";\r\n                    // if(this.nodeExit && this.nodeExit.active){\r\n                    //     this.node.active = false;\r\n                    //     this.actBack();\r\n                    // }\r\n                    this.sprProgressTime.node.parent.active = true;\r\n                    this.curTime = TimeUtils.currentTimeMillis() + (data.countTime + 10) * 1000;\r\n                    this.totalTimeState = 30000 + 10000;\r\n                    this.lblProgressTime.string = \"Đang cược...\";\r\n                    this.schedule(this.clockTimeSche = () => {\r\n                        if (this.node.active) {\r\n                            XocDiaController.instance.playAudioEffect(audio_clip.CLOCK)\r\n                        } else {\r\n                            this.unschedule(this.clockTimeSche);\r\n                        }\r\n\r\n                    }, 1.0, data.countTime + 10);\r\n                    this.setStateDealer(STATE_DEALER.MOI_CUOC);\r\n                    this.diceResult.active = true;\r\n                }\r\n                break;\r\n\r\n            case 4://nha cai can tien, hoan tien\r\n                msg = \"Nhà cái cân tiền, hoàn tiền\";\r\n                break;\r\n            case 5://bat dau hoan tien\r\n                msg = \"Bắt đầu hoàn tiền\";\r\n                break;\r\n            case 6://bat dau tra thuong\r\n                msg = \"Vui lòng đợi ván sau!\";\r\n                this.sprProgressTime.node.parent.active = true;\r\n                this.sprProgressTime.fillRange = 1;\r\n                this.lblProgressTime.string = \"Vui lòng đợi ván sau!\";\r\n                break;\r\n        }\r\n        if (msg != \"\") {\r\n            this.setStateDealer(STATE_DEALER.IDLE);\r\n            let label = this.dealer.getComponentInChildren(cc.Label);\r\n            label.string = msg;\r\n            this.scheduleOnce(() => {\r\n                this.boxMsg.active = true;\r\n                this.scheduleOnce(() => {\r\n                    this.boxMsg.active = false;\r\n                }, 0.9);\r\n            }, 0.3);\r\n        }\r\n\r\n        XocDiaNetworkClient.getInstance().send(new cmd.CmdSendGetCau());\r\n    }\r\n    private state;\r\n    private setStateDealer(state) {\r\n        this.state = state;\r\n        switch (state) {\r\n            case STATE_DEALER.IDLE: {\r\n                this.dealer.timeScale = 1;\r\n                this.dealer.setAnimation(0, \"Idle\", true);\r\n                break;\r\n            }\r\n            case STATE_DEALER.MOI_CUOC: {\r\n                this.dealer.timeScale = 1;\r\n                this.dealer.setAnimation(0, \"MoiDatCuoc1\", false);\r\n                this.dealer.setCompleteListener(() => {\r\n                    this.setStateDealer(STATE_DEALER.IDLE);\r\n                });\r\n                break;\r\n            }\r\n            case STATE_DEALER.TRA_TIEN: {\r\n                this.dealer.timeScale = 1;\r\n                this.dealer.setAnimation(0, \"MoidDatCuoc2\", false);\r\n                this.dealer.setCompleteListener(() => {\r\n                    this.setStateDealer(STATE_DEALER.IDLE);\r\n                });\r\n                break;\r\n            }\r\n            case STATE_DEALER.XOC_LO: {\r\n                cc.Tween.stopAllByTarget(this.diceResult);\r\n                TW(this.diceResult).to(0.5, { scale: 0, y: 335 }, { easing: cc.easing.sineIn }).call(() => {\r\n                    this.diceResult.active = false;\r\n                    this.dealer.timeScale = 3;\r\n                    this.dealer.setAnimation(0, \"LacDia\", false);\r\n                    XocDiaController.instance.playAudioEffect(audio_clip.XOC_DIA);\r\n                    this.dealer.setCompleteListener(() => {\r\n                        this.setStateDealer(STATE_DEALER.MOI_CUOC);\r\n                    });\r\n                }).start();\r\n                this.scheduleOnce(() => {\r\n                    this.xocDice();\r\n                }, 3.2 / 2)\r\n                break;\r\n            }\r\n            case STATE_DEALER.MO_DIA: {\r\n                this.dealer.timeScale = 1;\r\n                this.dealer.setAnimation(0, \"MoiDatCuoc2\", false);\r\n                this.dealer.setCompleteListener(() => {\r\n                    this.setStateDealer(STATE_DEALER.IDLE);\r\n                });\r\n                break;\r\n            }\r\n\r\n        }\r\n    }\r\n    public actSetting() {\r\n        this.boxSetting.active = !this.boxSetting.active;\r\n    }\r\n\r\n\r\n    public actSendChat() {\r\n        // App.instance.ShowAlertDialog(App.instance.getTextLang(\"txt_function_in_development\"));\r\n        let msg = this.edtChatInput.string.trim();\r\n        if (msg != \"\") {\r\n            XocDiaNetworkClient.getInstance().send(new cmd.SendChatRoom(0, msg));\r\n        }\r\n        this.edtChatInput.string = \"\";\r\n    }\r\n\r\n    public actSendChatNhanh(msg) {\r\n        // App.instance.ShowAlertDialog(App.instance.getTextLang(\"txt_function_in_development\"));\r\n        if (msg != \"\") {\r\n            XocDiaNetworkClient.getInstance().send(new cmd.SendChatRoom(0, msg));\r\n        }\r\n        this.edtChatInput.string = \"\";\r\n    }\r\n\r\n    public actTutorial() {\r\n        this.showTutorial();\r\n    }\r\n\r\n    public actRank() {\r\n        App.instance.ShowAlertDialog(App.instance.getTextLang(\"txt_function_in_development\"));\r\n    }\r\n\r\n    public actHistory() {\r\n        this.onBtnHistory();\r\n    }\r\n\r\n    public actOpenMusic() {\r\n        App.instance.ShowAlertDialog(App.instance.getTextLang(\"txt_function_in_development\"));\r\n    }\r\n\r\n    public actBack() {\r\n        XocDiaNetworkClient.getInstance().close();\r\n        App.instance.loadScene(\"Lobby\");\r\n    }\r\n\r\n\r\n    public actOrderBanker() {\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendOrderBanker());\r\n    }\r\n\r\n    public actCancelBanker() {\r\n        XocDiaNetworkClient.getInstance().send(new cmd.SendCancelBanker());\r\n    }\r\n\r\n\r\n    // update (dt) {}\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport Http from \"../../Loading/src/Http\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Dialog from \"../../Lobby/LobbyScript/Script/common/Dialog\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\n\r\n\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class PopupTransaction extends Dialog {\r\n    @property(cc.Node)\r\n    content: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    prefab: cc.Node = null;\r\n    \r\n    @property(cc.Label)\r\n    lblPage: cc.Label = null;\r\n\r\n\r\n\r\n    @property([cc.BitmapFont])\r\n    fontNumber: cc.BitmapFont[] = [];\r\n\r\n    private page: number = 1;\r\n    private maxPage: number = 1;\r\n    private items = new Array<cc.Node>();\r\n    private data = null;\r\n    private dataPlay = [];\r\n    private dataCashout = [];\r\n    private dataExchange = [];\r\n    private currentData = [];\r\n    private totalPageLoaded = 0;\r\n    onLoad() {\r\n\r\n    }\r\n    start() {\r\n\r\n       \r\n    }\r\n\r\n    dismiss() {\r\n        super.dismiss();\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n\r\n    _onShowed() {\r\n        super._onShowed();\r\n        this.page = 1;\r\n        this.maxPage = 1;\r\n        this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n        this.loadData();\r\n    }\r\n\r\n    show() {\r\n        super.show();\r\n        this.resetDataLoaded();\r\n        this.currentData = [];\r\n        this.data\r\n\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n    resetDataLoaded() {\r\n        this.totalPageLoaded = 0;\r\n        this.currentData = [];\r\n        this.dataCashout = [];\r\n        this.dataPlay = [];\r\n        this.dataExchange = [];\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            this.items[i].active = false;\r\n        }\r\n    }\r\n\r\n    actNextPage() {\r\n        if (this.page < this.maxPage) {\r\n            this.page++;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n    actPrevPage() {\r\n        if (this.page > 1) {\r\n            this.page--;\r\n            this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n            this.loadData();\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    loadPage(res) {\r\n        this.content.removeAllChildren();\r\n        for (let i = 0; i < 13; i++) {\r\n            var indexData = i;\r\n\r\n            if (indexData < res[\"transactions\"].length) {\r\n                let item = cc.instantiate(this.prefab);\r\n                item.parent = this.content;\r\n                let itemData = res[\"transactions\"][indexData];\r\n                var json = JSON.parse(itemData[\"description\"]);\r\n                item.getChildByName(\"Trans\").getComponent(cc.Label).string = itemData[\"transId\"];\r\n                item.getChildByName(\"Time\").getComponent(cc.Label).string = itemData[\"transactionTime\"];\r\n                item.getChildByName(\"Service\").getComponent(cc.Label).string = json[\"roomID\"];\r\n                item.getChildByName(\"Coin\").getComponent(cc.Label).string = (itemData[\"moneyExchange\"] > 0 ? \"+\" : \"\") + Utils.formatNumber(itemData[\"moneyExchange\"]);\r\n                item.getChildByName(\"Balance\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"currentMoney\"]);\r\n                item.getChildByName(\"Coin\").getComponent(cc.Label).font = itemData[\"moneyExchange\"] > 0 ? this.fontNumber[0] : this.fontNumber[1];\r\n                item.getChildByName(\"Coin\").getComponent(cc.Label).fontSize = itemData[\"moneyExchange\"] > 0 ? 15 : 15;\r\n\r\n                var pos =  item.getChildByName(\"Coin\").getComponent(cc.Label).node.position;\r\n                item.getChildByName(\"Coin\").getComponent(cc.Label).node.position = itemData[\"moneyExchange\"] > 0 ? cc.v3(pos.x,15,0) : cc.v3(pos.x,5,0);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private loadData(isReloadScr = true) {\r\n        App.instance.showLoading(true);\r\n        let params = null;\r\n        params = { \"c\": 140, \"un\": Configs.Login.Nickname, \"p\": this.page };\r\n        //  cc.log(\"HistoryTienLen request:\"+JSON.stringify(params));\r\n        Http.get(Configs.App.API, params, (err, res) => {\r\n            App.instance.showLoading(false);\r\n            //  cc.log(\"HistoryTienLen response:\"+JSON.stringify(res));\r\n            if (err != null) {\r\n\r\n                return;\r\n            }\r\n            if (res[\"success\"]) {\r\n                this.maxPage = res[\"totalPages\"];\r\n                this.totalPageLoaded++;\r\n                this.data = res;\r\n                let transactionData = res['transactions'];\r\n                //  cc.log(\"transactionData:\" + JSON.stringify(transactionData));\r\n                if (this.totalPageLoaded < this.maxPage) {\r\n                    this.dataPlay.push(...transactionData);\r\n                    this.currentData = this.dataPlay;\r\n                }\r\n               \r\n                this.maxPage = res[\"totalPages\"];\r\n                this.lblPage.string = this.page + \"/\" + this.maxPage;\r\n                this.loadPage(res);\r\n\r\n            } else {\r\n                this.content.removeAllChildren();\r\n            }\r\n        });\r\n    }\r\n   \r\n    private setDataItem(item, itemData) {\r\n        var json = JSON.parse(itemData[\"description\"]);\r\n        item.getChildByName(\"Trans\").getComponent(cc.Label).string = itemData[\"transId\"];\r\n        item.getChildByName(\"Time\").getComponent(cc.Label).string = itemData[\"transactionTime\"];\r\n        item.getChildByName(\"Service\").getComponent(cc.Label).string = json[\"roomID\"];\r\n        item.getChildByName(\"Coin\").getComponent(cc.Label).string = (itemData[\"moneyExchange\"] > 0 ? \"+\" : \"\") + Utils.formatNumber(itemData[\"moneyExchange\"]);\r\n        item.getChildByName(\"Coin\").getComponent(cc.Label).font = itemData[\"moneyExchange\"] > 0 ? this.fontNumber[0] : this.fontNumber[1];\r\n        item.getChildByName(\"Coin\").getComponent(cc.Label).fontSize = itemData[\"moneyExchange\"] > 0 ? 8 : 7;\r\n        item.getChildByName(\"Balance\").getComponent(cc.Label).string = Utils.formatNumber(itemData[\"currentMoney\"]);\r\n        item.getChildByName(\"Desc\").getComponent(cc.RichText).string = itemData[\"description\"];\r\n        item.active = true;\r\n    }\r\n    convertNameThirdParty(serviceName) {\r\n        switch (serviceName) {\r\n            case \"WM_DEPOSIT\":\r\n            case \"WM_WITHDRAW\":\r\n                return \"Live casino WM\";\r\n            case \"IBC2_DEPOSIT\":\r\n            case \"IBC2_WITHDRAW\":\r\n                return \"Thể Thao IBC\";\r\n            case \"AG_DEPOSIT\":\r\n            case \"AG_WITHDRAW\":\r\n                return \"Live casino AG\";\r\n            case \"CMD_DEPOSIT\":\r\n            case \"CMD_WITHDRAW\":\r\n                return \"Thể thao CMD368\";\r\n            case \"Cashout\":\r\n                return \"Rút tiền\";\r\n            case \"190\":\r\n                return \"Tài Xỉu Siêu Tốc\";\r\n            default:\r\n                return serviceName\r\n        }\r\n    }\r\n    onScrollEvent(scrollview, eventType, customEventData) {\r\n        if (eventType == cc.ScrollView.EventType.SCROLL_TO_BOTTOM) {\r\n            if (this.page < this.maxPage) {\r\n                this.page++;\r\n                this.loadData(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Learn TypeScript:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport Utils from \"../../Lobby/LobbyScript/Script/common/Utils\";\r\nimport cmd from \"./XocDia.Cmd\";\r\nimport XocDiaNetworkClient from \"./XocDia.XocDiaNetworkClient\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class XocDiaRoom extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    lblBet: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    lblMin: cc.Label = null;\r\n    @property(cc.Label)\r\n    lblPlayers: cc.Label = null;\r\n    @property(cc.Sprite)\r\n    sprPlayers: cc.Sprite = null;\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n    private itemData = null;\r\n    init(itemData){\r\n        this.itemData = itemData;\r\n        this.lblBet.string = Utils.formatNumber(itemData[\"id\"]);\r\n        this.lblMin.string = Utils.formatNumber(itemData[\"requiredMoney\"]);\r\n        this.lblPlayers.string = itemData[\"userCount\"] + \"/\" + itemData[\"maxUserPerRoom\"];\r\n        this.sprPlayers.fillRange = itemData[\"userCount\"] / itemData[\"maxUserPerRoom\"];\r\n    }\r\n\r\n    onBtnClick(){\r\n        if (Configs.Login.Coin >= this.itemData[\"requiredMoney\"]) {\r\n            App.instance.showLoading(true);\r\n            XocDiaNetworkClient.getInstance().send(new cmd.SendJoinRoomById(this.itemData[\"id\"]));\r\n        } else {\r\n            App.instance.showToast(\"Số dư của bạn không đủ! Vui lòng nạp thêm.\")\r\n        }\r\n    }\r\n}\r\n","\r\nimport Lobby from \"./XocDia.Lobby\";\r\nimport Play from \"./XocDia.Play\";\r\nimport XocDiaNetworkClient from \"./XocDia.XocDiaNetworkClient\";\r\n\r\nimport Configs from \"../../Loading/src/Configs\";\r\nimport App from \"../../Lobby/LobbyScript/Script/common/App\";\r\nimport InPacket from \"../../Lobby/LobbyScript/Script/networks/Network.InPacket\";\r\nimport cmdNetwork from \"../../Lobby/LobbyScript/Script/networks/Network.Cmd\";\r\nimport SPUtils from \"../../Lobby/LobbyScript/Script/common/SPUtils\";\r\nimport AudioManager from \"../../Lobby/LobbyScript/Script/common/Common.AudioManager\";\r\nenum audio_clip {\r\n    BG = 0,\r\n    LOSE = 1,\r\n    WIN = 2,\r\n    START_GAME = 3,\r\n    XOC_DIA = 4,\r\n    CHIP = 5\r\n}\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass(\"XocDia.SoundManager\")\r\nexport class SoundManager {\r\n    @property(cc.AudioSource)\r\n    bgMusic: cc.AudioSource = null;\r\n\r\n    @property(cc.AudioSource)\r\n    effSound: cc.AudioSource = null;\r\n\r\n    @property([cc.AudioClip])\r\n    listAudio: cc.AudioClip[] = [];\r\n    playBgMusic() {\r\n        if (SPUtils.getMusicVolumn() > 0) {\r\n            this.bgMusic.clip = this.listAudio[audio_clip.BG];\r\n            this.bgMusic.play();\r\n        }\r\n    }\r\n    playAudioEffect(indexAudio) {\r\n        if (SPUtils.getSoundVolumn() > 0) {\r\n            cc.audioEngine.play(this.listAudio[indexAudio], false, 1);\r\n        }\r\n    }\r\n    stopBgMusic() {\r\n        this.bgMusic.stop();\r\n    }\r\n}\r\n@ccclass\r\nexport default class XocDiaController extends cc.Component {\r\n\r\n    public static instance: XocDiaController = null;\r\n\r\n    @property(cc.Node)\r\n    noteLobby: cc.Node = null;\r\n    @property(cc.Node)\r\n    nodePlay: cc.Node = null;\r\n    @property(SoundManager)\r\n    soundManager: SoundManager = null;\r\n\r\n    public lobby: Lobby = null;\r\n    public play: Play = null;\r\n\r\n    onLoad() {\r\n        XocDiaController.instance = this;\r\n        this.lobby = this.noteLobby.getComponent(Lobby);\r\n    }\r\n\r\n    start() {\r\n        this.lobby.init();\r\n        // this.play.init();\r\n\r\n        this.lobby.node.active = true;\r\n         //this.play.node.active = true;\r\n\r\n        App.instance.showErrLoading(\"Đang kết nối tới server...\");\r\n        XocDiaNetworkClient.getInstance().addOnOpen(() => {\r\n            App.instance.showErrLoading(\"Đang đăng nhập...\");\r\n            XocDiaNetworkClient.getInstance().send(new cmdNetwork.SendLogin(Configs.Login.Nickname, Configs.Login.AccessToken));\r\n        }, this);\r\n        XocDiaNetworkClient.getInstance().addOnClose(() => {\r\n            //  cc.log(\"-----------XocDia close:\"+XocDiaNetworkClient.getInstance().isConnected());\r\n            XocDiaNetworkClient.getInstance().close();\r\n            App.instance.loadScene(\"Lobby\");\r\n        }, this);\r\n        XocDiaNetworkClient.getInstance().addListener((data) => {\r\n            let inpacket = new InPacket(data);\r\n            switch (inpacket.getCmdId()) {\r\n                case cmdNetwork.Code.LOGIN:\r\n                    App.instance.showLoading(false);\r\n                    //this.lobby.actRefesh();\r\n\t\t\t\t\tthis.lobby.actQuickPlay();\r\n                    break;\r\n            }\r\n        }, this);\r\n        //  cc.log(\"-----------XocDia start:\"+XocDiaNetworkClient.getInstance().isConnected());\r\n        if(XocDiaNetworkClient.getInstance().isConnected() == false){\r\n            XocDiaNetworkClient.getInstance().connect();\r\n        }\r\n        AudioManager.getInstance().playBackgroundMusic(this.soundManager.listAudio[audio_clip.BG]);\r\n    }\r\n\r\n    public showLobby() {\r\n        this.lobby.show();\r\n        this.play.node.active = false;\r\n    }\r\n    public showGamePlay(res) {\r\n        if (this.play == null) {\r\n            App.instance.showLoading(true);\r\n            cc.assetManager.loadBundle(\"XocDia\", (err, bundleGame) => {\r\n                bundleGame.load(\"res/prefabs/Play\", cc.Prefab, (finish, total) => {\r\n                    App.instance.showErrLoading(App.instance.getTextLang('txt_loading1'));\r\n                }, (err, prefab: cc.Prefab) => {\r\n                    this.play = cc.instantiate(prefab).getComponent(Play);\r\n                    this.play.node.parent = this.node;\r\n                    this.play.init();\r\n                    this.play.show(res);\r\n                    App.instance.showLoading(false);\r\n                    //  cc.log(\"init game player succecss!\");\r\n                    this.lobby.node.active = false;\r\n                });\r\n            })\r\n        } else {\r\n            this.lobby.node.active = false;\r\n            this.play.show(res);\r\n        }\r\n    }\r\n    public playAudioEffect(index) {\r\n        this.soundManager.playAudioEffect(index);\r\n    }\r\n}\r\n","import Configs from \"../../Loading/src/Configs\";\r\nimport NetworkClient from \"../../Lobby/LobbyScript/Script/networks/Network.NetworkClient\";\r\nimport NetworkListener from \"../../Lobby/LobbyScript/Script/networks/Network.NetworkListener\";\r\nimport OutPacket from \"../../Lobby/LobbyScript/Script/networks/Network.OutPacket\";\r\n\r\n\r\nexport default class XocDiaNetworkClient extends NetworkClient {\r\n    private static instance: XocDiaNetworkClient;\r\n\r\n    private listeners: Array<NetworkListener> = new Array<NetworkListener>();\r\n\r\n    public static getInstance(): XocDiaNetworkClient {\r\n        if (this.instance == null) {\r\n            this.instance = new XocDiaNetworkClient();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.isUseWSS = Configs.App.USE_WSS;\r\n    }\r\n\r\n    public connect() {\r\n        super.connect(Configs.App.HOST_XOCDIA.host, Configs.App.HOST_XOCDIA.port);\r\n    }\r\n\r\n    protected onOpen(ev: Event) {\r\n        //  cc.log(\"onOpen XocDia\");\r\n        super.onOpen(ev);\r\n    }\r\n\r\n    protected onMessage(ev: MessageEvent) {\r\n        var data = new Uint8Array(ev.data);\r\n        for (var i = 0; i < this.listeners.length; i++) {\r\n            var listener = this.listeners[i];\r\n            if (listener.target && listener.target instanceof Object && listener.target.node) {\r\n                listener.callback(data);\r\n            } else {\r\n                this.listeners.splice(i, 1);\r\n                i--;\r\n            }\r\n        }\r\n    }\r\n\r\n    public addListener(callback: (data: Uint8Array) => void, target: cc.Component) {\r\n        this.listeners.push(new NetworkListener(target, callback));\r\n    }\r\n\r\n    public send(packet: OutPacket) {\r\n        for (var b = new Int8Array(packet._length), c = 0; c < packet._length; c++)\r\n            b[c] = packet._data[c];\r\n        if (this.ws != null && this.isConnected())\r\n            this.ws.send(b.buffer);\r\n    }\r\n}\r\n"],"file":"index.js"}